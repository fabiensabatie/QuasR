// Typedefs
typedef intptr_t atomic_bool
typedef intptr_t atomic_char
typedef intptr_t atomic_flag
typedef intptr_t atomic_int_fast16_t
typedef intptr_t atomic_int_fast32_t
typedef intptr_t atomic_int_fast64_t
typedef intptr_t atomic_int_fast8_t
typedef intptr_t atomic_int_least16_t
typedef intptr_t atomic_int_least32_t
typedef intptr_t atomic_int_least64_t
typedef intptr_t atomic_int_least8_t
typedef intptr_t atomic_intmax_t
typedef intptr_t atomic_intptr_t
typedef intptr_t atomic_int
typedef intptr_t atomic_llong
typedef intptr_t atomic_long
typedef intptr_t atomic_ptrdiff_t
typedef intptr_t atomic_schar
typedef intptr_t atomic_short
typedef intptr_t atomic_size_t
typedef intptr_t atomic_uchar
typedef intptr_t atomic_uint_fast16_t
typedef intptr_t atomic_uint_fast32_t
typedef intptr_t atomic_uint_fast64_t
typedef intptr_t atomic_uint_fast8_t
typedef intptr_t atomic_uint_least16_t
typedef intptr_t atomic_uint_least32_t
typedef intptr_t atomic_uint_least64_t
typedef intptr_t atomic_uint_least8_t
typedef intptr_t atomic_uintmax_t
typedef intptr_t atomic_uintptr_t
typedef intptr_t atomic_uint
typedef intptr_t atomic_ullong
typedef intptr_t atomic_ulong
typedef intptr_t atomic_ushort
typedef intptr_t atomic_wchar_t
typedef _Bool atomic_bool
typedef _Bool atomic_flag
typedef char atomic_char
typedef int_fast16_t atomic_int_fast16_t
typedef int_fast32_t atomic_int_fast32_t
typedef int_fast64_t atomic_int_fast64_t
typedef int_fast8_t atomic_int_fast8_t
typedef int_least16_t atomic_int_least16_t
typedef int_least32_t atomic_int_least32_t
typedef int_least64_t atomic_int_least64_t
typedef int_least8_t atomic_int_least8_t
typedef intmax_t atomic_intmax_t
typedef intptr_t atomic_intptr_t
typedef int atomic_int
typedef long long atomic_llong
typedef long atomic_long
typedef ptrdiff_t atomic_ptrdiff_t
typedef short atomic_short
typedef signed char atomic_schar
typedef size_t atomic_size_t
typedef uint_fast16_t atomic_uint_fast16_t
typedef uint_fast32_t atomic_uint_fast32_t
typedef uint_fast64_t atomic_uint_fast64_t
typedef uint_fast8_t atomic_uint_fast8_t
typedef uint_least16_t atomic_uint_least16_t
typedef uint_least32_t atomic_uint_least32_t
typedef uint_least64_t atomic_uint_least64_t
typedef uint_least8_t atomic_uint_least8_t
typedef uintmax_t atomic_uintmax_t
typedef uintptr_t atomic_uintptr_t
typedef unsigned char atomic_uchar
typedef unsigned int atomic_uint
typedef unsigned long long atomic_ullong
typedef unsigned long atomic_ulong
typedef unsigned short atomic_ushort
typedef wchar_t atomic_wchar_t
typedef intptr_t atomic_bool
typedef intptr_t atomic_char
typedef intptr_t atomic_flag
typedef intptr_t atomic_int_fast16_t
typedef intptr_t atomic_int_fast32_t
typedef intptr_t atomic_int_fast64_t
typedef intptr_t atomic_int_fast8_t
typedef intptr_t atomic_int_least16_t
typedef intptr_t atomic_int_least32_t
typedef intptr_t atomic_int_least64_t
typedef intptr_t atomic_int_least8_t
typedef intptr_t atomic_intmax_t
typedef intptr_t atomic_intptr_t
typedef intptr_t atomic_int
typedef intptr_t atomic_llong
typedef intptr_t atomic_long
typedef intptr_t atomic_ptrdiff_t
typedef intptr_t atomic_schar
typedef intptr_t atomic_short
typedef intptr_t atomic_size_t
typedef intptr_t atomic_uchar
typedef intptr_t atomic_uint_fast16_t
typedef intptr_t atomic_uint_fast32_t
typedef intptr_t atomic_uint_fast64_t
typedef intptr_t atomic_uint_fast8_t
typedef intptr_t atomic_uint_least16_t
typedef intptr_t atomic_uint_least32_t
typedef intptr_t atomic_uint_least64_t
typedef intptr_t atomic_uint_least8_t
typedef intptr_t atomic_uintmax_t
typedef intptr_t atomic_uintptr_t
typedef intptr_t atomic_uint
typedef intptr_t atomic_ullong
typedef intptr_t atomic_ulong
typedef intptr_t atomic_ushort
typedef intptr_t atomic_wchar_t
typedef intptr_t atomic_bool
typedef intptr_t atomic_char
typedef intptr_t atomic_flag
typedef intptr_t atomic_int_fast16_t
typedef intptr_t atomic_int_fast32_t
typedef intptr_t atomic_int_fast64_t
typedef intptr_t atomic_int_fast8_t
typedef intptr_t atomic_int_least16_t
typedef intptr_t atomic_int_least32_t
typedef intptr_t atomic_int_least64_t
typedef intptr_t atomic_int_least8_t
typedef intptr_t atomic_intmax_t
typedef intptr_t atomic_intptr_t
typedef intptr_t atomic_int
typedef intptr_t atomic_llong
typedef intptr_t atomic_long
typedef intptr_t atomic_ptrdiff_t
typedef intptr_t atomic_schar
typedef intptr_t atomic_short
typedef intptr_t atomic_size_t
typedef intptr_t atomic_uchar
typedef intptr_t atomic_uint_fast16_t
typedef intptr_t atomic_uint_fast32_t
typedef intptr_t atomic_uint_fast64_t
typedef intptr_t atomic_uint_fast8_t
typedef intptr_t atomic_uint_least16_t
typedef intptr_t atomic_uint_least32_t
typedef intptr_t atomic_uint_least64_t
typedef intptr_t atomic_uint_least8_t
typedef intptr_t atomic_uintmax_t
typedef intptr_t atomic_uintptr_t
typedef intptr_t atomic_uint
typedef intptr_t atomic_ullong
typedef intptr_t atomic_ulong
typedef intptr_t atomic_ushort
typedef intptr_t atomic_wchar_t
typedef intptr_t atomic_bool
typedef intptr_t atomic_char
typedef intptr_t atomic_flag
typedef intptr_t atomic_int_fast16_t
typedef intptr_t atomic_int_fast32_t
typedef intptr_t atomic_int_fast64_t
typedef intptr_t atomic_int_fast8_t
typedef intptr_t atomic_int_least16_t
typedef intptr_t atomic_int_least32_t
typedef intptr_t atomic_int_least64_t
typedef intptr_t atomic_int_least8_t
typedef intptr_t atomic_intmax_t
typedef intptr_t atomic_intptr_t
typedef intptr_t atomic_int
typedef intptr_t atomic_llong
typedef intptr_t atomic_long
typedef intptr_t atomic_ptrdiff_t
typedef intptr_t atomic_schar
typedef intptr_t atomic_short
typedef intptr_t atomic_size_t
typedef intptr_t atomic_uchar
typedef intptr_t atomic_uint_fast16_t
typedef intptr_t atomic_uint_fast32_t
typedef intptr_t atomic_uint_fast64_t
typedef intptr_t atomic_uint_fast8_t
typedef intptr_t atomic_uint_least16_t
typedef intptr_t atomic_uint_least32_t
typedef intptr_t atomic_uint_least64_t
typedef intptr_t atomic_uint_least8_t
typedef intptr_t atomic_uintmax_t
typedef intptr_t atomic_uintptr_t
typedef intptr_t atomic_uint
typedef intptr_t atomic_ullong
typedef intptr_t atomic_ulong
typedef intptr_t atomic_ushort
typedef intptr_t atomic_wchar_t
typedef AVS_Clip AVS_Clip
typedef AVS_FilterInfo AVS_FilterInfo
typedef AVS_Library AVS_Library
typedef AVS_ScriptEnvironment AVS_ScriptEnvironment
typedef AVS_Value AVS_Value
typedef AVS_VideoFrameBuffer AVS_VideoFrameBuffer
typedef AVS_VideoFrame AVS_VideoFrame
typedef AVS_VideoInfo AVS_VideoInfo
typedef AVS_Value (AVSC_CC *)(AVS_ScriptEnvironment *,AVS_Value args,void * user_data) AVS_ApplyFunc
typedef void (AVSC_CC *)(void * user_data,AVS_ScriptEnvironment * env) AVS_ShutdownFunc
typedef __int64 INT64
typedef float SFLOAT
typedef long long int INT64
typedef unsigned char BYTE
typedef unsigned int Pixel32
typedef AVS_Clip AVS_Clip
typedef AVS_FilterInfo AVS_FilterInfo
typedef AVS_ScriptEnvironment AVS_ScriptEnvironment
typedef AVS_Value AVS_Value
typedef AVS_VideoFrameBuffer AVS_VideoFrameBuffer
typedef AVS_VideoFrame AVS_VideoFrame
typedef AVS_VideoInfo AVS_VideoInfo
typedef AVS_Value (AVSC_CC *)(AVS_ScriptEnvironment *,AVS_Value args,void * user_data) AVS_ApplyFunc
typedef __int64 INT64
typedef long long int INT64
typedef void (AVSC_CC *)(void * user_data,AVS_ScriptEnvironment * env) AVS_ShutdownFunc
typedef avxsynth::_GUID GUID
typedef BYTE * LPBYTE
typedef CLSID * LPCLSID
typedef DWORD * DWORD_PTR
typedef DWORD * LPDWORD
typedef DWORD COLORREF
typedef DWORD FOURCC
typedef DWORD HRESULT
typedef GUID CLSID
typedef GUID IID
typedef GUID REFIID
typedef HACMSTREAM * LPHACMSTREAM
typedef HANDLE HINSTANCE
typedef HANDLE HWND
typedef LONG_PTR LRESULT
typedef LPCSTR LPCOLESTR
typedef LPSTR LPOLESTR
typedef PVOID HANDLE
typedef TCHAR * LPTSTR
typedef UINT MMRESULT
typedef bool BOOL
typedef char * LPSTR
typedef char TCHAR
typedef const TCHAR * LPCTSTR
typedef const char * LPCSTR
typedef int32_t * LONG_PTR
typedef int32_t LONG
typedef int32_t __int32
typedef int64_t __int64
typedef uint32_t * ULONG_PTR
typedef uint32_t BOOL
typedef uint32_t DWORD
typedef uint32_t ULONG
typedef uint64_t _fsize_t
typedef unsigned char BYTE
typedef unsigned int UINT
typedef unsigned short WORD
typedef void * HACMDRIVERID
typedef void * HACMDRIVER
typedef void * HACMOBJ
typedef void * HACMSTREAM
typedef void * HBITMAP
typedef void * HBRUSH
typedef void * HDC
typedef void * HFONT
typedef void * HGDIOBJ
typedef void * HICON
typedef void * HIC
typedef void * HMMIO
typedef void * HMODULE
typedef void * LPHACMDRIVER
typedef void * LPVOID
typedef void * PVOID
typedef wchar_t WCHAR
typedef __anone4bc884d0108 pthread_t
typedef __anone4bc884d0208 pthread_cond_t
typedef __anone4bc884d0308 pthread_once_t
typedef _fmutex pthread_mutex_t
typedef void pthread_attr_t
typedef void pthread_condattr_t
typedef void pthread_mutexattr_t
typedef pthread_t pthread_t
typedef CONDITION_VARIABLE pthread_cond_t
typedef INIT_ONCE pthread_once_t
typedef SRWLOCK pthread_mutex_t
typedef OutputStream OutputStream
typedef DecodeContext DecodeContext
typedef FilteringContext FilteringContext
typedef StreamContext StreamContext
typedef OptionDef OptionDef
typedef OptionGroupDef OptionGroupDef
typedef OptionGroupList OptionGroupList
typedef OptionGroup OptionGroup
typedef OptionParseContext OptionParseContext
typedef Option Option
typedef SpecifierOpt SpecifierOpt
typedef BenchmarkTimeStamps BenchmarkTimeStamps
typedef __anon714c9d3c0303 OSTFinished
typedef FilterGraph FilterGraph
typedef HWAccel HWAccel
typedef HWDevice HWDevice
typedef InputFile InputFile
typedef InputFilter InputFilter
typedef InputStream InputStream
typedef OptionsContext OptionsContext
typedef OutputFile OutputFile
typedef OutputFilter OutputFilter
typedef OutputStream OutputStream
typedef StreamMap StreamMap
typedef __anon714c9d3c0108 AudioChannelMap
typedef VTContext VTContext
typedef AudioParams AudioParams
typedef Clock Clock
typedef Decoder Decoder
typedef FrameQueue FrameQueue
typedef Frame Frame
typedef MyAVPacketList MyAVPacketList
typedef PacketQueue PacketQueue
typedef VideoState VideoState
typedef __anon872c66460103 SectionID
typedef __anon872c66460403 StringValidation
typedef CompactContext CompactContext
typedef DefaultContext DefaultContext
typedef FlatContext FlatContext
typedef INIContext INIContext
typedef InputFile InputFile
typedef InputStream InputStream
typedef JSONContext JSONContext
typedef LogBuffer LogBuffer
typedef ReadInterval ReadInterval
typedef WriterContext WriterContext
typedef Writer Writer
typedef XMLContext XMLContext
typedef CFrameBuffer CFrameBuffer
typedef FourXContext FourXContext
typedef EightBpsContext EightBpsContext
typedef EightSvxContext EightSvxContext
typedef A64Context A64Context
typedef ChannelCoupling ChannelCoupling
typedef ChannelElement ChannelElement
typedef DynamicRangeControl DynamicRangeControl
typedef IndividualChannelStream IndividualChannelStream
typedef LongTermPrediction LongTermPrediction
typedef OutputConfiguration OutputConfiguration
typedef PredictorState PredictorState
typedef Pulse Pulse
typedef SingleChannelElement SingleChannelElement
typedef TemporalNoiseShaping TemporalNoiseShaping
typedef __anon1ea37b3d0103 AACAC3ParseError
typedef AACAC3ParseContext AACAC3ParseContext
typedef AACBSFContext AACBSFContext
typedef SoftFloat AAC_FLOAT
typedef float AAC_FLOAT
typedef float INT64FLOAT
typedef float INTFLOAT
typedef float SHORTFLOAT
typedef float UINTFLOAT
typedef int16_t SHORTFLOAT
typedef int64_t INT64FLOAT
typedef int AAC_SIGNE
typedef int INTFLOAT
typedef unsigned AAC_SIGNE
typedef unsigned UINTFLOAT
typedef BandCodingPath BandCodingPath
typedef TrellisPath TrellisPath
typedef TrellisBandCodingPath TrellisBandCodingPath
typedef AACCoder AACCoder
typedef AACCoefficientsEncoder AACCoefficientsEncoder
typedef AACEncContext AACEncContext
typedef AACEncOptions AACEncOptions
typedef AACPCEInfo AACPCEInfo
typedef AACQuantizeBandCostCacheEntry AACQuantizeBandCostCacheEntry
typedef PSContext PSContext
typedef float INT32FLOAT
typedef int32_t INT32FLOAT
typedef PSDSPContext PSDSPContext
typedef AacPsyBand AacPsyBand
typedef AacPsyChannel AacPsyChannel
typedef AacPsyCoeffs AacPsyCoeffs
typedef AacPsyContext AacPsyContext
typedef PsyLamePreset PsyLamePreset
typedef AascContext AascContext
typedef AC3DolbyHeadphoneMode AC3DolbyHeadphoneMode
typedef AC3DolbySurroundEXMode AC3DolbySurroundEXMode
typedef AC3DolbySurroundMode AC3DolbySurroundMode
typedef AC3PreferredStereoDownmixMode AC3PreferredStereoDownmixMode
typedef __anon71c7becd0103 AC3DeltaStrategy
typedef __anon71c7becd0203 AC3ChannelMode
typedef __anon71c7becd0303 EAC3FrameType
typedef AC3BitAllocParameters AC3BitAllocParameters
typedef AC3HeaderInfo AC3HeaderInfo
typedef float INTFLOAT
typedef float SHORTFLOAT
typedef int16_t SHORTFLOAT
typedef int INTFLOAT
typedef mant_groups mant_groups
typedef AC3DecodeContext AC3DecodeContext
typedef AC3DSPContext AC3DSPContext
typedef AC3Mant AC3Mant
typedef AC3Block AC3Block
typedef AC3EncOptions AC3EncOptions
typedef AC3EncodeContext AC3EncodeContext
typedef float CoefSumType
typedef float CoefType
typedef float SampleType
typedef int16_t SampleType
typedef int32_t CoefType
typedef int64_t CoefSumType
typedef ACELPFContext ACELPFContext
typedef ACELPVContext ACELPVContext
typedef AMRFixed AMRFixed
typedef ADPCMDecodeContext ADPCMDecodeContext
typedef ADPCMChannelStatus ADPCMChannelStatus
typedef ADPCMEncodeContext ADPCMEncodeContext
typedef TrellisNode TrellisNode
typedef TrellisPath TrellisPath
typedef AACADTSHeaderInfo AACADTSHeaderInfo
typedef ADXChannelState ADXChannelState
typedef ADXContext ADXContext
typedef ADXParseContext ADXParseContext
typedef AICContext AICContext
typedef ALACContext ALACContext
typedef ALACDSPContext ALACDSPContext
typedef AlacEncodeContext AlacEncodeContext
typedef AlacLPCContext AlacLPCContext
typedef RiceContext RiceContext
typedef ALSBlockData ALSBlockData
typedef ALSChannelData ALSChannelData
typedef ALSDecContext ALSDecContext
typedef ALSSpecificConfig ALSSpecificConfig
typedef FormatMap FormatMap
typedef AmfContext AmfContext
typedef AmfTraceWriter AmfTraceWriter
typedef uint16_t R_TABLE_TYPE
typedef uint8_t R_TABLE_TYPE
typedef AMRNBFrame AMRNBFrame
typedef AMRNBSubframe AMRNBSubframe
typedef AMRContext AMRContext
typedef AMRWBFrame AMRWBFrame
typedef AMRWBSubFrame AMRWBSubFrame
typedef AMRWBContext AMRWBContext
typedef AnmContext AnmContext
typedef AnsiContext AnsiContext
typedef APEContext APEContext
typedef APEFilter APEFilter
typedef APEPredictor APEPredictor
typedef APERangecoder APERangecoder
typedef APERice APERice
typedef __anonabcfaf4e0108 FilterSignal
typedef __anonabcfaf4e0208 QMFAnalysis
typedef __anonabcfaf4e0308 Quantize
typedef __anonabcfaf4e0408 InvertQuantize
typedef __anonabcfaf4e0508 Prediction
typedef __anonabcfaf4e0608 Channel
typedef __anonabcfaf4e0708 AptXContext
typedef const struct __anonabcfaf4e0808 ConstTables
typedef ARBCContext ARBCContext
typedef FFASSDecoderContext FFASSDecoderContext
typedef __anonbcc036a30103 ASSFieldType
typedef __anonbcc036a30208 ASSFields
typedef __anonbcc036a30308 ASSSection
typedef int (*)(void * dest,const char * buf,int len) ASSConvertFunc
typedef ASSSplitContext ASSSplitContext
typedef __anonbcc036a80108 ASSScriptInfo
typedef __anonbcc036a80208 ASSStyle
typedef __anonbcc036a80308 ASSDialog
typedef __anonbcc036a80408 ASS
typedef __anonbcc036a80508 ASSCodesCallbacks
typedef __anonc1dd956e0108 ASSEncodeContext
typedef ASV1Context ASV1Context
typedef AtracGCContext AtracGCContext
typedef AtracGainInfo AtracGainInfo
typedef AT1Ctx AT1Ctx
typedef AT1SUCtx AT1SUCtx
typedef ATRAC3Context ATRAC3Context
typedef ChannelUnit ChannelUnit
typedef GainBlock GainBlock
typedef TonalComponent TonalComponent
typedef Atrac3pChanParams Atrac3pChanParams
typedef Atrac3pChanUnitCtx Atrac3pChanUnitCtx
typedef Atrac3pIPQFChannelCtx Atrac3pIPQFChannelCtx
typedef Atrac3pWaveEnvelope Atrac3pWaveEnvelope
typedef Atrac3pWaveParam Atrac3pWaveParam
typedef Atrac3pWaveSynthParams Atrac3pWaveSynthParams
typedef Atrac3pWavesData Atrac3pWavesData
typedef Atrac3pSpecCodeTab Atrac3pSpecCodeTab
typedef ATRAC3PContext ATRAC3PContext
typedef ATRAC9BlockData ATRAC9BlockData
typedef ATRAC9ChannelData ATRAC9ChannelData
typedef ATRAC9Context ATRAC9Context
typedef ATRAC9BlockConfig ATRAC9BlockConfig
typedef HuffmanCodebook HuffmanCodebook
typedef AudioFrameQueue AudioFrameQueue
typedef AudioFrame AudioFrame
typedef AudioDSPContext AudioDSPContext
typedef ATDecodeContext ATDecodeContext
typedef ATDecodeContext ATDecodeContext
typedef __anon71d2217e0103 AV1_OBU_Type
typedef AV1MetadataContext AV1MetadataContext
typedef AV1OBU AV1OBU
typedef AV1Packet AV1Packet
typedef AV1ParseContext AV1ParseContext
typedef AVBSFContext AVBSFContext
typedef AVBSFInternal AVBSFInternal
typedef AVBSFList AVBSFList
typedef AVBitStreamFilterContext AVBitStreamFilterContext
typedef AVBitStreamFilter AVBitStreamFilter
typedef AVCPBProperties AVCPBProperties
typedef AVCodecContext AVCodecContext
typedef AVCodecDefault AVCodecDefault
typedef AVCodecDescriptor AVCodecDescriptor
typedef AVCodecHWConfig AVCodecHWConfig
typedef AVCodecParameters AVCodecParameters
typedef AVCodecParserContext AVCodecParserContext
typedef AVCodecParser AVCodecParser
typedef AVCodec AVCodec
typedef AVHWAccel AVHWAccel
typedef AVPacketSideData AVPacketSideData
typedef AVPacket AVPacket
typedef AVPanScan AVPanScan
typedef AVPicture AVPicture
typedef AVProfile AVProfile
typedef AVSubtitleRect AVSubtitleRect
typedef AVSubtitle AVSubtitle
typedef RcOverride RcOverride
typedef AVDCT AVDCT
typedef DCTContext DCTContext
typedef FFTComplex FFTComplex
typedef FFTContext FFTContext
typedef RDFTContext RDFTContext
typedef float FFTSample
typedef __anon89a6f1740108 AVRnContext
typedef __anon71d33a3b0103 AvsBlockType
typedef __anon71d33a3b0203 AvsVideoSubType
typedef AvsContext AvsContext
typedef BethsoftvidContext BethsoftvidContext
typedef BFIContext BFIContext
typedef BinkContext BinkContext
typedef Bundle Bundle
typedef Tree Tree
typedef BinkAudioContext BinkAudioContext
typedef BinkDSPContext BinkDSPContext
typedef XbinContext XbinContext
typedef VLCcode VLCcode
typedef BSFCompatContext BSFCompatContext
typedef BlockDSPContext BlockDSPContext
typedef void (*)(uint8_t * block,uint8_t value,ptrdiff_t line_size,int h) op_fill_func
typedef __anon71e056950103 BiCompression
typedef BMPParseContext BMPParseContext
typedef BMVDecContext BMVDecContext
typedef PixHeader PixHeader
typedef BSFListContext BSFListContext
typedef BswapDSPContext BswapDSPContext
typedef GetByteContext GetByteContext
typedef PutByteContext PutByteContext
typedef __anon71d4e7e00103 C93BlockType
typedef C93DecoderContext C93DecoderContext
typedef CABACContext CABACContext
typedef AVSContext AVSContext
typedef AVSFrame AVSFrame
typedef CAVSDSPContext CAVSDSPContext
typedef CodedBitstreamContext CodedBitstreamContext
typedef CodedBitstreamFragment CodedBitstreamFragment
typedef CodedBitstreamUnit CodedBitstreamUnit
typedef uint32_t CodedBitstreamUnitType
typedef AV1RawColorConfig AV1RawColorConfig
typedef AV1RawDecoderModelInfo AV1RawDecoderModelInfo
typedef AV1RawFrameHeader AV1RawFrameHeader
typedef AV1RawFrame AV1RawFrame
typedef AV1RawMetadataHDRCLL AV1RawMetadataHDRCLL
typedef AV1RawMetadataHDRMDCV AV1RawMetadataHDRMDCV
typedef AV1RawMetadataITUTT35 AV1RawMetadataITUTT35
typedef AV1RawMetadataScalability AV1RawMetadataScalability
typedef AV1RawMetadataTimecode AV1RawMetadataTimecode
typedef AV1RawMetadata AV1RawMetadata
typedef AV1RawOBUHeader AV1RawOBUHeader
typedef AV1RawOBU AV1RawOBU
typedef AV1RawSequenceHeader AV1RawSequenceHeader
typedef AV1RawTileData AV1RawTileData
typedef AV1RawTileGroup AV1RawTileGroup
typedef AV1RawTileList AV1RawTileList
typedef AV1RawTimingInfo AV1RawTimingInfo
typedef AV1ReferenceFrameState AV1ReferenceFrameState
typedef CodedBitstreamAV1Context CodedBitstreamAV1Context
typedef CodedBitstreamH264Context CodedBitstreamH264Context
typedef H264RawAUD H264RawAUD
typedef H264RawFiller H264RawFiller
typedef H264RawHRD H264RawHRD
typedef H264RawNALUnitHeader H264RawNALUnitHeader
typedef H264RawPPS H264RawPPS
typedef H264RawSEIBufferingPeriod H264RawSEIBufferingPeriod
typedef H264RawSEIDisplayOrientation H264RawSEIDisplayOrientation
typedef H264RawSEIMasteringDisplayColourVolume H264RawSEIMasteringDisplayColourVolume
typedef H264RawSEIPanScanRect H264RawSEIPanScanRect
typedef H264RawSEIPayload H264RawSEIPayload
typedef H264RawSEIPicTimestamp H264RawSEIPicTimestamp
typedef H264RawSEIPicTiming H264RawSEIPicTiming
typedef H264RawSEIRecoveryPoint H264RawSEIRecoveryPoint
typedef H264RawSEIUserDataRegistered H264RawSEIUserDataRegistered
typedef H264RawSEIUserDataUnregistered H264RawSEIUserDataUnregistered
typedef H264RawSEI H264RawSEI
typedef H264RawSPSExtension H264RawSPSExtension
typedef H264RawSPS H264RawSPS
typedef H264RawScalingList H264RawScalingList
typedef H264RawSliceHeader H264RawSliceHeader
typedef H264RawSlice H264RawSlice
typedef H264RawVUI H264RawVUI
typedef CodedBitstreamH2645Context CodedBitstreamH2645Context
typedef CodedBitstreamH265Context CodedBitstreamH265Context
typedef H265RawAUD H265RawAUD
typedef H265RawHRDParameters H265RawHRDParameters
typedef H265RawNALUnitHeader H265RawNALUnitHeader
typedef H265RawPPS H265RawPPS
typedef H265RawPSExtensionData H265RawPSExtensionData
typedef H265RawProfileTierLevel H265RawProfileTierLevel
typedef H265RawSEIActiveParameterSets H265RawSEIActiveParameterSets
typedef H265RawSEIAlternativeTransferCharacteristics H265RawSEIAlternativeTransferCharacteristics
typedef H265RawSEIBufferingPeriod H265RawSEIBufferingPeriod
typedef H265RawSEIContentLightLevelInfo H265RawSEIContentLightLevelInfo
typedef H265RawSEIDecodedPictureHash H265RawSEIDecodedPictureHash
typedef H265RawSEIDisplayOrientation H265RawSEIDisplayOrientation
typedef H265RawSEIMasteringDisplayColourVolume H265RawSEIMasteringDisplayColourVolume
typedef H265RawSEIPanScanRect H265RawSEIPanScanRect
typedef H265RawSEIPayload H265RawSEIPayload
typedef H265RawSEIPicTiming H265RawSEIPicTiming
typedef H265RawSEIRecoveryPoint H265RawSEIRecoveryPoint
typedef H265RawSEITimeCode H265RawSEITimeCode
typedef H265RawSEIUserDataRegistered H265RawSEIUserDataRegistered
typedef H265RawSEIUserDataUnregistered H265RawSEIUserDataUnregistered
typedef H265RawSEI H265RawSEI
typedef H265RawSPS H265RawSPS
typedef H265RawSTRefPicSet H265RawSTRefPicSet
typedef H265RawScalingList H265RawScalingList
typedef H265RawSliceHeader H265RawSliceHeader
typedef H265RawSlice H265RawSlice
typedef H265RawSubLayerHRDParameters H265RawSubLayerHRDParameters
typedef H265RawVPS H265RawVPS
typedef H265RawVUI H265RawVUI
typedef CodedBitstreamType CodedBitstreamType
typedef CodedBitstreamJPEGContext CodedBitstreamJPEGContext
typedef JPEGRawApplicationData JPEGRawApplicationData
typedef JPEGRawComment JPEGRawComment
typedef JPEGRawFrameHeader JPEGRawFrameHeader
typedef JPEGRawHuffmanTableSpecification JPEGRawHuffmanTableSpecification
typedef JPEGRawHuffmanTable JPEGRawHuffmanTable
typedef JPEGRawQuantisationTableSpecification JPEGRawQuantisationTableSpecification
typedef JPEGRawQuantisationTable JPEGRawQuantisationTable
typedef JPEGRawScanHeader JPEGRawScanHeader
typedef JPEGRawScan JPEGRawScan
typedef CodedBitstreamMPEG2Context CodedBitstreamMPEG2Context
typedef MPEG2RawExtensionData MPEG2RawExtensionData
typedef MPEG2RawGroupOfPicturesHeader MPEG2RawGroupOfPicturesHeader
typedef MPEG2RawPictureCodingExtension MPEG2RawPictureCodingExtension
typedef MPEG2RawPictureDisplayExtension MPEG2RawPictureDisplayExtension
typedef MPEG2RawPictureHeader MPEG2RawPictureHeader
typedef MPEG2RawQuantMatrixExtension MPEG2RawQuantMatrixExtension
typedef MPEG2RawSequenceDisplayExtension MPEG2RawSequenceDisplayExtension
typedef MPEG2RawSequenceExtension MPEG2RawSequenceExtension
typedef MPEG2RawSequenceHeader MPEG2RawSequenceHeader
typedef MPEG2RawSliceHeader MPEG2RawSliceHeader
typedef MPEG2RawSlice MPEG2RawSlice
typedef MPEG2RawUserData MPEG2RawUserData
typedef CodedBitstreamVP9Context CodedBitstreamVP9Context
typedef VP9RawFrameHeader VP9RawFrameHeader
typedef VP9RawFrame VP9RawFrame
typedef VP9RawSuperframeIndex VP9RawSuperframeIndex
typedef VP9RawSuperframe VP9RawSuperframe
typedef VP9ReferenceFrameState VP9ReferenceFrameState
typedef CCaptionSubContext CCaptionSubContext
typedef CDGraphicsContext CDGraphicsContext
typedef CDXLVideoContext CDXLVideoContext
typedef CELPFContext CELPFContext
typedef CELPMContext CELPMContext
typedef CFHDContext CFHDContext
typedef CFHD_RL_VLC_ELEM CFHD_RL_VLC_ELEM
typedef Peak Peak
typedef Plane Plane
typedef SubBand SubBand
typedef CinepakContext CinepakContext
typedef cvid_strip cvid_strip
typedef uint8_t[12] cvid_codebook
typedef CinepakMode CinepakMode
typedef mb_encoding mb_encoding
typedef CinepakEncContext CinepakEncContext
typedef mb_info mb_info
typedef strip_info strip_info
typedef CLVContext CLVContext
typedef LevelCodes LevelCodes
typedef MVInfo MVInfo
typedef MV MV
typedef TileInfo TileInfo
typedef CLJRContext CLJRContext
typedef CLLCContext CLLCContext
typedef CNGContext CNGContext
typedef CNGContext CNGContext
typedef COOKSubpacket COOKSubpacket
typedef cook_gains cook_gains
typedef cook COOKContext
typedef CookParseContext CookParseContext
typedef __anonb073968e0108 CpiaContext
typedef __anon1d7a627f0103 CopyRet
typedef OpaqueList OpaqueList
typedef __anon1d7a627f0208 CHDContext
typedef CamStudioContext CamStudioContext
typedef CuvidContext CuvidContext
typedef CuvidParsedFrame CuvidParsedFrame
typedef CyuvDecodeContext CyuvDecodeContext
typedef AVD3D11VAContext AVD3D11VAContext
typedef DCACoreFrameHeader DCACoreFrameHeader
typedef DCACoreDecoder DCACoreDecoder
typedef DCADSPData DCADSPData
typedef DCAExssAsset DCAExssAsset
typedef DCAExssParser DCAExssParser
typedef LBRChunk LBRChunk
typedef DCALbrDecoder DCALbrDecoder
typedef DCALbrTone DCALbrTone
typedef DCAParseContext DCAParseContext
typedef DCAXllBand DCAXllBand
typedef DCAXllChSet DCAXllChSet
typedef DCAXllDecoder DCAXllDecoder
typedef int32_t[10] premultiplied_coeffs
typedef DCAADPCMEncContext DCAADPCMEncContext
typedef DCADCTContext DCADCTContext
typedef DCAContext DCAContext
typedef DCADSPContext DCADSPContext
typedef CompressionOptions CompressionOptions
typedef DCAEncContext DCAEncContext
typedef void (*)(DCAEncContext * c,int band1,int band2,int f,int32_t spectrum1,int32_t spectrum2,int channel,int32_t * arg) walk_band_t
typedef __anon8d026cb40108 softfloat
typedef DCAVLC DCAVLC
typedef DDSContext DDSContext
typedef FrameDecodeData FrameDecodeData
typedef DfaContext DfaContext
typedef int (*)(GetByteContext * gb,uint8_t * frame,int width,int height) chunk_decoder
typedef dirac_source_params dirac_source_params
typedef AVDiracSeqHeader AVDiracSeqHeader
typedef DiracVersionInfo DiracVersionInfo
typedef __anon42735e100108 DiracArith
typedef DWTCompose DWTCompose
typedef DWTContext DWTContext
typedef DWTPlane DWTPlane
typedef int DWTELEM
typedef short IDWTELEM
typedef void (*)(uint8_t * b0,uint8_t * b1,int width) vertical_compose_2tap
typedef void (*)(uint8_t * b0,uint8_t * b1,uint8_t * b2,int width) vertical_compose_3tap
typedef void (*)(uint8_t * b0,uint8_t * b1,uint8_t * b2,uint8_t * b3,uint8_t * b4,int width) vertical_compose_5tap
typedef void (*)(uint8_t * dst,uint8_t * b[8],int width) vertical_compose_9tap
typedef DiracParseContext DiracParseContext
typedef DiracParseUnit DiracParseUnit
typedef DiracGolombLUT DiracGolombLUT
typedef uint64_t residual
typedef DiracContext DiracContext
typedef DiracSlice DiracSlice
typedef Plane Plane
typedef SliceCoeffs SliceCoeffs
typedef SubBand SubBand
typedef __anonf538b3200108 DiracFrame
typedef __anonf538b3200208 DiracBlock
typedef __anonf54097c00108 DiracDSPContext
typedef void (*)(uint8_t * block,int stride,int log2_denom,int weight,int h) dirac_weight_func
typedef void (*)(uint8_t * dst,const uint8_t * src,int stride,int log2_denom,int weightd,int weights,int h) dirac_biweight_func
typedef __anonbd2b40530108 DNXHDParserContext
typedef CIDEntry CIDEntry
typedef DNXHDContext DNXHDContext
typedef RowContext RowContext
typedef DNXHDEncContext DNXHDEncContext
typedef RCCMPEntry RCCMPEntry
typedef RCEntry RCEntry
typedef DBEChannel DBEChannel
typedef DBEContext DBEContext
typedef DBEGroup DBEGroup
typedef DPCMContext DPCMContext
typedef DPXParseContext DPXParseContext
typedef DPXContext DPXContext
typedef DSDContext DSDContext
typedef CinAudioContext CinAudioContext
typedef CinVideoBitmapIndex CinVideoBitmapIndex
typedef CinVideoContext CinVideoContext
typedef DssSpContext DssSpContext
typedef DssSpFrame DssSpFrame
typedef DssSpSubframe DssSpSubframe
typedef ArithCoder ArithCoder
typedef DSTContext DSTContext
typedef Table Table
typedef DumpExtradataContext DumpExtradataContext
typedef DVVideoContext DVVideoContext
typedef DVwork_chunk DVwork_chunk
typedef AVDVProfile AVDVProfile
typedef dv_vlc_pair dv_vlc_pair
typedef DVAudioContext DVAudioContext
typedef DVBSubtitleContext DVBSubtitleContext
typedef DVBSubParseContext DVBSubParseContext
typedef DVBSubCLUT DVBSubCLUT
typedef DVBSubContext DVBSubContext
typedef DVBSubDisplayDefinition DVBSubDisplayDefinition
typedef DVBSubObjectDisplay DVBSubObjectDisplay
typedef DVBSubObject DVBSubObject
typedef DVBSubRegionDisplay DVBSubRegionDisplay
typedef DVBSubRegion DVBSubRegion
typedef DVDNavParseContext DVDNavParseContext
typedef BlockInfo BlockInfo
typedef DVDSubParseContext DVDSubParseContext
typedef DVDSubContext DVDSubContext
typedef __anon73a0170f0108 DVDSubtitleContext
typedef EncBlockInfo EncBlockInfo
typedef DxaDecContext DxaDecContext
typedef int (*)(GetBitContext * gb,AVFrame * frame,int line,int height,uint8_t lru[3][8]) decode_slice_func
typedef void (*)(uint8_t lru[3][8]) setup_lru_func
typedef DXVContext DXVContext
typedef OpcodeTable OpcodeTable
typedef dxva_mode dxva_mode
typedef FFDXVASharedContext FFDXVASharedContext
typedef void DECODER_BUFFER_DESC
typedef union:__anon7327e657010a AVDXVAContext
typedef __anonede852990103 EAC3GaqMode
typedef CmvContext CmvContext
typedef MadContext MadContext
typedef TgqContext TgqContext
typedef TgvContext TgvContext
typedef TqiContext TqiContext
typedef cell_s cell
typedef elbg_data elbg_data
typedef ElsDecCtx ElsDecCtx
typedef ElsRungNode ElsRungNode
typedef ElsUnsignedRung ElsUnsignedRung
typedef ERContext ERContext
typedef ERPicture ERPicture
typedef CodeBook CodeBook
typedef Escape124Context Escape124Context
typedef union:MacroBlock MacroBlock
typedef union:SuperBlock SuperBlock
typedef Escape130Context Escape130Context
typedef __anon41eff68d0103 evrc_packet_rate
typedef EVRCAFrame EVRCAFrame
typedef EVRCContext EVRCContext
typedef EXRChannel EXRChannel
typedef EXRContext EXRContext
typedef EXRThreadData EXRThreadData
typedef EXRTileAttribute EXRTileAttribute
typedef HufDec HufDec
typedef ExrDSPContext ExrDSPContext
typedef ExtractExtradataContext ExtractExtradataContext
typedef float FLOAT
typedef float FLOAT
typedef FDCTDSPContext FDCTDSPContext
typedef FFTComplex FFTComplex
typedef FFTContext FFTContext
typedef FFTDComplex FFTDComplex
typedef float FFTDouble
typedef int16_t FFTSample
typedef int32_t FFTSample
typedef int FFTDouble
typedef CosTabsInitOnce CosTabsInitOnce
typedef FFV1Context FFV1Context
typedef PlaneContext PlaneContext
typedef VlcState VlcState
typedef FICContext FICContext
typedef FICThreadContext FICThreadContext
typedef FilterUnitsContext FilterUnitsContext
typedef FITSHeaderState FITSHeaderState
typedef FITSHeader FITSHeader
typedef FITSContext FITSContext
typedef FLACFrameInfo FLACFrameInfo
typedef FLACStreaminfo FLACStreaminfo
typedef FLACHeaderMarker FLACHeaderMarker
typedef FLACParseContext FLACParseContext
typedef FLACContext FLACContext
typedef FLACDSPContext FLACDSPContext
typedef CompressionOptions CompressionOptions
typedef FlacEncodeContext FlacEncodeContext
typedef FlacFrame FlacFrame
typedef FlacSubframe FlacSubframe
typedef RiceContext RiceContext
typedef BlockInfo BlockInfo
typedef FlashSVContext FlashSVContext
typedef Block Block
typedef FlashSV2Context FlashSV2Context
typedef Palette Palette
typedef FlashSVContext FlashSVContext
typedef FlicDecodeContext FlicDecodeContext
typedef FmtConvertContext FmtConvertContext
typedef FMVCContext FMVCContext
typedef InterBlock InterBlock
typedef __anon11212b520108 Task
typedef __anon11212b520208 ThreadContext
typedef FrapsContext FrapsContext
typedef __anonb79f43d50108 FRWUContext
typedef G2MContext G2MContext
typedef JPGContext JPGContext
typedef ePICContext ePICContext
typedef ePICPixHashElem ePICPixHashElem
typedef ePICPixHash ePICPixHash
typedef ePICPixListElem ePICPixListElem
typedef G722Context G722Context
typedef G722DSPContext G722DSPContext
typedef FCBParam FCBParam
typedef G723_1_ChannelContext G723_1_ChannelContext
typedef G723_1_Context G723_1_Context
typedef G723_1_Subframe G723_1_Subframe
typedef HFParam HFParam
typedef PPFParam PPFParam
typedef G723_1ParseContext G723_1ParseContext
typedef Float11 Float11
typedef G726Context G726Context
typedef G726Tables G726Tables
typedef G729ParseContext G729ParseContext
typedef __anon662d9a860103 G729Formats
typedef __anon662d9a860208 G729FormatDescription
typedef __anon662d9a860308 G729ChannelContext
typedef __anon662d9a860408 G729Context
typedef Bits32 Bits32
typedef Bits8 Bits8
typedef GDVContext GDVContext
typedef GetBitContext GetBitContext
typedef GIFContext GIFContext
typedef GIFParseStates gif_states
typedef GIFParseContext GIFParseContext
typedef GifState GifState
typedef GSMParseContext GSMParseContext
typedef GSMContext GSMContext
typedef H261Context H261Context
typedef H263DSPContext H263DSPContext
typedef H2645NAL H2645NAL
typedef H2645Packet H2645Packet
typedef H2645RBSP H2645RBSP
typedef H264LevelDescriptor H264LevelDescriptor
typedef H264MetadataContext H264MetadataContext
typedef H264BSFContext H264BSFContext
typedef H264POCContext H264POCContext
typedef H264PredWeightTable H264PredWeightTable
typedef H264ParseContext H264ParseContext
typedef H264ParamSets H264ParamSets
typedef PPS PPS
typedef SPS SPS
typedef H264RedundantPPSContext H264RedundantPPSContext
typedef __anon0ef7045a0103 H264_SEI_Type
typedef __anon0ef7045a0203 H264_SEI_PicStructType
typedef __anon0ef7045a0303 H264_SEI_FpaType
typedef H264SEIA53Caption H264SEIA53Caption
typedef H264SEIAFD H264SEIAFD
typedef H264SEIAlternativeTransfer H264SEIAlternativeTransfer
typedef H264SEIBufferingPeriod H264SEIBufferingPeriod
typedef H264SEIContext H264SEIContext
typedef H264SEIDisplayOrientation H264SEIDisplayOrientation
typedef H264SEIFramePacking H264SEIFramePacking
typedef H264SEIGreenMetaData H264SEIGreenMetaData
typedef H264SEIPictureTiming H264SEIPictureTiming
typedef H264SEIRecoveryPoint H264SEIRecoveryPoint
typedef H264SEITimeCode H264SEITimeCode
typedef H264SEIUnregistered H264SEIUnregistered
typedef H264ChromaContext H264ChromaContext
typedef void (*)(uint8_t * dst,uint8_t * src,ptrdiff_t srcStride,int h,int x,int y) h264_chroma_mc_func
typedef IMbInfo IMbInfo
typedef PMbInfo PMbInfo
typedef MMCOOpcode MMCOOpcode
typedef H264Context H264Context
typedef H264Picture H264Picture
typedef H264Ref H264Ref
typedef H264SliceContext H264SliceContext
typedef MMCO MMCO
typedef H264DSPContext H264DSPContext
typedef void (*)(uint8_t * block,ptrdiff_t stride,int height,int log2_denom,int weight,int offset) h264_weight_func
typedef void (*)(uint8_t * dst,uint8_t * src,ptrdiff_t stride,int height,int log2_denom,int weightd,int weights,int offset) h264_biweight_func
typedef H264PredContext H264PredContext
typedef H264QpelContext H264QpelContext
typedef H265MetadataContext H265MetadataContext
typedef H265LevelDescriptor H265LevelDescriptor
typedef H265ProfileDescriptor H265ProfileDescriptor
typedef HapChunk HapChunk
typedef HapContext HapContext
typedef HapqaExtractContext HapqaExtractContext
typedef HCOMContext HCOMContext
typedef HEntry HEntry
typedef HEVCBSFContext HEVCBSFContext
typedef HEVCParserContext HEVCParserContext
typedef HEVCPPS HEVCPPS
typedef HEVCParamSets HEVCParamSets
typedef HEVCSPS HEVCSPS
typedef HEVCVPS HEVCVPS
typedef HEVCWindow HEVCWindow
typedef LongTermRPS LongTermRPS
typedef PTLCommon PTLCommon
typedef PTL PTL
typedef ScalingList ScalingList
typedef ShortTermRPS ShortTermRPS
typedef SliceHeader SliceHeader
typedef VUI VUI
typedef __anon7627e73c0103 HEVC_SEI_Type
typedef HEVCSEIA53Caption HEVCSEIA53Caption
typedef HEVCSEIAlternativeTransfer HEVCSEIAlternativeTransfer
typedef HEVCSEIContentLight HEVCSEIContentLight
typedef HEVCSEIDisplayOrientation HEVCSEIDisplayOrientation
typedef HEVCSEIFramePacking HEVCSEIFramePacking
typedef HEVCSEIMasteringDisplay HEVCSEIMasteringDisplay
typedef HEVCSEIPictureHash HEVCSEIPictureHash
typedef HEVCSEIPictureTiming HEVCSEIPictureTiming
typedef HEVCSEI HEVCSEI
typedef CodingUnit CodingUnit
typedef DBParams DBParams
typedef HEVCContext HEVCContext
typedef HEVCFrame HEVCFrame
typedef HEVCLocalContext HEVCLocalContext
typedef MvField MvField
typedef Mv Mv
typedef NeighbourAvailable NeighbourAvailable
typedef PredictionUnit PredictionUnit
typedef RefPicListTab RefPicListTab
typedef RefPicList RefPicList
typedef TransformUnit TransformUnit
typedef HEVCDSPContext HEVCDSPContext
typedef SAOParams SAOParams
typedef HEVCPredContext HEVCPredContext
typedef Hnm4VideoContext Hnm4VideoContext
typedef HpelDSPContext HpelDSPContext
typedef void (*)(uint8_t * block,const uint8_t * pixels,ptrdiff_t line_size,int h) op_pixels_func
typedef HQContext HQContext
typedef HQProfile HQProfile
typedef HQDSPContext HQDSPContext
typedef HQXAC HQXAC
typedef HQXContext HQXContext
typedef HQXLUT HQXLUT
typedef HQXSlice HQXSlice
typedef int (*)(struct HQXContext * ctx,int slice_no,int x,int y) mb_decode_func
typedef HQXDSPContext HQXDSPContext
typedef HeapElem HeapElem
typedef Node Node
typedef int (*)(const void * va,const void * vb) HuffCmp
typedef Predictor Predictor
typedef HYuvContext HYuvContext
typedef HuffYUVDSPContext HuffYUVDSPContext
typedef HuffYUVEncDSPContext HuffYUVEncDSPContext
typedef AVCodecHWConfigInternal AVCodecHWConfigInternal
typedef IdcinContext IdcinContext
typedef hnode hnode
typedef IDCTDSPContext IDCTDSPContext
typedef ScanTable ScanTable
typedef __anon725b00e60103 mask_type
typedef IffContext IffContext
typedef FFIIRFilterCoeffs FFIIRFilterCoeffs
typedef FFIIRFilterState FFIIRFilterState
typedef FFIIRFilterContext FFIIRFilterContext
typedef ILBCContext ILBCContext
typedef ILBCFrame ILBCFrame
typedef IMCChannel IMCChannel
typedef IMCContext IMCContext
typedef IMM4Context IMM4Context
typedef Ir2Context Ir2Context
typedef Cell Cell
typedef Indeo3DecodeContext Indeo3DecodeContext
typedef Plane Plane
typedef vqEntry vqEntry
typedef AVCodecInternal AVCodecInternal
typedef DecodeFilterContext DecodeFilterContext
typedef DecodeSimpleContext DecodeSimpleContext
typedef FramePool FramePool
typedef InterplayACMContext InterplayACMContext
typedef int (*)(InterplayACMContext * s,unsigned ind,unsigned col) filler
typedef IpvideoContext IpvideoContext
typedef IntraX8Context IntraX8Context
typedef IntraX8DSPContext IntraX8DSPContext
typedef void (*)(int16_t * buf,const int16_t * ref_buf,ptrdiff_t pitch,int mc_type) ivi_mc_func
typedef void (*)(int16_t * buf,const int16_t * ref_buf1,const int16_t * ref_buf2,ptrdiff_t pitch,int mc_type,int mc_type2) ivi_mc_avg_func
typedef IVI45DecContext IVI45DecContext
typedef IVIBandDesc IVIBandDesc
typedef IVIHuffDesc IVIHuffDesc
typedef IVIHuffTab IVIHuffTab
typedef IVIMbInfo IVIMbInfo
typedef IVIPicConfig IVIPicConfig
typedef IVIPlaneDesc IVIPlaneDesc
typedef IVITile IVITile
typedef RVMapDesc RVMapDesc
typedef void ()(const int32_t * in,int16_t * out,ptrdiff_t pitch,const uint8_t * flags) InvTransformPtr
typedef void ()(const int32_t * in,int16_t * out,ptrdiff_t pitch,int blk_size) DCTransformPtr
typedef __anon71fb5f4e0108 Jpeg2000Tile
typedef __anon71fb5f4e0208 Jpeg2000EncoderContext
typedef Jpeg2000Band Jpeg2000Band
typedef Jpeg2000Cblk Jpeg2000Cblk
typedef Jpeg2000CodingStyle Jpeg2000CodingStyle
typedef Jpeg2000Component Jpeg2000Component
typedef Jpeg2000Pass Jpeg2000Pass
typedef Jpeg2000Prec Jpeg2000Prec
typedef Jpeg2000QuantStyle Jpeg2000QuantStyle
typedef Jpeg2000ResLevel Jpeg2000ResLevel
typedef Jpeg2000T1Context Jpeg2000T1Context
typedef Jpeg2000TgtNode Jpeg2000TgtNode
typedef Jpeg2000DecoderContext Jpeg2000DecoderContext
typedef Jpeg2000POCEntry Jpeg2000POCEntry
typedef Jpeg2000POC Jpeg2000POC
typedef Jpeg2000TilePart Jpeg2000TilePart
typedef Jpeg2000Tile Jpeg2000Tile
typedef Jpeg2000DSPContext Jpeg2000DSPContext
typedef DWTContext DWTContext
typedef JLSState JLSState
typedef JpeglsContext JpeglsContext
typedef JPEGLSContext JPEGLSContext
typedef int16_t[DCTSIZE2] DCTBLOCK
typedef JvContext JvContext
typedef KgvContext KgvContext
typedef BitBuf BitBuf
typedef KmvcContext KmvcContext
typedef LagarithContext LagarithContext
typedef lag_rac lag_rac
typedef LATMParseContext LATMParseContext
typedef LclDecContext LclDecContext
typedef LclEncContext LclEncContext
typedef AV1DecodeContext AV1DecodeContext
typedef AOMEncoderContext AOMContext
typedef Libaribb24Context Libaribb24Context
typedef __anonf3ac3e780108 LibCodec2Context
typedef Libdav1dContext Libdav1dContext
typedef DAVS2Context DAVS2Context
typedef FDKAACDecContext FDKAACDecContext
typedef AACContext AACContext
typedef LibGSMDecodeContext LibGSMDecodeContext
typedef ILBCDecContext ILBCDecContext
typedef ILBCEncContext ILBCEncContext
typedef LibkvazaarContext LibkvazaarContext
typedef LAMEContext LAMEContext
typedef AMRContext AMRContext
typedef AMRWBContext AMRWBContext
typedef AMR_bitrates AMR_bitrates
typedef SVCContext SVCContext
typedef SVCContext SVCContext
typedef BufferReader BufferReader
typedef LibOpenJPEGContext LibOpenJPEGContext
typedef LibOpenJPEGContext LibOpenJPEGContext
typedef PacketWriter PacketWriter
typedef LibopusEncContext LibopusEncContext
typedef LibopusEncOpts LibopusEncOpts
typedef LibRSVGContext LibRSVGContext
typedef SHINEContext SHINEContext
typedef LibSpeexContext LibSpeexContext
typedef LibSpeexEncContext LibSpeexEncContext
typedef TheoraContext TheoraContext
typedef TWOLAMEContext TWOLAMEContext
typedef AMRWBContext AMRWBContext
typedef OggVorbisDecContext OggVorbisDecContext
typedef LibvorbisEncContext LibvorbisEncContext
typedef VPxDecoderContext VPxContext
typedef VPxEncoderContext VPxContext
typedef LibWavpackContext LibWavpackContext
typedef LibWebPContextCommon LibWebPContext
typedef LibWebPAnimContext LibWebPAnimContext
typedef LibWebPContextCommon LibWebPContextCommon
typedef X264Context X264Context
typedef libx265Context libx265Context
typedef XavsContext XavsContext
typedef XAVS2EContext XAVS2EContext
typedef TeletextContext TeletextContext
typedef TeletextPage TeletextPage
typedef LJpegEncContext LJpegEncContext
typedef LOCOContext LOCOContext
typedef RICEContext RICEContext
typedef LLAudDSPContext LLAudDSPContext
typedef LLVidDSPContext LLVidDSPContext
typedef LLVidEncDSPContext LLVidEncDSPContext
typedef LPCContext LPCContext
typedef double LPC_TYPE_U
typedef double LPC_TYPE
typedef float LPC_TYPE_U
typedef float LPC_TYPE
typedef int LPC_TYPE
typedef unsigned LPC_TYPE_U
typedef void LZWState
typedef Code Code
typedef LZWEncodeState LZWEncodeState
typedef ChannelData ChannelData
typedef MACEContext MACEContext
typedef Prediction Prediction
typedef HuffEntry HuffEntry
typedef MagicYUVContext MagicYUVContext
typedef Slice Slice
typedef Prediction Prediction
typedef HuffEntry HuffEntry
typedef MagicYUVContext MagicYUVContext
typedef PTable PTable
typedef PackageMergerList PackageMergerList
typedef MDCT15Context MDCT15Context
typedef MDECContext MDECContext
typedef MECmpContext MECmpContext
typedef int (*)(struct MpegEncContext * c,uint8_t * blk1,uint8_t * blk2,ptrdiff_t stride,int h) me_cmp_func
typedef AVMediaCodecContext AVMediaCodecContext
typedef MediaCodecBuffer AVMediaCodecBuffer
typedef FFAMediaCodecBufferInfo FFAMediaCodecBufferInfo
typedef FFAMediaCodecCryptoInfo FFAMediaCodecCryptoInfo
typedef FFAMediaCodec FFAMediaCodec
typedef FFAMediaFormat FFAMediaFormat
typedef MediaCodecH264DecContext MediaCodecH264DecContext
typedef MediaCodecBuffer MediaCodecBuffer
typedef MediaCodecDecContext MediaCodecDecContext
typedef MetasoundProps MetasoundProps
typedef MimicContext MimicContext
typedef BandCodingPath BandCodingPath
typedef FFIIRFilterCoeffs FFIIRFilterCoeffs
typedef FFIIRFilterState FFIIRFilterState
typedef void (*)(int16_t * dst,const uint8_t * src,mips_reg src_stride,int rnd,int64_t shift) vc1_mspel_mc_filter_ver_16bits
typedef void (*)(uint8_t * dst,const uint8_t * src,mips_reg stride,int rnd,mips_reg offset) vc1_mspel_mc_filter_8bits
typedef void (*)(uint8_t * dst,mips_reg dst_stride,const int16_t * src,int rnd) vc1_mspel_mc_filter_hor_16bits
typedef MJPEGParserContext MJPEGParserContext
typedef MJpegDecodeContext MJpegDecodeContext
typedef MJpegContext MJpegContext
typedef MJpegHuffmanCode MJpegHuffmanCode
typedef HuffTable HuffTable
typedef MJpegEncHuffmanContext MJpegEncHuffmanContext
typedef PTable PTable
typedef PackageMergerList PackageMergerList
typedef THDChannelModifier THDChannelModifier
typedef ChannelParams ChannelParams
typedef FilterParams FilterParams
typedef __anon72a6d7bf0108 ChannelInformation
typedef MLPParseContext MLPParseContext
typedef MLPHeaderInfo MLPHeaderInfo
typedef MLPDecodeContext MLPDecodeContext
typedef SubStream SubStream
typedef MLPDSPContext MLPDSPContext
typedef BestOffset BestOffset
typedef __anonb31c6cd00108 RestartHeader
typedef __anonb31c6cd00208 MatrixParams
typedef __anonb31c6cd00308 DecodingParams
typedef __anonb31c6cd00408 MLPEncodeContext
typedef __anonb31c6cd00508 PathCounter
typedef MLZDict MLZDict
typedef MLZ MLZ
typedef FFBufferEntry FFBufferEntry
typedef FFBufferRef FFBufferRef
typedef FFPoolRef FFPoolRef
typedef MMALDecodeContext MMALDecodeContext
typedef MmContext MmContext
typedef Minima Minima
typedef MotionEstContext MotionEstContext
typedef HuffCode HuffCode
typedef MotionPixelsContext MotionPixelsContext
typedef YuvPixel YuvPixel
typedef __anonb3913c940108 MovTextDefault
typedef __anonb3913c940208 FontRecord
typedef __anonb3913c940308 StyleBox
typedef __anonb3913c940408 HighlightBox
typedef __anonb3913c940508 HilightcolorBox
typedef __anonb3913c940608 TextWrapBox
typedef __anonb3913c940708 MovTextContext
typedef __anonb3913c940808 Box
typedef __anonb3a8447e0108 StyleBox
typedef __anonb3a8447e0208 HighlightBox
typedef __anonb3a8447e0308 HilightcolorBox
typedef __anonb3a8447e0408 MovTextContext
typedef __anonb3a8447e0508 Box
typedef Band Band
typedef MPCContext MPCContext
typedef Mpeg1Context Mpeg1Context
typedef MPEG2MetadataContext MPEG2MetadataContext
typedef UnpackBFramesBSFContext UnpackBFramesBSFContext
typedef MPEG4AudioConfig MPEG4AudioConfig
typedef Mpeg4DecContext Mpeg4DecContext
typedef float MPA_INT
typedef float OUT_INT
typedef int16_t MPA_INT
typedef int16_t OUT_INT
typedef int32_t MPA_INT
typedef MpegAudioParseContext MpegAudioParseContext
typedef GranuleDef GranuleDef
typedef MP3On4DecodeContext MP3On4DecodeContext
typedef MPADecodeContext MPADecodeContext
typedef MPADecodeHeader MPADecodeHeader
typedef HuffTable HuffTable
typedef MPADSPContext MPADSPContext
typedef MpegAudioContext MpegAudioContext
typedef Picture Picture
typedef ScratchpadContext ScratchpadContext
typedef MpegEncContext MpegEncContext
typedef MpegVideoDSPContext MpegVideoDSPContext
typedef MpegvideoEncDSPContext MpegvideoEncDSPContext
typedef MqcCxState MqcCxState
typedef MqcState MqcState
typedef MSCCContext MSCCContext
typedef MVTable MVTable
typedef MsrleContext MsrleContext
typedef MSS1Context MSS1Context
typedef ArithCoder ArithCoder
typedef MSS12Context MSS12Context
typedef Model Model
typedef PixContext PixContext
typedef SliceContext SliceContext
typedef MSS2Context MSS2Context
typedef MSS2DSPContext MSS2DSPContext
typedef BlockTypeContext BlockTypeContext
typedef DCTBlockCoder DCTBlockCoder
typedef FillBlockCoder FillBlockCoder
typedef HaarBlockCoder HaarBlockCoder
typedef ImageBlockCoder ImageBlockCoder
typedef MSS3Context MSS3Context
typedef Model256 Model256
typedef Model2 Model2
typedef Model Model
typedef RangeCoder RangeCoder
typedef MSS4Context MSS4Context
typedef Msvideo1Context Msvideo1Context
typedef Msvideo1EncContext Msvideo1EncContext
typedef MvcContext MvcContext
typedef MWSCContext MWSCContext
typedef MXpegDecodeContext MXpegDecodeContext
typedef NellyMoserDecodeContext NellyMoserDecodeContext
typedef NellyMoserEncodeContext NellyMoserEncodeContext
typedef NoiseContext NoiseContext
typedef NuvContext NuvContext
typedef NVDECDecoder NVDECDecoder
typedef NVDECFramePool NVDECFramePool
typedef NVDECContext NVDECContext
typedef NVDECFrame NVDECFrame
typedef GUIDTuple GUIDTuple
typedef NvencContext NvencContext
typedef NvencDynLoadFunctions NvencDynLoadFunctions
typedef NvencSurface NvencSurface
typedef void ID3D11Device
typedef OMXCodecContext OMXCodecContext
typedef OMXContext OMXContext
typedef On2AVCContext On2AVCContext
typedef On2AVCMode On2AVCMode
typedef Dummy12Context Dummy12Context
typedef Dummy3Context Dummy3Context
typedef CeltFrame CeltFrame
typedef ChannelMap ChannelMap
typedef OpusContext OpusContext
typedef OpusPacket OpusPacket
typedef OpusStreamContext OpusStreamContext
typedef SilkContext SilkContext
typedef CeltBlock CeltBlock
typedef CeltPVQ CeltPVQ
typedef OpusParseContext OpusParseContext
typedef OpusRangeCoder OpusRangeCoder
typedef RawBitsContext RawBitsContext
typedef SilkFrame SilkFrame
typedef OpusEncContext OpusEncContext
typedef OpusEncOptions OpusEncOptions
typedef OpusPacketInfo OpusPacketInfo
typedef OpusBandExcitation OpusBandExcitation
typedef OpusPsyContext OpusPsyContext
typedef OpusPsyStep OpusPsyStep
typedef PsyChain PsyChain
typedef FFBesselFilter FFBesselFilter
typedef PAFVideoDecContext PAFVideoDecContext
typedef ParseContext ParseContext
typedef PCMDVDContext PCMDVDContext
typedef PCMDVDContext PCMDVDContext
typedef PCMDecode PCMDecode
typedef PGSSubContext PGSSubContext
typedef PGSSubObjectRef PGSSubObjectRef
typedef PGSSubObjects PGSSubObjects
typedef PGSSubObject PGSSubObject
typedef PGSSubPalettes PGSSubPalettes
typedef PGSSubPalette PGSSubPalette
typedef PGSSubPresentation PGSSubPresentation
typedef PicContext PicContext
typedef PixblockDSPContext PixblockDSPContext
typedef PixletContext PixletContext
typedef SubBand SubBand
typedef PNGParseContext PNGParseContext
typedef PNGDecContext PNGDecContext
typedef PNGDSPContext PNGDSPContext
typedef APNGFctlChunk APNGFctlChunk
typedef PNGEncContext PNGEncContext
typedef PNMContext PNMContext
typedef ProresMetadataContext ProresMetadataContext
typedef __anon10d2367d0108 SliceContext
typedef __anon10d2367d0208 ProresContext
typedef ProresDSPContext ProresDSPContext
typedef __anon3f7c6c020108 ProresContext
typedef ProresContext ProresContext
typedef ProresThreadData ProresThreadData
typedef ProSumerContext ProSumerContext
typedef PSDContext PSDContext
typedef FFPsyPreprocessContext FFPsyPreprocessContext
typedef FFPsyBand FFPsyBand
typedef FFPsyChannelGroup FFPsyChannelGroup
typedef FFPsyChannel FFPsyChannel
typedef FFPsyContext FFPsyContext
typedef FFPsyModel FFPsyModel
typedef FFPsyWindowInfo FFPsyWindowInfo
typedef FrameThreadContext FrameThreadContext
typedef PerThreadContext PerThreadContext
typedef SliceThreadContext SliceThreadContext
typedef int ()(AVCodecContext * c) main_func
typedef int ()(AVCodecContext * c,void * arg) action_func
typedef int ()(AVCodecContext * c,void * arg,int jobnr,int threadnr) action_func2
typedef PutBitContext PutBitContext
typedef QCELPBitmap QCELPBitmap
typedef QCELPFrame QCELPFrame
typedef uint16_t[2] qcelp_vector
typedef __anondc9348d20103 qcelp_packet_rate
typedef QCELPContext QCELPContext
typedef FFTCoefficient FFTCoefficient
typedef FFTTone FFTTone
typedef QDM2Complex QDM2Complex
typedef QDM2Context QDM2Context
typedef QDM2FFT QDM2FFT
typedef QDM2SubPNode QDM2SubPNode
typedef QDM2SubPacket QDM2SubPacket
typedef int8_t[2][30][64] sb_int8_array
typedef QDMCContext QDMCContext
typedef QDMCTone QDMCTone
typedef QpegContext QpegContext
typedef QpelDSPContext QpelDSPContext
typedef void (*)(uint8_t * dst,const uint8_t * src,ptrdiff_t stride) qpel_mc_func
typedef AVQSVContext AVQSVContext
typedef QSVFramesContext QSVFramesContext
typedef QSVFrame QSVFrame
typedef QSVMid QSVMid
typedef QSVContext QSVContext
typedef QSVH2645Context QSVH2645Context
typedef QSVOtherContext QSVOtherContext
typedef QSVEncContext QSVEncContext
typedef int SetEncodeCtrlCB (AVCodecContext * avctx,const AVFrame * frame,mfxEncodeCtrl *) enc_ctrl
typedef QSVH264EncContext QSVH264EncContext
typedef QSVHEVCEncContext QSVHEVCEncContext
typedef QSVMJPEGEncContext QSVMJPEGEncContext
typedef QSVMpeg2EncContext QSVMpeg2EncContext
typedef QtrleContext QtrleContext
typedef QtrleEncContext QtrleEncContext
typedef RA144Context RA144Context
typedef RA288Context RA288Context
typedef RALFContext RALFContext
typedef VLCSet VLCSet
typedef RangeCoder RangeCoder
typedef RASCContext RASCContext
typedef Predictor Predictor
typedef RateControlContext RateControlContext
typedef RateControlEntry RateControlEntry
typedef PixelFormatTag PixelFormatTag
typedef RawVideoContext RawVideoContext
typedef RemoveExtradataContext RemoveExtradataContext
typedef __anon1a78fc070108 RKMPPDecoder
typedef __anon1a78fc070208 RKMPPDecodeContext
typedef __anon1a78fc070308 RKMPPFrameContext
typedef RLTable RLTable
typedef Rl2Context Rl2Context
typedef ROQDPCMContext ROQDPCMContext
typedef RoqContext RoqContext
typedef motion_vect motion_vect
typedef roq_cell roq_cell
typedef roq_qcell roq_qcell
typedef CelEvaluation CelEvaluation
typedef CodingSpool CodingSpool
typedef RoqCodebooks RoqCodebooks
typedef RoqTempData RoqTempdata
typedef SubcelEvaluation SubcelEvaluation
typedef RpzaContext RpzaContext
typedef RsccContext RsccContext
typedef Tile Tile
typedef RTJpegContext RTJpegContext
typedef RVDecContext RVDecContext
typedef RV34DecContext RV34DecContext
typedef RV34VLC RV34VLC
typedef SliceInfo SliceInfo
typedef RV34ParseContext RV34ParseContext
typedef RV34DSPContext RV34DSPContext
typedef int (*)(uint8_t * src,ptrdiff_t stride,int beta,int beta2,int edge,int * p1,int * q1) rv40_loop_filter_strength_func
typedef void (*)(int16_t * block) rv34_inv_transform_func
typedef void (*)(uint8_t * dst,ptrdiff_t stride,int dc) rv34_idct_dc_add_func
typedef void (*)(uint8_t * dst,ptrdiff_t stride,int16_t * block) rv34_idct_add_func
typedef void (*)(uint8_t * dst,uint8_t * src1,uint8_t * src2,int w1,int w2,ptrdiff_t stride) rv40_weight_func
typedef void (*)(uint8_t * src,ptrdiff_t stride,int alpha,int lims,int dmode,int chroma) rv40_strong_loop_filter_func
typedef void (*)(uint8_t * src,ptrdiff_t stride,int filter_p1,int filter_q1,int alpha,int beta,int lims,int lim_q1,int lim_p1) rv40_weak_loop_filter_func
typedef S302Context S302Context
typedef S302MEncContext S302MEncContext
typedef __anoncc7372270108 SAMIContext
typedef SANMFrameHeader SANMFrameHeader
typedef SANMVideoContext SANMVideoContext
typedef int (*)(SANMVideoContext * ctx) frm_decoder
typedef SBCParseContext SBCParseContext
typedef SBCDecContext SBCDecContext
typedef sbc_dsp_context SBCDSPContext
typedef SBCEncContext SBCEncContext
typedef AACContext AACContext
typedef AACSBRContext AACSBRContext
typedef SBRData SBRData
typedef SpectralBandReplication SpectralBandReplication
typedef SpectrumParameters SpectrumParameters
typedef SBRDSPContext SBRDSPContext
typedef PixelModel PixelModel
typedef RangeCoder RangeCoder
typedef SCPRContext SCPRContext
typedef FillModel3 FillModel3
typedef MVModel3 MVModel3
typedef OpModel3 OpModel3
typedef PixelModel3 PixelModel3
typedef RunModel3 RunModel3
typedef SxyModel3 SxyModel3
typedef ScreenpressoContext ScreenpressoContext
typedef SgiState SgiState
typedef SgiContext SgiContext
typedef SheerVideoContext SheerVideoContext
typedef ShortenContext ShortenContext
typedef SiprModeParam SiprModeParam
typedef __anond54b94140103 SiprMode
typedef SiprContext SiprContext
typedef SiprParameters SiprParameters
typedef SiprParserContext SiprParserContext
typedef DBCtx DBCtx
typedef HuffContext HuffContext
typedef SmackVContext SmackVContext
typedef SmcContext SmcContext
typedef SMVJpegDecodeContext SMVJpegDecodeContext
typedef BlockNode BlockNode
typedef Plane Plane
typedef SnowContext SnowContext
typedef SubBand SubBand
typedef x_and_coeff x_and_coeff
typedef DWTCompose DWTCompose
typedef SnowDWTContext SnowDWTContext
typedef slice_buffer_s slice_buffer
typedef int DWTELEM
typedef short IDWTELEM
typedef SonicContext SonicContext
typedef SHQContext SHQContext
typedef __anon13d979200108 SRTContext
typedef SUNRASTContext SUNRASTContext
typedef SVQ1Context SVQ1Context
typedef svq1_pmv_s svq1_pmv
typedef SVQ1EncContext SVQ1EncContext
typedef SVQ3Context SVQ3Context
typedef SVQ3Frame SVQ3Frame
typedef SynthFilterContext SynthFilterContext
typedef TAKStreamInfo TAKStreamInfo
typedef TAKParseContext TAKParseContext
typedef MCDParam MCDParam
typedef TAKDecContext TAKDecContext
typedef TAKDSPContext TAKDSPContext
typedef TargaContext TargaContext
typedef TargaContext TargaContext
typedef TDSCContext TDSCContext
typedef Dummy12Context Dummy12Context
typedef Dummy3Context Dummy3Context
typedef __anon5a6091e20108 TextContext
typedef TextureDSPContext TextureDSPContext
typedef ThreadFrame ThreadFrame
typedef SeqVideoContext SeqVideoContext
typedef TiffContext TiffContext
typedef TiffGeoTagKeyName TiffGeoTagKeyName
typedef TiffGeoTagNameType TiffGeoTagNameType
typedef TiffGeoTag TiffGeoTag
typedef TiffEncoderContext TiffEncoderContext
typedef TpelDSPContext TpelDSPContext
typedef void (*)(uint8_t * block,const uint8_t * pixels,int line_size,int w,int h) tpel_mc_func
typedef TraceHeadersContext TraceHeadersContext
typedef AccessUnit AccessUnit
typedef TrueHDCoreContext TrueHDCoreContext
typedef TrueMotion1Context TrueMotion1Context
typedef comp_types comp_types
typedef TM2Codes TM2Codes
typedef TM2Context TM2Context
typedef TM2Huff TM2Huff
typedef TrueMotion2RTContext TrueMotion2RTContext
typedef TSContext TSContext
typedef TsccContext CamtasiaContext
typedef TSCC2Context TSCC2Context
typedef TTAContext TTAContext
typedef TTAChannel TTAChannel
typedef TTAFilter TTAFilter
typedef TTARice TTARice
typedef TTADSPContext TTADSPContext
typedef TTAEncContext TTAEncContext
typedef TTAEncDSPContext TTAEncDSPContext
typedef TwinVQContext TwinVQContext
typedef TwinVQFrameData TwinVQFrameData
typedef TwinVQModeTab TwinVQModeTab
typedef UltimotionDecodeContext UltimotionDecodeContext
typedef HuffEntry HuffEntry
typedef UtvideoContext UtvideoContext
typedef UTVideoDSPContext UTVideoDSPContext
typedef __anon3a3666cb0108 V210DecContext
typedef V210EncContext V210EncContext
typedef V4L2Buffer V4L2Buffer
typedef V4L2Context V4L2Context
typedef V4L2m2mContext V4L2m2mContext
typedef V4L2m2mPriv V4L2m2mPriv
typedef VAAPIDecodeContext VAAPIDecodeContext
typedef VAAPIDecodePicture VAAPIDecodePicture
typedef VAAPIEncodeRTFormat VAAPIEncodeRTFormat
typedef VAAPIEncodeContext VAAPIEncodeContext
typedef VAAPIEncodePicture VAAPIEncodePicture
typedef VAAPIEncodeProfile VAAPIEncodeProfile
typedef VAAPIEncodeSlice VAAPIEncodeSlice
typedef VAAPIEncodeType VAAPIEncodeType
typedef VAAPIEncodeH264Context VAAPIEncodeH264Context
typedef VAAPIEncodeH264Picture VAAPIEncodeH264Picture
typedef VAAPIEncodeH265Context VAAPIEncodeH265Context
typedef VAAPIEncodeH265Picture VAAPIEncodeH265Picture
typedef VAAPIEncodeMJPEGContext VAAPIEncodeMJPEGContext
typedef VAAPIEncodeMPEG2Context VAAPIEncodeMPEG2Context
typedef VAAPIEncodeVP8Context VAAPIEncodeVP8Context
typedef VAAPIEncodeVP9Context VAAPIEncodeVP9Context
typedef VAAPIEncodeVP9Picture VAAPIEncodeVP9Picture
typedef DPB DPB
typedef VAAPIDecodePictureHEVC VAAPIDecodePictureHEVC
typedef VBDecContext VBDecContext
typedef VBLEContext VBLEContext
typedef VC1Context VC1Context
typedef __anonbf76b1670103 VC1ParseSearchState
typedef VC1ParseContext VC1ParseContext
typedef SpriteData SpriteData
typedef VC1DSPContext VC1DSPContext
typedef void (*)(uint8_t * block,const uint8_t * pixels,ptrdiff_t line_size,int h) vc1op_pixels_func
typedef Plane Plane
typedef SliceArgs SliceArgs
typedef SubBand SubBand
typedef TransformArgs TransformArgs
typedef VC2BaseVideoFormat VC2BaseVideoFormat
typedef VC2EncContext VC2EncContext
typedef VC2TransformContext VC2TransformContext
typedef int32_t dwtcoef
typedef VCR1Context VCR1Context
typedef AVVDPAUContext AVVDPAUContext
typedef int (*)(struct AVCodecContext *,struct AVFrame *,const VdpPictureInfo *,uint32_t,const VdpBitstreamBuffer *) AVVDPAU_Render2
typedef VDPAUContext VDPAUContext
typedef VDPAUHWContext VDPAUHWContext
typedef VideoDSPContext VideoDSPContext
typedef VTHWFrame VTHWFrame
typedef AVVideotoolboxContext AVVideotoolboxContext
typedef VTH264Entropy VTH264Entropy
typedef VT_H264Profile VT_H264Profile
typedef VT_HEVCProfile VT_HEVCProfile
typedef BufNode BufNode
typedef ExtraSEI ExtraSEI
typedef VTEncContext VTEncContext
typedef OSStatus (*)(CMFormatDescriptionRef videoDesc,size_t parameterSetIndex,const uint8_t ** parameterSetPointerOut,size_t * parameterSetSizeOut,size_t * parameterSetCountOut,int * NALUnitHeaderLengthOut) getParameterSetAtIndex
typedef RL_VLC_ELEM RL_VLC_ELEM
typedef VLC VLC
typedef VmdAudioContext VmdAudioContext
typedef VmdVideoContext VmdVideoContext
typedef VmncContext VmncContext
typedef vorbis_floor1_entry vorbis_floor1_entry
typedef VorbisParseContext VorbisParseContext
typedef AVVorbisParseContext AVVorbisParseContext
typedef vorbis_codebook vorbis_codebook
typedef vorbis_context_s vorbis_context
typedef vorbis_floor0_s vorbis_floor0
typedef vorbis_floor1_s vorbis_floor1
typedef vorbis_floor vorbis_floor
typedef vorbis_mapping vorbis_mapping
typedef vorbis_mode vorbis_mode
typedef vorbis_residue vorbis_residue
typedef int (*)(struct vorbis_context_s *,vorbis_floor_data *,float *) vorbis_floor_decode_func
typedef union:vorbis_floor_u vorbis_floor_data
typedef VorbisDSPContext VorbisDSPContext
typedef vorbis_enc_codebook vorbis_enc_codebook
typedef vorbis_enc_context vorbis_enc_context
typedef vorbis_enc_floor_class vorbis_enc_floor_class
typedef vorbis_enc_floor vorbis_enc_floor
typedef vorbis_enc_mapping vorbis_enc_mapping
typedef vorbis_enc_mode vorbis_enc_mode
typedef vorbis_enc_residue vorbis_enc_residue
typedef Vp3DecodeContext Vp3DecodeContext
typedef Vp3Fragment Vp3Fragment
typedef VP3DSPContext VP3DSPContext
typedef __anondca85fe70103 VP56Frame
typedef __anondca85fe70203 VP56mb
typedef VP56Macroblock VP56Macroblock
typedef VP56Model VP56Model
typedef VP56RangeCoder VP56RangeCoder
typedef VP56RefDc VP56RefDc
typedef VP56Tree VP56Tree
typedef VP56mv VP56mv
typedef vp56_context VP56Context
typedef int (*)(VP56Context * s) VP56ParseCoeffModels
typedef int (*)(VP56Context * s) VP56ParseCoeff
typedef int (*)(VP56Context * s,const uint8_t * buf,int buf_size) VP56ParseHeader
typedef void (*)(VP56Context * s) VP56DefaultModelsInit
typedef void (*)(VP56Context * s) VP56ParseVectorModels
typedef void (*)(VP56Context * s,VP56mv * vect) VP56ParseVectorAdjustment
typedef void (*)(VP56Context * s,uint8_t * dst,uint8_t * src,int offset1,int offset2,ptrdiff_t stride,VP56mv mv,int mask,int select,int luma) VP56Filter
typedef VP56DSPContext VP56DSPContext
typedef VP8Context VP8Context
typedef VP8FilterStrength VP8FilterStrength
typedef VP8Frame VP8Frame
typedef VP8Macroblock VP8Macroblock
typedef VP8ThreadData VP8ThreadData
typedef VP8intmv VP8intmv
typedef VP8mvbounds VP8mvbounds
typedef VP7MVPred VP7MVPred
typedef VP8DSPContext VP8DSPContext
typedef void (*)(uint8_t * dst,ptrdiff_t dstStride,uint8_t * src,ptrdiff_t srcStride,int h,int x,int y) vp8_mc_func
typedef VP9MetadataContext VP9MetadataContext
typedef VP9RawReorderContext VP9RawReorderContext
typedef VP9RawReorderFrame VP9RawReorderFrame
typedef VP9BSFContext VP9BSFContext
typedef VP9SFSplitContext VP9SFSplitContext
typedef ProbContext ProbContext
typedef VP9Block VP9Block
typedef VP9Context VP9Context
typedef VP9Filter VP9Filter
typedef VP9TileData VP9TileData
typedef VP9DSPContext VP9DSPContext
typedef void (*)(uint8_t * dst,ptrdiff_t dst_stride,const uint8_t * ref,ptrdiff_t ref_stride,int h,int mx,int my) vp9_mc_func
typedef void (*)(uint8_t * dst,ptrdiff_t dst_stride,const uint8_t * ref,ptrdiff_t ref_stride,int h,int mx,int my,int dx,int dy) vp9_scaled_mc_func
typedef VP9BitstreamHeader VP9BitstreamHeader
typedef VP9Frame VP9Frame
typedef VP9SharedContext VP9SharedContext
typedef VP9mvrefPair VP9mvrefPair
typedef VqaContext VqaContext
typedef VTContext VTContext
typedef SavedContext SavedContext
typedef WavpackContext WavpackContext
typedef WavpackFrameContext WavpackFrameContext
typedef Decorr Decorr
typedef WvChannel WvChannel
typedef WavPackEncodeContext WavPackEncodeContext
typedef WavPackExtraInfo WavPackExtraInfo
typedef WavPackWords WavPackWords
typedef WavPackDecorrSpec WavPackDecorrSpec
typedef WCMVContext WCMVContext
typedef HuffReader HuffReader
typedef ImageContext ImageContext
typedef WebPContext WebPContext
typedef void (*)(uint8_t * p,const uint8_t * p_l,const uint8_t * p_tl,const uint8_t * p_t,const uint8_t * p_tr) inv_predict_func
typedef __anoncd9d22e30108 WebVTTContext
typedef CoefVLCTable CoefVLCTable
typedef WMACodecContext WMACodecContext
typedef float WMACoef
typedef WmallChannelCtx WmallChannelCtx
typedef WmallDecodeCtx WmallDecodeCtx
typedef WMAProChannelCtx WMAProChannelCtx
typedef WMAProChannelGrp WMAProChannelGrp
typedef WMAProDecodeCtx WMAProDecodeCtx
typedef XMADecodeCtx XMADecodeCtx
typedef WMAVoiceContext WMAVoiceContext
typedef Wmv2Context Wmv2Context
typedef WMV2DSPContext WMV2DSPContext
typedef WNV1Context WNV1Context
typedef void (*)(int16_t * dst,const uint8_t * src,x86_reg src_stride,int rnd,int64_t shift) vc1_mspel_mc_filter_ver_16bits
typedef void (*)(uint8_t * dst,const uint8_t * src,x86_reg stride,int rnd,x86_reg offset) vc1_mspel_mc_filter_8bits
typedef void (*)(uint8_t * dst,x86_reg dst_stride,const int16_t * src,int rnd) vc1_mspel_mc_filter_hor_16bits
typedef void emu_edge_hfix_func (uint8_t * dst,x86_reg dst_stride,x86_reg start_x,x86_reg) bh
typedef void emu_edge_hvar_func (uint8_t * dst,x86_reg dst_stride,x86_reg start_x,x86_reg n_words,x86_reg) bh
typedef void emu_edge_vfix_func (uint8_t * dst,x86_reg dst_stride,const uint8_t * src,x86_reg src_stride,x86_reg start_y,x86_reg end_y,x86_reg) bh
typedef void emu_edge_vvar_func (uint8_t * dst,x86_reg dst_stride,const uint8_t * src,x86_reg src_stride,x86_reg start_y,x86_reg end_y,x86_reg bh,x86_reg) w
typedef XanContext XanContext
typedef __anonf78b061d0108 BigInt
typedef __anonf78b061d0208 ProbRange
typedef XFaceContext XFaceContext
typedef XFaceContext XFaceContext
typedef __anond6ed666e0108 ProbRangesQueue
typedef XMAParserContext XMAParserContext
typedef ColorEntry ColorEntry
typedef XPMContext XPMDecContext
typedef XanContext XanContext
typedef Node Node
typedef YLCContext YLCContext
typedef YopDecContext YopDecContext
typedef ZeroCodecContext ZeroCodecContext
typedef ZmbvContext ZmbvContext
typedef ZmbvEncContext ZmbvEncContext
typedef AlsaData AlsaData
typedef void (*)(const void *,void *,int) ff_reorder_func
typedef AndroidCameraCtx AndroidCameraCtx
typedef AVDeviceCapabilitiesQuery AVDeviceCapabilitiesQuery
typedef AVDeviceInfoList AVDeviceInfoList
typedef AVDeviceInfo AVDeviceInfo
typedef AVDeviceRect AVDeviceRect
typedef - AVFContext
typedef VideoData VideoData
typedef CACAContext CACAContext
typedef __anon1a848d750103 decklink_direction_t
typedef AVPacketQueue AVPacketQueue
typedef uint32_t buffercount_type
typedef unsigned int buffercount_type
typedef unsigned long buffercount_type
typedef DecklinkPtsSource DecklinkPtsSource
typedef VANCLineNumber VANCLineNumber
typedef libAVEnumMediaTypes libAVEnumMediaTypes
typedef libAVEnumPins libAVEnumPins
typedef libAVFilter libAVFilter
typedef libAVMemInputPin libAVMemInputPin
typedef libAVPin libAVPin
typedef FBDevContext FBDevContext
typedef __anon1d63c27f0108 FBDevContext
typedef DVPacket DVPacket
typedef JackData JackData
typedef KMSGrabContext KMSGrabContext
typedef __anon93b5ea950108 LavfiContext
typedef CDIOContext CDIOContext
typedef dc1394_data dc1394_data
typedef __anonede1895b0108 al_data
typedef __anonede1895b0208 al_format_info
typedef FFOpenGLFunctions FFOpenGLFunctions
typedef OpenGLContext OpenGLContext
typedef OpenGLVertexInfo OpenGLVertexInfo
typedef GLint (APIENTRY *)(GLuint program,const char * name) FF_PFNGLGETATTRIBLOCATIONPROC
typedef GLint (APIENTRY *)(GLuint program,const char * name) FF_PFNGLGETUNIFORMLOCATIONPROC
typedef GLuint (APIENTRY *)(GLenum type) FF_PFNGLCREATESHADERPROC
typedef GLuint (APIENTRY *)(void) FF_PFNGLCREATEPROGRAMPROC
typedef void (APIENTRY *)(GLenum target,GLuint buffer) FF_PFNGLBINDBUFFERPROC
typedef void (APIENTRY *)(GLenum target,ptrdiff_t size,const GLvoid * data,GLenum usage) FF_PFNGLBUFFERDATAPROC
typedef void (APIENTRY *)(GLenum texture) FF_PFNGLACTIVETEXTUREPROC
typedef void (APIENTRY *)(GLint location,GLfloat v0) FF_PFNGLUNIFORM1FPROC
typedef void (APIENTRY *)(GLint location,GLint v0) FF_PFNGLUNIFORM1IPROC
typedef void (APIENTRY *)(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value) FF_PFNGLUNIFORMMATRIX4FVPROC
typedef void (APIENTRY *)(GLsizei n,GLuint * buffers) FF_PFNGLGENBUFFERSPROC
typedef void (APIENTRY *)(GLsizei n,const GLuint * buffers) FF_PFNGLDELETEBUFFERSPROC
typedef void (APIENTRY *)(GLuint index) FF_PFNGLENABLEVERTEXATTRIBARRAYPROC
typedef void (APIENTRY *)(GLuint index,GLint size,GLenum type,GLboolean normalized,GLsizei stride,uintptr_t pointer) FF_PFNGLVERTEXATTRIBPOINTERPROC
typedef void (APIENTRY *)(GLuint program) FF_PFNGLDELETEPROGRAMPROC
typedef void (APIENTRY *)(GLuint program) FF_PFNGLLINKPROGRAMPROC
typedef void (APIENTRY *)(GLuint program) FF_PFNGLUSEPROGRAMPROC
typedef void (APIENTRY *)(GLuint program,GLenum pname,GLint * params) FF_PFNGLGETPROGRAMIVPROC
typedef void (APIENTRY *)(GLuint program,GLsizei bufSize,GLsizei * length,char * infoLog) FF_PFNGLGETPROGRAMINFOLOGPROC
typedef void (APIENTRY *)(GLuint program,GLuint shader) FF_PFNGLATTACHSHADERPROC
typedef void (APIENTRY *)(GLuint shader) FF_PFNGLCOMPILESHADERPROC
typedef void (APIENTRY *)(GLuint shader) FF_PFNGLDELETESHADERPROC
typedef void (APIENTRY *)(GLuint shader,GLenum pname,GLint * params) FF_PFNGLGETSHADERIVPROC
typedef void (APIENTRY *)(GLuint shader,GLsizei bufSize,GLsizei * length,char * infoLog) FF_PFNGLGETSHADERINFOLOGPROC
typedef void (APIENTRY *)(GLuint shader,GLsizei count,const char ** string,const GLint * length) FF_PFNGLSHADERSOURCEPROC
typedef OSSAudioData OSSAudioData
typedef PulseAudioDeviceList PulseAudioDeviceList
typedef PulseData PulseData
typedef PulseData PulseData
typedef __anoncf2c71780108 SDLContext
typedef SndioData SndioData
typedef TimeFilter TimeFilter
typedef __anone2ecfea10108 V4L2Context
typedef XCBGrabContext XCBGrabContext
typedef XVTagFormatMap XVTagFormatMap
typedef __anon2afc78110108 XVContext
typedef EvalContext EvalContext
typedef AudioContrastContext AudioContrastContext
typedef AudioCrossoverContext AudioCrossoverContext
typedef BiquadContext BiquadContext
typedef CrossoverChannel CrossoverChannel
typedef ACrusherContext ACrusherContext
typedef LFOContext LFOContext
typedef SRContext SRContext
typedef AudioDeclickContext AudioDeclickContext
typedef DeclickChannel DeclickChannel
typedef ThreadData ThreadData
typedef AudioDelayContext AudioDelayContext
typedef ChanDelay ChanDelay
typedef ADerivativeContext ADerivativeContext
typedef AudioEchoContext AudioEchoContext
typedef AudioEmphasisContext AudioEmphasisContext
typedef BiquadCoeffs BiquadCoeffs
typedef BiquadD2 BiquadD2
typedef RIAACurve RIAACurve
typedef AudioFadeContext AudioFadeContext
typedef AudioFFTDeNoiseContext AudioFFTDeNoiseContext
typedef DeNoiseChannel DeNoiseChannel
typedef ThreadData ThreadData
typedef AFFTFiltContext AFFTFiltContext
typedef AudioFIRContext AudioFIRContext
typedef AudioFIRDSPContext AudioFIRDSPContext
typedef AudioFIRSegment AudioFIRSegment
typedef AFormatContext AFormatContext
typedef AudioGateContext AudioGateContext
typedef AudioIIRContext AudioIIRContext
typedef BiquadContext BiquadContext
typedef IIRChannel IIRChannel
typedef Pair Pair
typedef ThreadData ThreadData
typedef AudioLimiterContext AudioLimiterContext
typedef AMergeContext AMergeContext
typedef FrameInfo FrameInfo
typedef FrameList FrameList
typedef MixContext MixContext
typedef AudioMultiplyContext AudioMultiplyContext
typedef AudioNEqualizerContext AudioNEqualizerContext
typedef EqualizatorFilter EqualizatorFilter
typedef FoSection FoSection
typedef AudioNLMeansContext AudioNLMeansContext
typedef AudioNLMDNDSPContext AudioNLMDNDSPContext
typedef APadContext APadContext
typedef AudioPhaserContext AudioPhaserContext
typedef AudioPulsatorContext AudioPulsatorContext
typedef SimpleLFO SimpleLFO
typedef AResampleContext AResampleContext
typedef ASNSContext ASNSContext
typedef ASetRateContext ASetRateContext
typedef AShowInfoContext AShowInfoContext
typedef AudioStatsContext AudioStatsContext
typedef ChannelStats ChannelStats
typedef __anon3fcb75e50103 FilterState
typedef ATempoContext ATempoContext
typedef AudioFragment AudioFragment
typedef BiquadsContext BiquadsContext
typedef ChanCache ChanCache
typedef ThreadData ThreadData
typedef Bs2bContext Bs2bContext
typedef void (*)(t_bs2bdp bs2bdp,uint8_t * sample,int n) filter_func
typedef ChannelMapContext ChannelMapContext
typedef ChannelSplitContext ChannelSplitContext
typedef ChorusContext ChorusContext
typedef ChanParam ChanParam
typedef CompandContext CompandContext
typedef CompandSegment CompandSegment
typedef CompensationDelayContext CompensationDelayContext
typedef CrossfeedContext CrossfeedContext
typedef CrystalizerContext CrystalizerContext
typedef DCShiftContext DCShiftContext
typedef ChannelStats ChannelStats
typedef DRMeterContext DRMeterContext
typedef DynamicAudioNormalizerContext DynamicAudioNormalizerContext
typedef cqueue cqueue
typedef EarwaxContext EarwaxContext
typedef ExtraStereoContext ExtraStereoContext
typedef FIREqualizerContext FIREqualizerContext
typedef GainEntry GainEntry
typedef OverlapIndex OverlapIndex
typedef FlangerContext FlangerContext
typedef HaasContext HaasContext
typedef __anonf473c7520103 hdcd_pe
typedef __anonf473c7520203 hdcd_dv
typedef __anonf473c7520303 hdcd_pf
typedef __anonf473c7520403 hdcd_ana_mode
typedef __anonf473c7520503 hdcd_control_result
typedef HDCDContext HDCDContext
typedef hdcd_detection_data hdcd_detection_data
typedef hdcd_state hdcd_state
typedef HeadphoneContext HeadphoneContext
typedef ThreadData ThreadData
typedef ChannelMap ChannelMap
typedef JoinContext JoinContext
typedef LADSPAContext LADSPAContext
typedef LoudNormContext LoudNormContext
typedef LV2Context LV2Context
typedef URITable URITable
typedef CompBand CompBand
typedef CompandSegment CompandSegment
typedef CompandT CompandT
typedef Crossover Crossover
typedef MCompandContext MCompandContext
typedef PrevCrossover[N * 2] PrevCrossover
typedef PanContext PanContext
typedef ReplayGainContext ReplayGainContext
typedef ReplayGainFreqInfo ReplayGainFreqInfo
typedef ResampleContext ResampleContext
typedef RubberBandContext RubberBandContext
typedef SidechainCompressContext SidechainCompressContext
typedef SilenceDetectContext SilenceDetectContext
typedef SilenceRemoveContext SilenceRemoveContext
typedef MySofa MySofa
typedef SOFAlizerContext SOFAlizerContext
typedef ThreadData ThreadData
typedef VirtualSpeaker VirtualSpeaker
typedef StereoToolsContext StereoToolsContext
typedef StereoWidenContext StereoWidenContext
typedef EqParameter EqParameter
typedef SuperEqualizerContext SuperEqualizerContext
typedef AudioSurroundContext AudioSurroundContext
typedef TremoloContext TremoloContext
typedef VibratoContext VibratoContext
typedef VolumeContext VolumeContext
typedef VolDetectContext VolDetectContext
typedef ANoiseSrcContext ANoiseSrcContext
typedef ANullContext ANullContext
typedef FliteContext FliteContext
typedef HilbertContext HilbertContext
typedef SincContext SincContext
typedef SineContext SineContext
typedef AudioBitScopeContext AudioBitScopeContext
typedef AudioHistogramContext AudioHistogramContext
typedef AudioPhaseMeterContext AudioPhaseMeterContext
typedef AudioVectorScopeContext AudioVectorScopeContext
typedef ConcatContext ConcatContext
typedef Coeffs Coeffs
typedef RGBFloat RGBFloat
typedef ShowCQTContext ShowCQTContext
typedef YUVFloat YUVFloat
typedef union:__anon0707b543010a ColorFloat
typedef ShowFreqsContext ShowFreqsContext
typedef ShowSpectrumContext ShowSpectrumContext
typedef ShowVolumeContext ShowVolumeContext
typedef ShowWavesContext ShowWavesContext
typedef AVFilterContext AVFilterContext
typedef AVFilterFormats AVFilterFormats
typedef AVFilterGraphInternal AVFilterGraphInternal
typedef AVFilterGraph AVFilterGraph
typedef AVFilterInOut AVFilterInOut
typedef AVFilterInternal AVFilterInternal
typedef AVFilterLink AVFilterLink
typedef AVFilterPad AVFilterPad
typedef AVFilter AVFilter
typedef int ()(AVFilterContext * ctx,avfilter_action_func * func,void * arg,int * ret,int nb_jobs) avfilter_execute_func
typedef int ()(AVFilterContext * ctx,void * arg,int jobnr,int nb_jobs) avfilter_action_func
typedef FFBoundingBox FFBoundingBox
typedef FilterParams FilterParams
typedef FilterParam FilterParam
typedef BufferSinkContext BufferSinkContext
typedef AVABufferSinkParams AVABufferSinkParams
typedef AVBufferSinkParams AVBufferSinkParams
typedef BufferSourceContext BufferSourceContext
typedef AVBufferSrcParameters AVBufferSrcParameters
typedef BWDIFContext BWDIFContext
typedef ColorSpaceDSPContext ColorSpaceDSPContext
typedef void (*)(int16_t * rgb[3],ptrdiff_t rgb_stride,uint8_t * yuv[3],const ptrdiff_t yuv_stride[3],int w,int h,const int16_t yuv2rgb_coeffs[3][3][8],const int16_t yuv_offset[8]) yuv2rgb_fn
typedef void (*)(uint8_t * yuv[3],const ptrdiff_t yuv_stride[3],int16_t * rgb[3],ptrdiff_t rgb_stride,int w,int h,const int16_t rgb2yuv_coeffs[3][3][8],const int16_t yuv_offset[8]) rgb2yuv_fn
typedef void (*)(uint8_t * yuv[3],const ptrdiff_t yuv_stride[3],int16_t * rgb[3],ptrdiff_t rgb_stride,int w,int h,const int16_t rgb2yuv_coeffs[3][3][8],const int16_t yuv_offset[8],int * rnd[3][2]) rgb2yuv_fsb_fn
typedef void (*)(uint8_t * yuv_out[3],const ptrdiff_t yuv_out_stride[3],uint8_t * yuv_in[3],const ptrdiff_t yuv_in_stride[3],int w,int h,const int16_t yuv2yuv_coeffs[3][3][8],const int16_t yuv_offset[2][8]) yuv2yuv_fn
typedef DeshakeContext DeshakeContext
typedef IntMotionVector IntMotionVector
typedef MotionVector MotionVector
typedef Transform Transform
typedef __anon89df974b0103 DNNLayerType
typedef __anon89df974b0203 DNNActivationFunc
typedef ConvolutionalNetwork ConvolutionalNetwork
typedef ConvolutionalParams ConvolutionalParams
typedef DepthToSpaceParams DepthToSpaceParams
typedef InputParams InputParams
typedef Layer Layer
typedef TFModel TFModel
typedef __anon66ca722e0103 DNNReturnType
typedef __anon66ca722e0203 DNNBackendType
typedef DNNData DNNData
typedef DNNModel DNNModel
typedef DNNModule DNNModule
typedef FFDrawColor FFDrawColor
typedef FFDrawContext FFDrawContext
typedef FFEBUR128State FFEBUR128State
typedef BenchContext BenchContext
typedef CueContext CueContext
typedef DrawGraphContext DrawGraphContext
typedef EBUR128Context EBUR128Context
typedef GraphMonitorContext GraphMonitorContext
typedef InterleaveContext InterleaveContext
typedef LoopContext LoopContext
typedef MetadataContext MetadataContext
typedef PermsContext PermsContext
typedef RealtimeContext RealtimeContext
typedef ReverseContext ReverseContext
typedef SelectContext SelectContext
typedef Command Command
typedef Interval Interval
typedef SendCmdContext SendCmdContext
typedef SideDataContext SideDataContext
typedef StreamSelectContext StreamSelectContext
typedef Command Command
typedef ZMQContext ZMQContext
typedef Buf Buf
typedef FifoContext FifoContext
typedef AVFilterChannelLayouts AVFilterChannelLayouts
typedef FFFramePool FFFramePool
typedef FFFrameBucket FFFrameBucket
typedef FFFrameQueueGlobal FFFrameQueueGlobal
typedef FFFrameQueue FFFrameQueue
typedef FrameRateContext FrameRateContext
typedef void (*)(BLEND_FUNC_PARAMS) blend_func
typedef FFFrameSyncIn FFFrameSyncIn
typedef FFFrameSync FFFrameSync
typedef GradFunContext GradFunContext
typedef FlipContext FlipContext
typedef AVFilterCommand AVFilterCommand
typedef LimiterDSPContext LimiterDSPContext
typedef MaskedMergeContext MaskedMergeContext
typedef AVMotionEstContext AVMotionEstContext
typedef AVMotionEstPredictor AVMotionEstPredictor
typedef OpenCLFilterContext OpenCLFilterContext
typedef PSNRDSPContext PSNRDSPContext
typedef ThreadContext ThreadContext
typedef QSVFrame QSVFrame
typedef QSVVPPContext QSVVPPContext
typedef QSVVPPCrop QSVVPPCrop
typedef QSVVPPParam QSVVPPParam
typedef RemoveGrainContext RemoveGrainContext
typedef void (*)(SCENE_SAD_PARAMS) ff_scene_sad_fn
typedef SetPTSContext SetPTSContext
typedef SetTBContext SetTBContext
typedef Block Block
typedef CoarseSignature CoarseSignature
typedef ElemCat ElemCat
typedef FineSignature FineSignature
typedef MatchingInfo MatchingInfo
typedef Point Point
typedef SignatureContext SignatureContext
typedef StreamContext StreamContext
typedef get_matching_parameters::hspace_elem hspace_elem
typedef SplitContext SplitContext
typedef MovieContext MovieContext
typedef MovieStream MovieStream
typedef SSIMDSPContext SSIMDSPContext
typedef Stereo3DDSPContext Stereo3DDSPContext
typedef ThresholdContext ThresholdContext
typedef TInterlaceContext TInterlaceContext
typedef TrimContext TrimContext
typedef UnsharpContext UnsharpContext
typedef UnsharpFilterParam UnsharpFilterParam
typedef VAAPIVPPContext VAAPIVPPContext
typedef SpectrumSynthContext SpectrumSynthContext
typedef AlphaMergeContext AlphaMergeContext
typedef AmplifyContext AmplifyContext
typedef ThreadData ThreadData
typedef AspectContext AspectContext
typedef ATADenoiseContext ATADenoiseContext
typedef ThreadData ThreadData
typedef AverageBlurContext AverageBlurContext
typedef ThreadData ThreadData
typedef AverageBlurOpenCLContext AverageBlurOpenCLContext
typedef BBoxContext BBoxContext
typedef BPNContext BPNContext
typedef BlackDetectContext BlackDetectContext
typedef BlackFrameContext BlackFrameContext
typedef BlendContext BlendContext
typedef ThreadData ThreadData
typedef BM3DContext BM3DContext
typedef PosCode PosCode
typedef PosPairCode PosPairCode
typedef SliceContext SliceContext
typedef ThreadData ThreadData
typedef BoxBlurContext BoxBlurContext
typedef ThreadData ThreadData
typedef ChromakeyContext ChromakeyContext
typedef ChromaShiftContext ChromaShiftContext
typedef CiescopeContext CiescopeContext
typedef CodecViewContext CodecViewContext
typedef ColorBalanceContext ColorBalanceContext
typedef Range Range
typedef ThreadData ThreadData
typedef ColorChannelMixerContext ColorChannelMixerContext
typedef ThreadData ThreadData
typedef ColorConstancyContext ColorConstancyContext
typedef ThreadData ThreadData
typedef ColorkeyContext ColorkeyContext
typedef ColorLevelsContext ColorLevelsContext
typedef Range Range
typedef ColorMatrixContext ColorMatrixContext
typedef ThreadData ThreadData
typedef ColorSpaceContext ColorSpaceContext
typedef ConvolutionContext ConvolutionContext
typedef ThreadData ThreadData
typedef ConvolutionOpenCLContext ConvolutionOpenCLContext
typedef ConvolveContext ConvolveContext
typedef ThreadData ThreadData
typedef - CoreImageContext
typedef CoverContext CoverContext
typedef CropContext CropContext
typedef CropDetectContext CropDetectContext
typedef CurvesContext CurvesContext
typedef ThreadData ThreadData
typedef DatascopeContext DatascopeContext
typedef OscilloscopeContext OscilloscopeContext
typedef PixelValues PixelValues
typedef PixscopeContext PixscopeContext
typedef ThreadData ThreadData
typedef DCTdnoizContext DCTdnoizContext
typedef ThreadData ThreadData
typedef DebandContext DebandContext
typedef ThreadData ThreadData
typedef DeblockContext DeblockContext
typedef DecimateContext DecimateContext
typedef DedotContext DedotContext
typedef ThreadData ThreadData
typedef DeflickerContext DeflickerContext
typedef QSVDeintContext QSVDeintContext
typedef QSVFrame QSVFrame
typedef DeintVAAPIContext DeintVAAPIContext
typedef DejudderContext DejudderContext
typedef DelogoContext DelogoContext
typedef DespillContext DespillContext
typedef DetelecineContext DetelecineContext
typedef DisplaceContext DisplaceContext
typedef DrawBoxContext DrawBoxContext
typedef DrawTextContext DrawTextContext
typedef double (*)(void *,double a,double b) eval_func2
typedef EdgeDetectContext EdgeDetectContext
typedef ELBGContext ELBGContext
typedef EntropyContext EntropyContext
typedef EQContext EQContext
typedef EQParameters EQParameters
typedef ExtractPlanesContext ExtractPlanesContext
typedef FadeContext FadeContext
typedef FFTdnoizContext FFTdnoizContext
typedef PlaneContext PlaneContext
typedef ThreadData ThreadData
typedef FFTFILTContext FFTFILTContext
typedef FieldContext FieldContext
typedef FieldHintContext FieldHintContext
typedef FieldMatchContext FieldMatchContext
typedef FieldOrderContext FieldOrderContext
typedef Borders Borders
typedef FillBordersContext FillBordersContext
typedef FOCContext FOCContext
typedef FloodfillContext FloodfillContext
typedef Points Points
typedef FormatContext FormatContext
typedef FPSContext FPSContext
typedef FramepackContext FramepackContext
typedef ThreadData ThreadData
typedef NullContext FrameStepContext
typedef FreezeDetectContext FreezeDetectContext
typedef Frei0rContext Frei0rContext
typedef f0r_instance_t (*)(unsigned int width,unsigned int height) f0r_construct_f
typedef int (*)(void) f0r_init_f
typedef void (*)(f0r_instance_t instance) f0r_destruct_f
typedef void (*)(f0r_instance_t instance,double time,const uint32_t * inframe,uint32_t * outframe) f0r_update_f
typedef void (*)(f0r_instance_t instance,double time,const uint32_t * inframe1,const uint32_t * inframe2,const uint32_t * inframe3,uint32_t * outframe) f0r_update2_f
typedef void (*)(f0r_instance_t instance,f0r_param_t param,int param_index) f0r_get_param_value_f
typedef void (*)(f0r_instance_t instance,f0r_param_t param,int param_index) f0r_set_param_value_f
typedef void (*)(f0r_param_info_t * info,int param_index) f0r_get_param_info_f
typedef void (*)(f0r_plugin_info_t * info) f0r_get_plugin_info_f
typedef void (*)(void) f0r_deinit_f
typedef FSPPContext FSPPContext
typedef int32_t int_simd16_t
typedef GBlurContext GBlurContext
typedef ThreadData ThreadData
typedef GEQContext GEQContext
typedef ThreadData ThreadData
typedef ThreadData ThreadData
typedef HisteqContext HisteqContext
typedef HistogramContext HistogramContext
typedef HQDN3DContext HQDN3DContext
typedef HQXContext HQXContext
typedef ThreadData ThreadData
typedef int (*)(AVFilterContext * ctx,void * arg,int jobnr,int nb_jobs) hqxfunc_t
typedef HueContext HueContext
typedef HWDownloadContext HWDownloadContext
typedef HWMapContext HWMapContext
typedef HWUploadContext HWUploadContext
typedef CudaUploadContext CudaUploadContext
typedef HysteresisContext HysteresisContext
typedef __anon84ff91df0103 Type
typedef __anon84ff91df0203 RepeatedField
typedef IDETContext IDETContext
typedef int (*)(const uint8_t * a,const uint8_t * b,const uint8_t * c,int w) ff_idet_filter_func
typedef IlContext IlContext
typedef KerndeintContext KerndeintContext
typedef LenscorrectionCtx LenscorrectionCtx
typedef ThreadData ThreadData
typedef DistortionCorrectionThreadData DistortionCorrectionThreadData
typedef LensfunContext LensfunContext
typedef VignettingThreadData VignettingThreadData
typedef DilateContext DilateContext
typedef OCVContext OCVContext
typedef OCVFilterEntry OCVFilterEntry
typedef SmoothContext SmoothContext
typedef LIBVMAFContext LIBVMAFContext
typedef LimiterContext LimiterContext
typedef ThreadData ThreadData
typedef LumakeyContext LumakeyContext
typedef LutContext LutContext
typedef LUT2Context LUT2Context
typedef LUT1DContext LUT1DContext
typedef LUT3DContext LUT3DContext
typedef ThreadData ThreadData
typedef MaskedClampContext MaskedClampContext
typedef ThreadData ThreadData
typedef ThreadData ThreadData
typedef MaskFunContext MaskFunContext
typedef MCDeintContext MCDeintContext
typedef InputParam InputParam
typedef MergePlanesContext MergePlanesContext
typedef MEContext MEContext
typedef MidEqualizerContext MidEqualizerContext
typedef Block Block
typedef Cluster Cluster
typedef Frame Frame
typedef MIContext MIContext
typedef PixelMVS PixelMVS
typedef PixelRefs PixelRefs
typedef PixelWeights PixelWeights
typedef DenoiseVAAPIContext DenoiseVAAPIContext
typedef SharpnessVAAPIContext SharpnessVAAPIContext
typedef MixContext MixContext
typedef ThreadData ThreadData
typedef DecimateContext DecimateContext
typedef NContext NContext
typedef ThreadData ThreadData
typedef NeighborOpenCLContext NeighborOpenCLContext
typedef NLMeansContext NLMeansContext
typedef NLMeansDSPContext NLMeansDSPContext
typedef FrameData FrameData
typedef NNEDIContext NNEDIContext
typedef ThreadData ThreadData
typedef FilterParams FilterParams
typedef NoiseContext NoiseContext
typedef NormalizeContext NormalizeContext
typedef OCRContext OCRContext
typedef ThreadData ThreadData
typedef OverlayContext OverlayContext
typedef OverlayOpenCLContext OverlayOpenCLContext
typedef QSVOverlayContext QSVOverlayContext
typedef OWDenoiseContext OWDenoiseContext
typedef PadContext PadContext
typedef PaletteGenContext PaletteGenContext
typedef int (*)(const void *,const void *) cmp_func
typedef PaletteUseContext PaletteUseContext
typedef int (*)(const void *,const void *) cmp_func
typedef int (*)(struct PaletteUseContext * s,AVFrame * out,AVFrame * in,int x_start,int y_start,int width,int height) set_frame_func
typedef PerspectiveContext PerspectiveContext
typedef ThreadData ThreadData
typedef PhaseContext PhaseContext
typedef PixdescTestContext PixdescTestContext
typedef PPFilterContext PPFilterContext
typedef PP7Context PP7Context
typedef PreMultiplyContext PreMultiplyContext
typedef ThreadData ThreadData
typedef ProcampVAAPIContext ProcampVAAPIContext
typedef ProgramOpenCLContext ProgramOpenCLContext
typedef PseudoColorContext PseudoColorContext
typedef PSNRContext PSNRContext
typedef PullupBuffer PullupBuffer
typedef PullupContext PullupContext
typedef PullupField PullupField
typedef PullupFrame PullupFrame
typedef QPContext QPContext
typedef RandomContext RandomContext
typedef ReadEIA608Context ReadEIA608Context
typedef ReadVitcContext ReadVitcContext
typedef RemapContext RemapContext
typedef ThreadData ThreadData
typedef ThreadData ThreadData
typedef RemovelogoContext RemovelogoContext
typedef RepeatFieldsContext RepeatFieldsContext
typedef RotContext RotContext
typedef ThreadData ThreadData
typedef FilterParam FilterParam
typedef SabContext SabContext
typedef ScaleContext ScaleContext
typedef CUDAScaleContext CUDAScaleContext
typedef NPPScaleContext NPPScaleContext
typedef NPPScaleStageContext NPPScaleStageContext
typedef QSVScaleContext QSVScaleContext
typedef ScaleVAAPIContext ScaleVAAPIContext
typedef SelectiveColorContext SelectiveColorContext
typedef ThreadData ThreadData
typedef int (*)(AVFilterContext * ctx,void * td,int jobnr,int nb_jobs) selective_color_func_type
typedef int (*)(int r,int g,int b,int min_val,int max_val) get_range_scale_func
typedef SeparateFieldsContext SeparateFieldsContext
typedef SetParamsContext SetParamsContext
typedef ShowInfoContext ShowInfoContext
typedef ShowPaletteContext ShowPaletteContext
typedef ShuffleFramesContext ShuffleFramesContext
typedef ShufflePlanesContext ShufflePlanesContext
typedef SignalstatsContext SignalstatsContext
typedef ThreadDataHueSatMetrics ThreadDataHueSatMetrics
typedef ThreadData ThreadData
typedef FilterParam FilterParam
typedef SmartblurContext SmartblurContext
typedef SPPContext SPPContext
typedef SRContext SRContext
typedef SSIMContext SSIMContext
typedef StackContext StackContext
typedef StackItem StackItem
typedef Stereo3DContext Stereo3DContext
typedef StereoComponent StereoComponent
typedef ThreadData ThreadData
typedef AssContext AssContext
typedef Super2xSaIContext Super2xSaIContext
typedef SwapRectContext SwapRectContext
typedef SwapUVContext SwapUVContext
typedef TelecineContext TelecineContext
typedef ThreadData ThreadData
typedef ThumbContext ThumbContext
typedef ThumbnailCudaContext ThumbnailCudaContext
typedef TileContext TileContext
typedef TonemapContext TonemapContext
typedef TonemapOpenCLContext TonemapOpenCLContext
typedef TPadContext TPadContext
typedef ThreadData ThreadData
typedef TransContext TransContext
typedef TransVtable TransVtable
typedef NPPTransposeContext NPPTransposeContext
typedef NPPTransposeStageContext NPPTransposeStageContext
typedef TransposeOpenCLContext TransposeOpenCLContext
typedef TransposeVAAPIContext TransposeVAAPIContext
typedef UnsharpOpenCLContext UnsharpOpenCLContext
typedef USPPContext USPPContext
typedef VagueDenoiserContext VagueDenoiserContext
typedef VectorscopeContext VectorscopeContext
typedef FlipContext FlipContext
typedef VFRDETContext VFRDETContext
typedef VibranceContext VibranceContext
typedef StabData StabData
typedef TransformContext TransformContext
typedef VignetteContext VignetteContext
typedef VMAFMotionContext VMAFMotionContext
typedef VPPContext VPPContext
typedef ThreadData ThreadData
typedef W3FDIFContext W3FDIFContext
typedef GraticuleLines GraticuleLines
typedef GraticuleLine GraticuleLine
typedef ThreadData ThreadData
typedef WaveformContext WaveformContext
typedef WeaveContext WeaveContext
typedef ThreadData ThreadData
typedef XBRContext XBRContext
typedef int (*)(AVFilterContext * ctx,void * arg,int jobnr,int nb_jobs) xbrfunc_t
typedef ThreadData ThreadData
typedef DeintCUDAContext DeintCUDAContext
typedef ZPcontext ZPContext
typedef ZScaleContext ZScaleContext
typedef VS2AVLogCtx VS2AVLogCtx
typedef VMAFMotionDSPContext VMAFMotionDSPContext
typedef VMAFMotionData VMAFMotionData
typedef CellAutoContext CellAutoContext
typedef LifeContext LifeContext
typedef MBContext MBContext
typedef Point Point
typedef MPTestContext MPTestContext
typedef TestSourceContext TestSourceContext
typedef W3FDIFDSPContext W3FDIFDSPContext
typedef YADIFContext YADIFContext
typedef AudioTrack AudioTrack
typedef FourxmDemuxContext FourxmDemuxContext
typedef AADemuxContext AADemuxContext
typedef __anon8c5533140108 ACTContext
typedef ADTSContext ADTSContext
typedef ADXDemuxerContext ADXDemuxerContext
typedef AFCDemuxContext AFCDemuxContext
typedef AIFFInputContext AIFFInputContext
typedef AIFFOutputContext AIFFOutputContext
typedef __anon8c5aa65c0108 AMRContext
typedef AnmDemuxContext AnmDemuxContext
typedef Page Page
typedef APEContext APEContext
typedef APEFrame APEFrame
typedef APNGDemuxContext APNGDemuxContext
typedef APNGMuxContext APNGMuxContext
typedef AptXDemuxerContext AptXDemuxerContext
typedef __anon8dd6d55c0108 AQTitleContext
typedef ASFDataType ASFDataType
typedef ASFIndex ASFIndex
typedef ASFMainHeader ASFMainHeader
typedef ASFContext ASFContext
typedef ASFPayload ASFPayload
typedef ASFStream ASFStream
typedef ASFContext ASFContext
typedef ASFPacket ASFPacket
typedef ASFStreamData ASFStreamData
typedef ASFStream ASFStream
typedef GUIDParseTable GUIDParseTable
typedef ASFContext ASFContext
typedef ASFPayload ASFPayload
typedef ASFStream ASFStream
typedef ASSContext ASSContext
typedef ASSContext ASSContext
typedef DialogueLine DialogueLine
typedef ASTMuxContext ASTMuxContext
typedef Context Context
typedef RingBuffer RingBuffer
typedef AUContext AUContext
typedef AudioInterleaveContext AudioInterleaveContext
typedef AV1SequenceParameters AV1SequenceParameters
typedef AVChapter AVChapter
typedef AVFormatContext AVFormatContext
typedef AVFormatInternal AVFormatInternal
typedef AVIndexEntry AVIndexEntry
typedef AVInputFormat AVInputFormat
typedef AVOutputFormat AVOutputFormat
typedef AVPacketList AVPacketList
typedef AVProbeData AVProbeData
typedef AVProgram AVProgram
typedef AVStreamInternal AVStreamInternal
typedef AVStream AVStream
typedef int (*)(struct AVFormatContext * s,AVIOContext ** pb,const char * url,int flags,const AVIOInterruptCB * int_cb,AVDictionary ** options) AVOpenCallback
typedef int (*)(struct AVFormatContext * s,int type,void * data,size_t data_size) av_format_control_message
typedef AVIContext AVIContext
typedef AVIStream AVIStream
typedef AVIContext AVIContext
typedef AVIIentry AVIIentry
typedef AVIIndex AVIIndex
typedef AVIStream AVIStream
typedef AVIOContext AVIOContext
typedef AVIODirContext AVIODirContext
typedef AVIODirEntry AVIODirEntry
typedef AVIOInterruptCB AVIOInterruptCB
typedef AVIOInternal AVIOInternal
typedef DynBuffer DynBuffer
typedef AviSynthContext AviSynthContext
typedef AviSynthLibrary AviSynthLibrary
typedef LangEntry LangEntry
typedef avs_block_type AvsBlockType
typedef avs_format AvsFormat
typedef BVID_DemuxContext BVID_DemuxContext
typedef BFIContext BFIContext
typedef BinkDemuxContext BinkDemuxContext
typedef __anon1efbad1a0108 BinDemuxContext
typedef __anon6c69dd6b0108 BlurayContext
typedef BMVContext BMVContext
typedef BRSTMDemuxContext BRSTMDemuxContext
typedef C93BlockRecord C93BlockRecord
typedef C93DemuxContext C93DemuxContext
typedef CacheEntry CacheEntry
typedef Context Context
typedef CafContext CafContext
typedef __anone609395c0108 CAFContext
typedef CDGContext CDGContext
typedef CDXLDemuxContext CDXLDemuxContext
typedef FingerprintFormat FingerprintFormat
typedef ChromaprintMuxContext ChromaprintMuxContext
typedef __anon705df0a70108 CineDemuxContext
typedef __anon1707620c0108 Codec2Context
typedef ConcatMatchMode ConcatMatchMode
typedef ConcatStream ConcatStream
typedef __anon7b9766400108 ConcatFile
typedef __anon7b9766400208 ConcatContext
typedef CRCState CRCState
typedef CryptoContext CryptoContext
typedef __anon1dd742610103 DASHTmplId
typedef DASHContext DASHContext
typedef __anon0ac56c320103 SegmentType
typedef AdaptationSet AdaptationSet
typedef DASHContext DASHContext
typedef OutputStream OutputStream
typedef Segment Segment
typedef __anon276604050108 DataContext
typedef DHAVContext DHAVContext
typedef DHAVStream DHAVStream
typedef __anon3bcc4be50108 DSFContext
typedef CinDemuxContext CinDemuxContext
typedef CinFileHeader CinFileHeader
typedef CinFrameHeader CinFrameHeader
typedef DSSDemuxContext DSSDemuxContext
typedef DTSHDDemuxContext DTSHDDemuxContext
typedef RawDVContext RawDVContext
typedef DVDemuxContext DVDemuxContext
typedef DVMuxContext DVMuxContext
typedef DXAContext DXAContext
typedef CdataDemuxContext CdataDemuxContext
typedef EaDemuxContext EaDemuxContext
typedef VideoProperties VideoProperties
typedef FifoMessageType FifoMessageType
typedef FifoContext FifoContext
typedef FifoMessage FifoMessage
typedef FifoThreadContext FifoThreadContext
typedef FailingMuxerContext FailingMuxerContext
typedef FailingMuxerPacketData FailingMuxerPacketData
typedef FileContext FileContext
typedef FilmstripDemuxContext FilmstripDemuxContext
typedef FilmstripMuxContext FilmstripMuxContext
typedef FITSContext FITSContext
typedef FITSContext FITSContext
typedef FLACDecContext FLACDecContext
typedef FlacMuxerContext FlacMuxerContext
typedef FlicDemuxContext FlicDemuxContext
typedef __anon8cb4a5890903 AMFDataType
typedef FLVContext FLVContext
typedef __anon1ee1de5a0103 FLVFlags
typedef FLVContext FLVContext
typedef FLVFileposition FLVFileposition
typedef FLVStreamContext FLVStreamContext
typedef __anond7a9d54d0108 FrmContext
typedef __anon8cb8ef060103 FTPState
typedef __anon8cb8ef060203 FTPListingMethod
typedef __anon8cb8ef060308 FTPContext
typedef G726Context G726Context
typedef G729DemuxerContext G729DemuxerContext
typedef GDVContext GDVContext
typedef GENHDemuxContext GENHDemuxContext
typedef GIFContext GIFContext
typedef GIFDemuxContext GIFDemuxContext
typedef GopherContext GopherContext
typedef GSMDemuxerContext GSMDemuxerContext
typedef __anon8ccd0e860103 GXFPktType
typedef __anon8ccd0e860203 GXFMatTag
typedef __anon8ccd0e860303 GXFTrackTag
typedef GXFContext GXFContext
typedef GXFStreamContext GXFStreamContext
typedef GXFTimecode GXFTimecode
typedef Fragment Fragment
typedef HDSContext HDSContext
typedef OutputStream OutputStream
typedef HEVCDecoderConfigurationRecord HEVCDecoderConfigurationRecord
typedef HVCCNALUnitArray HVCCNALUnitArray
typedef HVCCProfileTierLevel HVCCProfileTierLevel
typedef HLSContext HLSContext
typedef HLSFlags HLSFlags
typedef __anonf0660e390103 StartSequenceSourceType
typedef __anonf0660e390203 CodecAttributeStatus
typedef __anonf0660e390303 SegmentType
typedef ClosedCaptionsStream ClosedCaptionsStream
typedef HLSContext HLSContext
typedef HLSSegment HLSSegment
typedef VariantStream VariantStream
typedef __anon6247d4fa0103 PlaylistType
typedef HLSContext HLSContext
typedef Hnm4DemuxContext Hnm4DemuxContext
typedef __anon288464dc0103 HandshakeState
typedef HTTPContext HTTPContext
typedef HTTPAuthType HTTPAuthType
typedef DigestParams DigestParams
typedef HTTPAuthState HTTPAuthState
typedef IcecastContext IcecastContext
typedef __anon1e7015e30108 IcoImage
typedef __anon1e7015e30208 IcoDemuxContext
typedef __anon1e871dcd0108 IcoImage
typedef __anon1e871dcd0208 IcoMuxContext
typedef ID3v2EMFunc ID3v2EMFunc
typedef ID3v2EncContext ID3v2EncContext
typedef ID3v2ExtraMetaAPIC ID3v2ExtraMetaAPIC
typedef ID3v2ExtraMetaCHAP ID3v2ExtraMetaCHAP
typedef ID3v2ExtraMetaGEOB ID3v2ExtraMetaGEOB
typedef ID3v2ExtraMetaPRIV ID3v2ExtraMetaPRIV
typedef ID3v2ExtraMeta ID3v2ExtraMeta
typedef IdcinDemuxContext IdcinDemuxContext
typedef RoqDemuxContext RoqDemuxContext
typedef __anon8ce760b10103 svx8_compression_type
typedef IffDemuxContext IffDemuxContext
typedef __anon8ce760b10208 DSDLayoutDesc
typedef IdStrMap IdStrMap
typedef VideoDemuxData VideoDemuxData
typedef VideoMuxData VideoMuxData
typedef AVCodecTag AVCodecTag
typedef CodecMime CodecMime
typedef FFFrac FFFrac
typedef void (*)(void * context,const char * key,int key_len,char ** dest,int * dest_len) ff_parse_key_val_cb
typedef IPSourceFilters IPSourceFilters
typedef IPMVEContext IPMVEContext
typedef MovChannelLayout MovChannelLayout
typedef MOVAtom MOVAtom
typedef MOVContext MOVContext
typedef MOVDref MOVDref
typedef MOVElst MOVElst
typedef MOVEncryptionIndex MOVEncryptionIndex
typedef MOVFragmentIndexItem MOVFragmentIndexItem
typedef MOVFragmentIndex MOVFragmentIndex
typedef MOVFragmentStreamInfo MOVFragmentStreamInfo
typedef MOVFragment MOVFragment
typedef MOVIndexRange MOVIndexRange
typedef MOVSbgp MOVSbgp
typedef MOVStreamContext MOVStreamContext
typedef MOVStsc MOVStsc
typedef MOVStts MOVStts
typedef MOVTrackExt MOVTrackExt
typedef IssDemuxContext IssDemuxContext
typedef IVFEncContext IVFEncContext
typedef __anon285ba08f0108 JACOsubContext
typedef JVDemuxContext JVDemuxContext
typedef JVFrame JVFrame
typedef LATMContext LATMContext
typedef GMEContext GMEContext
typedef ModPlugContext ModPlugContext
typedef OpenMPTContext OpenMPTContext
typedef LibRTMPContext LibRTMPContext
typedef __anon23f262b40108 LIBSMBContext
typedef SRTContext SRTContext
typedef __anon93d723010108 LIBSSHContext
typedef LRCContext LRCContext
typedef LXFDemuxContext LXFDemuxContext
typedef __anon8d8d87630103 MatroskaTrackType
typedef __anon8d8d87630203 MatroskaTrackEncodingCompAlgo
typedef __anon8d8d87630303 MatroskaVideoInterlaceFlag
typedef __anon8d8d87630403 MatroskaVideoFieldOrder
typedef __anon8d8d87630503 MatroskaVideoStereoModeType
typedef __anon8d8d87630603 MatroskaVideoDisplayUnit
typedef __anon8d8d87630703 MatroskaColourChromaSitingHorz
typedef __anon8d8d87630803 MatroskaColourChromaSitingVert
typedef __anon8d8d87630903 MatroskaVideoProjectionType
typedef CodecTags CodecTags
typedef __anon0c7ba20a0103 EbmlType
typedef EbmlBin EbmlBin
typedef EbmlList EbmlList
typedef Ebml Ebml
typedef MatroskaAttachment MatroskaAttachment
typedef MatroskaBlock MatroskaBlock
typedef MatroskaChapter MatroskaChapter
typedef MatroskaCluster MatroskaCluster
typedef MatroskaDemuxContext MatroskaDemuxContext
typedef MatroskaIndexPos MatroskaIndexPos
typedef MatroskaIndex MatroskaIndex
typedef MatroskaLevel1Element MatroskaLevel1Element
typedef MatroskaLevel MatroskaLevel
typedef MatroskaMasteringMeta MatroskaMasteringMeta
typedef MatroskaSeekhead MatroskaSeekhead
typedef MatroskaTagTarget MatroskaTagTarget
typedef MatroskaTags MatroskaTags
typedef MatroskaTag MatroskaTag
typedef MatroskaTrackAudio MatroskaTrackAudio
typedef MatroskaTrackCompression MatroskaTrackCompression
typedef MatroskaTrackEncoding MatroskaTrackEncoding
typedef MatroskaTrackEncryption MatroskaTrackEncryption
typedef MatroskaTrackOperation MatroskaTrackOperation
typedef MatroskaTrackPlane MatroskaTrackPlane
typedef MatroskaTrackVideoColor MatroskaTrackVideoColor
typedef MatroskaTrackVideoProjection MatroskaTrackVideoProjection
typedef MatroskaTrackVideo MatroskaTrackVideo
typedef MatroskaTrack MatroskaTrack
typedef __anon0c7ba20a0308 CueDesc
typedef const struct EbmlSyntax EbmlSyntax
typedef MatroskaMuxContext MatroskaMuxContext
typedef ebml_master ebml_master
typedef mkv_attachments mkv_attachments
typedef mkv_attachment mkv_attachment
typedef mkv_cuepoint mkv_cuepoint
typedef mkv_cues mkv_cues
typedef mkv_seekhead_entry mkv_seekhead_entry
typedef mkv_seekhead mkv_seekhead
typedef mkv_track mkv_track
typedef AVMetadataConv AVMetadataConv
typedef __anon36d320c00108 MicroDVDContext
typedef __anon9497a8970108 MlvContext
typedef MmDemuxContext MmDemuxContext
typedef MMFContext MMFContext
typedef MMSContext MMSContext
typedef MMSStream MMSStream
typedef __anon33aed6110103 ChunkType
typedef MMSHContext MMSHContext
typedef __anon33af091d0103 MMSCSPacketType
typedef __anon33af091d0203 MMSSCPacketType
typedef MMSTContext MMSTContext
typedef MOVParseTableEntry MOVParseTableEntry
typedef __anon7b9d66c90203 MOVEncryptionScheme
typedef __anon7b9d66c90303 MOVPrftBox
typedef HintSampleQueue HintSampleQueue
typedef HintSample HintSample
typedef MOVFragmentInfo MOVFragmentInfo
typedef MOVIentry MOVIentry
typedef MOVMuxContext MOVMuxContext
typedef MOVTrack MOVTrack
typedef __anonc1bec0420108 MOVMuxCencContext
typedef __anon2c36f9780108 MP3DecContext
typedef MP3Context MP3Context
typedef MPCContext MPCContext
typedef MPCFrame MPCFrame
typedef MPCContext MPCContext
typedef MpegDemuxContext MpegDemuxContext
typedef MpegMuxContext MpegMuxContext
typedef PacketDesc PacketDesc
typedef StreamInfo StreamInfo
typedef MP4DescrParseContext MP4DescrParseContext
typedef MpegTSFilter MpegTSFilter
typedef MpegTSPESFilter MpegTSPESFilter
typedef MpegTSSectionFilter MpegTSSectionFilter
typedef PESContext PESContext
typedef SectionHeader SectionHeader
typedef StreamType StreamType
typedef int PESCallback (MpegTSFilter * f,const uint8_t * buf,int len,int is_start,int64_t) pos
typedef void SectionCallback (MpegTSFilter * f,const uint8_t * buf,int) len
typedef void SetServiceCallback (void * opaque,int) ret
typedef Mp4Descr Mp4Descr
typedef MpegTSContext MpegTSContext
typedef SLConfigDescr SLConfigDescr
typedef MpegTSSection MpegTSSection
typedef MpegTSService MpegTSService
typedef MpegTSWriteStream MpegTSWriteStream
typedef MpegTSWrite MpegTSWrite
typedef MPJPEGContext MPJPEGContext
typedef MPJPEGDemuxContext MPJPEGDemuxContext
typedef __anon621b9b430108 MPL2Context
typedef __anon3c1f464f0108 MPSubContext
typedef MTVDemuxContext MTVDemuxContext
typedef MvContext MvContext
typedef MviDemuxContext MviDemuxContext
typedef __anon8d39a18c0103 MXFWrappingIndicatorType
typedef KLVPacket KLVPacket
typedef MXFCodecUL MXFCodecUL
typedef __anon8d39a18c0208 MXFSamplesPerFrame
typedef uint8_t[16] UID
typedef __anon0afff7930103 MXFPartitionType
typedef __anon0afff7930203 MXFOP
typedef __anon0afff7930303 MXFWrappingScheme
typedef MXFContext MXFContext
typedef MXFCryptoContext MXFCryptoContext
typedef MXFDescriptor MXFDescriptor
typedef MXFEssenceContainerData MXFEssenceContainerData
typedef MXFIndexTableSegment MXFIndexTableSegment
typedef MXFIndexTable MXFIndexTable
typedef MXFMetadataReadTableEntry MXFMetadataReadTableEntry
typedef MXFMetadataSet MXFMetadataSet
typedef MXFPackage MXFPackage
typedef MXFPartition MXFPartition
typedef MXFSequence MXFSequence
typedef MXFStructuralComponent MXFStructuralComponent
typedef MXFTrack MXFTimecodeComponent
typedef __anon0afff7930408 MXFPulldownComponent
typedef __anon0afff7930508 MXFEssenceGroup
typedef __anon0afff7930608 MXFTaggedValue
typedef __anon0afff7930708 MXFTrack
typedef int MXFMetadataReadFunc (void * arg,AVIOContext * pb,int tag,int size,UID uid,int64_t) klv_offset
typedef MXFContainerEssenceEntry MXFContainerEssenceEntry
typedef MXFContext MXFContext
typedef MXFIndexEntry MXFIndexEntry
typedef MXFLocalTagPair MXFLocalTagPair
typedef MXFPackage MXFPackage
typedef MXFStreamContext MXFStreamContext
typedef MXGContext MXGContext
typedef union:sockaddr_union sockaddr_union
typedef NSVContext NSVContext
typedef NSVStream NSVStream
typedef __anon8d4a50780103 Flag
typedef ChapterContext ChapterContext
typedef Dispositions Dispositions
typedef FrameCode FrameCode
typedef NUTContext NUTContext
typedef StreamContext StreamContext
typedef Syncpoint Syncpoint
typedef __anon8d4a58f50103 nuv_frametype
typedef NUVContext NUVContext
typedef OGGContext OGGContext
typedef OGGPageList OGGPageList
typedef OGGPage OGGPage
typedef OGGStreamContext OGGStreamContext
typedef DaalaInfoHeader DaalaInfoHeader
typedef TheoraParams TheoraParams
typedef OMAContext OMAContext
typedef int socklen_t
typedef unsigned long nfds_t
typedef PAFDemuxContext PAFDemuxContext
typedef PCMAudioDemuxerContext PCMAudioDemuxerContext
typedef __anonb86933d50108 PJSContext
typedef __anon985870350108 PMPContext
typedef PrompegContext PrompegContext
typedef PrompegFec PrompegFec
typedef StrChannel StrChannel
typedef StrDemuxContext StrDemuxContext
typedef PVAContext PVAContext
typedef QCPContext QCPContext
typedef Atom Atom
typedef R3DContext R3DContext
typedef FFRawVideoDemuxerContext FFRawVideoDemuxerContext
typedef RawVideoDemuxerContext RawVideoDemuxerContext
typedef RDTDemuxContext RDTDemuxContext
typedef __anoncedf16f10108 RealTextContext
typedef RedSparkContext RedSparkContext
typedef AVCodecGuid AVCodecGuid
typedef uint8_t[16] ff_asf_guid
typedef Rl2DemuxContext Rl2DemuxContext
typedef RMStream RMStream
typedef RMDemuxContext RMDemuxContext
typedef RMMuxContext RMMuxContext
typedef StreamInfo StreamInfo
typedef RPLContext RPLContext
typedef RTMPEContext RTMPEContext
typedef FF_DH FF_DH
typedef BIGNUM * FFBigNum
typedef gcry_mpi_t FFBigNum
typedef mbedtls_mpi * FFBigNum
typedef mpz_ptr FFBigNum
typedef RTMP_HTTPContext RTMP_HTTPContext
typedef RTMPPacketType RTMPPacketType
typedef RTMPPacket RTMPPacket
typedef __anon69e4f1730103 ClientState
typedef RTMPContext RTMPContext
typedef TrackedMethod TrackedMethod
typedef PayloadContext PayloadContext
typedef RTPDemuxContext RTPDemuxContext
typedef RTPDynamicProtocolHandler RTPDynamicProtocolHandler
typedef RTPPacket RTPPacket
typedef RTPStatistics RTPStatistics
typedef int (*)(AVFormatContext * ctx,PayloadContext * s,AVStream * st,AVPacket * pkt,uint32_t * timestamp,const uint8_t * buf,int len,uint16_t seq,int flags) DynamicPayloadPacketHandlerProc
typedef AttrNameMap AttrNameMap
typedef InterleavePacket InterleavePacket
typedef RTPMuxContext RTPMuxContext
typedef RTPContext RTPContext
typedef SDPParseState SDPParseState
typedef RTSPMessageHeader RTSPMessageHeader
typedef RTSPSource RTSPSource
typedef RTSPState RTSPState
typedef RTSPStream RTSPStream
typedef RTSPTransportField RTSPTransportField
typedef __anon1270bf720108 SAMIContext
typedef SCCContext SCCContext
typedef SCCContext SCCContext
typedef SCTPContext SCTPContext
typedef SDSContext SDSContext
typedef FilmDemuxContext FilmDemuxContext
typedef film_sample film_sample
typedef FILMOutputContext FILMOutputContext
typedef FILMPacket FILMPacket
typedef __anonff06992f0103 ListType
typedef SegmentContext SegmentContext
typedef SegmentListEntry SegmentListEntry
typedef SERDemuxerContext SERDemuxerContext
typedef VmdDemuxContext VmdDemuxContext
typedef vmd_frame vmd_frame
typedef SIFFContext SIFFContext
typedef SmackerContext SmackerContext
typedef SmackerFrame SmackerFrame
typedef SMJPEGContext SMJPEGContext
typedef SMJPEGMuxContext SMJPEGMuxContext
typedef Fragment Fragment
typedef OutputStream OutputStream
typedef SmoothStreamingContext SmoothStreamingContext
typedef SMUSHContext SMUSHContext
typedef SoXContext SoXContext
typedef IEC61937Context IEC61937Context
typedef __anone755c1210108 SRTContext
typedef SRTContext SRTContext
typedef SRTPProtoContext SRTPProtoContext
typedef __anon6ea0f59b0108 STLContext
typedef SubfileContext SubfileContext
typedef __anon8c8ee6200108 FFTextReader
typedef __anon8c8ee6200208 FFDemuxSubtitlesQueue
typedef __anon486bf3d50108 SubViewer1Context
typedef __anonc7bdac240108 SubViewerContext
typedef SWFContext SWFContext
typedef TAKDemuxContext TAKDemuxContext
typedef TCPContext TCPContext
typedef __anon6f169e660108 TEDCaptionsDemuxer
typedef __anon8daddd9a0103 SlaveFailurePolicy
typedef TeeContext TeeContext
typedef __anon8daddd9a0208 TeeSlave
typedef ChildContext ChildContext
typedef TeeContext TeeContext
typedef FailingMuxerPacketData FailingMuxerPacketData
typedef TestCase TestCase
typedef ThpDemuxContext ThpDemuxContext
typedef SeqDemuxContext SeqDemuxContext
typedef TiertexSeqFrameBuffer TiertexSeqFrameBuffer
typedef TLSShared TLSShared
typedef TLSContext TLSContext
typedef TLSContext TLSContext
typedef TLSContext TLSContext
typedef TLSContext TLSContext
typedef TLSContext TLSContext
typedef TLSContext TLSContext
typedef TMVContext TMVContext
typedef TTAContext TTAContext
typedef TTAMuxContext TTAMuxContext
typedef TtyDemuxContext TtyDemuxContext
typedef __anonc63be0890103 TiVo_type
typedef __anonc63be0890203 TiVo_series
typedef __anonc63be0890303 TiVo_audio
typedef TYDemuxContext TYDemuxContext
typedef TyRecHdr TyRecHdr
typedef TySeqTable TySeqTable
typedef UDPContext UDPContext
typedef UnixContext UnixContext
typedef URLContext URLContext
typedef URLProtocol URLProtocol
typedef V210DemuxerContext V210DemuxerContext
typedef VSContext VSContext
typedef RCVContext RCVContext
typedef VIV_AudioSubpacket VIV_AudioSubpacket
typedef VIV_SB_block VIV_SB_block
typedef VIV_SB_entry VIV_SB_entry
typedef VividasDemuxContext VividasDemuxContext
typedef VivoContext VivoContext
typedef voc_type VocType
typedef voc_dec_context VocDecContext
typedef voc_enc_context VocEncContext
typedef VPCC VPCC
typedef VPKDemuxContext VPKDemuxContext
typedef __anone8fd474b0108 VPlayerContext
typedef VqfContext VqfContext
typedef WAVDemuxContext WAVDemuxContext
typedef __anon808065000103 PeakType
typedef __anon808065000203 PeakFormat
typedef WAVMuxContext WAVMuxContext
typedef Wc3DemuxContext Wc3DemuxContext
typedef WebMChunkContext WebMChunkContext
typedef AdaptationSet AdaptationSet
typedef WebMDashMuxContext WebMDashMuxContext
typedef WebpContext WebpContext
typedef __anon880be7040108 WebVTTContext
typedef WsVqaDemuxContext WsVqaDemuxContext
typedef WtvContext WtvContext
typedef WtvFile WtvFile
typedef WtvStream WtvStream
typedef __anon3712e7530108 WtvFile
typedef __anon3712e7530208 WtvChunkEntry
typedef __anon3712e7530308 WtvSyncEntry
typedef __anon3712e7530408 WtvContext
typedef __anon3712e7530508 WTVRootEntryTable
typedef int WTVHeaderWriteFunc (AVIOContext *) pb
typedef WvHeader WvHeader
typedef WVContext WVContext
typedef WvMuxContext WvMuxContext
typedef MaxisXADemuxContext MaxisXADemuxContext
typedef XMVAudioPacket XMVAudioPacket
typedef XMVDemuxContext XMVDemuxContext
typedef XMVVideoPacket XMVVideoPacket
typedef XWMAContext XWMAContext
typedef yop_dec_context YopDecContext
typedef void ()(uint8_t * out,const uint8_t * in,int len) conv_func_flat
typedef void ()(uint8_t * out,uint8_t * const * in,int len,int channels) conv_func_interleave
typedef void ()(uint8_t ** out,const uint8_t * in,int len,int channels) conv_func_deinterleave
typedef void ()(uint8_t ** src,void ** matrix,int len,int out_ch,int in_ch) mix_func
typedef AVAudioResampleContext AVAudioResampleContext
typedef DitherState DitherState
typedef DitherContext DitherContext
typedef DitherDSPContext DitherDSPContext
typedef AudioConvert AudioConvert
typedef AudioData AudioData
typedef AudioMix AudioMix
typedef ChannelMapInfo ChannelMapInfo
typedef ResampleContext ResampleContext
typedef AVAESCTR AVAESCTR
typedef AVAES AVAES
typedef union:__anonfe47cc0b010a av_aes_block
typedef AVAudioFifo AVAudioFifo
typedef FFFILE FFFILE
typedef AVBlowfish AVBlowfish
typedef AVBufferPool AVBufferPool
typedef AVBufferRef AVBufferRef
typedef AVBuffer AVBuffer
typedef BufferPoolEntry BufferPoolEntry
typedef AVCAMELLIA AVCAMELLIA
typedef AVCAST5 AVCAST5
typedef double (*)(double) avpriv_trc_function
typedef __anona69e4c4e0103 AVCRCId
typedef uint32_t AVCRC
typedef AVDES AVDES
typedef AVDictionaryEntry AVDictionaryEntry
typedef AVDictionary AVDictionary
typedef AVDownmixInfo AVDownmixInfo
typedef AVEncryptionInfo AVEncryptionInfo
typedef AVEncryptionInitInfo AVEncryptionInitInfo
typedef AVSubsampleEncryptionInfo AVSubsampleEncryptionInfo
typedef Parser Parser
typedef AVExpr AVExpr
typedef AVFifoBuffer AVFifoBuffer
typedef FileLogContext FileLogContext
typedef FileLogContext FileLogContext
typedef AVFixedDSPContext AVFixedDSPContext
typedef AVFloatDSPContext AVFloatDSPContext
typedef AVFrameSideData AVFrameSideData
typedef AVFrame AVFrame
typedef AVRegionOfInterest AVRegionOfInterest
typedef AVHashContext AVHashContext
typedef AVDynamicHDRPlus AVDynamicHDRPlus
typedef AVHDRPlusColorTransformParams AVHDRPlusColorTransformParams
typedef AVHDRPlusPercentile AVHDRPlusPercentile
typedef void (*)(void * ctx) hmac_init
typedef void (*)(void * ctx,const uint8_t * src,int len) hmac_update
typedef void (*)(void * ctx,const uint8_t * src,size_t len) hmac_update
typedef void (*)(void * ctx,uint8_t * dst) hmac_final
typedef AVHMAC AVHMAC
typedef AVHWDeviceContext AVHWDeviceContext
typedef AVHWDeviceInternal AVHWDeviceInternal
typedef AVHWFramesConstraints AVHWFramesConstraints
typedef AVHWFramesContext AVHWFramesContext
typedef AVHWFramesInternal AVHWFramesInternal
typedef CUDAFramesContext CUDAFramesContext
typedef AVCUDADeviceContextInternal AVCUDADeviceContextInternal
typedef AVCUDADeviceContext AVCUDADeviceContext
typedef D3D11VAFramesContext D3D11VAFramesContext
typedef HRESULT (WINAPI *)(REFIID riid,void ** ppFactory) PFN_CREATE_DXGI_FACTORY
typedef AVD3D11FrameDescriptor AVD3D11FrameDescriptor
typedef AVD3D11VADeviceContext AVD3D11VADeviceContext
typedef AVD3D11VAFramesContext AVD3D11VAFramesContext
typedef DRMMapping DRMMapping
typedef AVDRMDeviceContext AVDRMDeviceContext
typedef AVDRMFrameDescriptor AVDRMFrameDescriptor
typedef AVDRMLayerDescriptor AVDRMLayerDescriptor
typedef AVDRMObjectDescriptor AVDRMObjectDescriptor
typedef AVDRMPlaneDescriptor AVDRMPlaneDescriptor
typedef DXVA2DevicePriv DXVA2DevicePriv
typedef DXVA2FramesContext DXVA2FramesContext
typedef DXVA2Mapping DXVA2Mapping
typedef HRESULT WINAPI pCreateDeviceManager9 (UINT *,**) IDirect3DDeviceManager9
typedef HRESULT WINAPI pDirect3DCreate9Ex (UINT,**) IDirect3D9Ex
typedef IDirect3D9 * WINAPI pDirect3DCreate9 () UINT
typedef AVDXVA2DeviceContext AVDXVA2DeviceContext
typedef AVDXVA2FramesContext AVDXVA2FramesContext
typedef HWContextType HWContextType
typedef HWMapDescriptor HWMapDescriptor
typedef AVMediaCodecDeviceContext AVMediaCodecDeviceContext
typedef DRMARMtoOpenCLMapping DRMARMtoOpenCLMapping
typedef DRMBeignetToOpenCLMapping DRMBeignetToOpenCLMapping
typedef OpenCLDeviceContext OpenCLDeviceContext
typedef OpenCLDeviceSelector OpenCLDeviceSelector
typedef OpenCLFramesContext OpenCLFramesContext
typedef OpenCLMapping OpenCLMapping
typedef AVOpenCLDeviceContext AVOpenCLDeviceContext
typedef AVOpenCLFrameDescriptor AVOpenCLFrameDescriptor
typedef AVOpenCLFramesContext AVOpenCLFramesContext
typedef QSVDeviceContext QSVDeviceContext
typedef QSVDevicePriv QSVDevicePriv
typedef QSVFramesContext QSVFramesContext
typedef AVQSVDeviceContext AVQSVDeviceContext
typedef AVQSVFramesContext AVQSVFramesContext
typedef VAAPIDRMImageBufferMapping VAAPIDRMImageBufferMapping
typedef VAAPIDeviceContext VAAPIDeviceContext
typedef VAAPIDevicePriv VAAPIDevicePriv
typedef VAAPIFormat VAAPIFormatDescriptor
typedef VAAPIFramesContext VAAPIFramesContext
typedef VAAPIMapping VAAPIMapping
typedef VAAPISurfaceFormat VAAPISurfaceFormat
typedef AVVAAPIDeviceContext AVVAAPIDeviceContext
typedef AVVAAPIFramesContext AVVAAPIFramesContext
typedef AVVAAPIHWConfig AVVAAPIHWConfig
typedef VDPAUDeviceContext VDPAUDeviceContext
typedef VDPAUDevicePriv VDPAUDevicePriv
typedef VDPAUFramesContext VDPAUFramesContext
typedef VDPAUPixFmtMap VDPAUPixFmtMap
typedef AVVDPAUDeviceContext AVVDPAUDeviceContext
typedef ImgUtils ImgUtils
typedef AVInteger AVInteger
typedef union:__anon642488a8010a av_alias av_alias64
typedef union:__anon642488a8020a av_alias av_alias32
typedef union:__anon642488a8030a av_alias av_alias16
typedef AVLFG AVLFG
typedef LLSModel LLSModel
typedef __anona73f94b80103 AVClassCategory
typedef AVClass AVClass
typedef LZOContext LZOContext
typedef AVContentLightMetadata AVContentLightMetadata
typedef AVMasteringDisplayMetadata AVMasteringDisplayMetadata
typedef AVMD5 AVMD5
typedef AVMotionVector AVMotionVector
typedef AVMurMur3 AVMurMur3
typedef AVOptionRanges AVOptionRanges
typedef AVOptionRange AVOptionRange
typedef AVOption AVOption
typedef ColorEntry ColorEntry
typedef VideoRateAbbr VideoRateAbbr
typedef VideoSizeAbbr VideoSizeAbbr
typedef PCA PCA
typedef AVComponentDescriptor AVComponentDescriptor
typedef AVPixFmtDescriptor AVPixFmtDescriptor
typedef int (*)(const uint8_t * src1,ptrdiff_t stride1,const uint8_t * src2,ptrdiff_t stride2) av_pixelutils_sad_fn
typedef AVRational AVRational
typedef AVRC4 AVRC4
typedef AVReplayGain AVReplayGain
typedef AVRIPEMD AVRIPEMD
typedef SampleFmtInfo SampleFmtInfo
typedef AVSHA AVSHA
typedef AVSHA512 AVSHA512
typedef WorkerContext WorkerContext
typedef AVSliceThread AVSliceThread
typedef SoftFloat SoftFloat
typedef SoftFloat_IEEE754 SoftFloat_IEEE754
typedef AVSphericalMapping AVSphericalMapping
typedef AVStereo3D AVStereo3D
typedef AVTEA AVTEA
typedef TestStruct TestStruct
typedef TestContext TestContext
typedef uint32_t (*)(void) random_seed_ptr_t
typedef AVThreadMessageFlags AVThreadMessageFlags
typedef AVThreadMessageQueue AVThreadMessageQueue
typedef __anon647094200108 AVTimecode
typedef AVTreeNode AVTreeNode
typedef AVTWOFISH AVTWOFISH
typedef xmm_reg xmm_reg
typedef ymm_reg ymm_reg
typedef int32_t x86_reg
typedef int64_t x86_reg
typedef int x86_reg
typedef AVXTEA AVXTEA
typedef void (*)(const uint8_t src[],int srcStride,uint8_t dst[],int dstStride,int width,int height,const int8_t QPs[],int QPStride,int isColor,PPContext * c2) pp_fn
typedef pp_context pp_context_t
typedef pp_mode pp_mode_t
typedef void pp_context
typedef void pp_mode
typedef PPContext PPContext
typedef PPMode PPMode
typedef AudioConvert AudioConvert
typedef void ()(uint8_t * po,const uint8_t * pi,int is,int os,uint8_t * end) conv_func_type
typedef void ()(uint8_t ** dst,const uint8_t ** src,int len) simd_func_type
typedef __anon287a171f0108 filter_t
typedef void (RENAME ())(SAMPLE ** out,const SAMPLE ** in1,COEFF * coeffp,integer len) mix_any_func_type
typedef ResampleContext ResampleContext
typedef SwrContext SwrContext
typedef AudioData AudioData
typedef ResampleContext * (*)(struct ResampleContext * c,int out_rate,int in_rate,int filter_size,int phase_shift,int linear,double cutoff,enum AVSampleFormat format,enum SwrFilterType filter_type,double kaiser_beta,double precision,int cheby,int exact_rational) resample_init_func
typedef int (*)(struct ResampleContext * c,AudioData * dst,const AudioData * src,int src_size,int * dst_idx,int * dst_count) invert_initial_buffer_func
typedef int (*)(struct ResampleContext * c,AudioData * dst,int dst_size,AudioData * src,int src_size,int * consumed) multiple_resample_func
typedef int (*)(struct ResampleContext * c,int sample_delta,int compensation_distance) set_compensation_func
typedef int (*)(struct SwrContext * c) resample_flush_func
typedef int64_t (*)(struct SwrContext * s,int in_samples) get_out_samples_func
typedef int64_t (*)(struct SwrContext * s,int64_t base) get_delay_func
typedef int64_t integer
typedef int integer
typedef void ()(uint8_t ** out,const uint8_t ** in1,void * coeffp,integer len) mix_any_func_type
typedef void ()(void * out,const void * in,void * coeffp,integer index,integer len) mix_1_1_func_type
typedef void ()(void * out,const void * in1,const void * in2,void * coeffp,integer index1,integer index2,integer len) mix_2_1_func_type
typedef void (*)(struct ResampleContext ** c) resample_free_func
typedef GammaContext GammaContext
typedef ColorContext ColorContext
typedef FilterContext FilterContext
typedef signed char sbyte
typedef unsigned char ubyte
typedef SwsFilter SwsFilter
typedef SwsVector SwsVector
typedef SwsAlphaBlend SwsAlphaBlend
typedef SwsDither SwsDither
typedef SwsContext SwsContext
typedef SwsFilterDescriptor SwsFilterDescriptor
typedef SwsPlane SwsPlane
typedef SwsSlice SwsSlice
typedef int (*)(struct SwsContext * context,const uint8_t * src[],int srcStride[],int srcSliceY,int srcSliceH,uint8_t * dst[],int dstStride[]) SwsFunc
typedef void (*)(const int16_t * filter,int filterSize,const int16_t ** src,uint8_t * dest,int dstW,const uint8_t * dither,int offset) yuv2planarX_fn
typedef void (*)(const int16_t * src,uint8_t * dest,int dstW,const uint8_t * dither,int offset) yuv2planar1_fn
typedef void (*)(struct SwsContext * c,const int16_t * chrFilter,int chrFilterSize,const int16_t ** chrUSrc,const int16_t ** chrVSrc,uint8_t * dest,int dstW) yuv2interleavedX_fn
typedef void (*)(struct SwsContext * c,const int16_t * lumFilter,const int16_t ** lumSrc,int lumFilterSize,const int16_t * chrFilter,const int16_t ** chrUSrc,const int16_t ** chrVSrc,int chrFilterSize,const int16_t ** alpSrc,uint8_t * dest,int dstW,int y) yuv2packedX_fn
typedef void (*)(struct SwsContext * c,const int16_t * lumFilter,const int16_t ** lumSrc,int lumFilterSize,const int16_t * chrFilter,const int16_t ** chrUSrc,const int16_t ** chrVSrc,int chrFilterSize,const int16_t ** alpSrc,uint8_t ** dest,int dstW,int y) yuv2anyX_fn
typedef void (*)(struct SwsContext * c,const int16_t * lumSrc,const int16_t * chrUSrc[2],const int16_t * chrVSrc[2],const int16_t * alpSrc,uint8_t * dest,int dstW,int uvalpha,int y) yuv2packed1_fn
typedef void (*)(struct SwsContext * c,const int16_t * lumSrc[2],const int16_t * chrUSrc[2],const int16_t * chrVSrc[2],const int16_t * alpSrc[2],uint8_t * dest,int dstW,int yalpha,int uvalpha,int y) yuv2packed2_fn
typedef void (*)(const uint8_t *,uint8_t *,int) rgbConvFn
typedef FormatEntry FormatEntry
typedef __anon07d55a7f0108 ScaleAlgorithm
typedef VScalerContext VScalerContext
typedef CheckasmFuncVersion CheckasmFuncVersion
typedef CheckasmFunc CheckasmFunc
typedef CheckasmPerf CheckasmPerf
typedef void (*)(double * out,const double * in,int sz) ftx1d_fn
typedef float type
typedef uint8_t pixel
typedef VObj VObj
typedef __anonebbb2dc40108 atom_t
typedef __anonebbb2dc40208 update_chunk_offsets_context_t
typedef __anonebbb2dc40308 upgrade_stco_context_t
typedef int (*)(void * context,atom_t * atom) parse_atoms_callback_t
typedef FuzzDataBuffer FuzzDataBuffer
typedef __anon8eafd7e20108 Stream

// Enums
enum __anon61b1e98b0103 {
	AVISYNTH_INTERFACE_VERSION = 6
}
enum __anon61b1e98b0203 {
	AVS_SAMPLE_FLOAT = 1<<4,
	AVS_SAMPLE_INT16 = 1<<1,
	AVS_SAMPLE_INT24 = 1<<2,
	AVS_SAMPLE_INT32 = 1<<3,
	AVS_SAMPLE_INT8 = 1<<0
}
enum __anon61b1e98b0303 {
	AVS_PLANAR_ALIGNED = 1<<3,
	AVS_PLANAR_A_ALIGNED = AVS_PLANAR_A|AVS_PLANAR_ALIGNED,
	AVS_PLANAR_A = 1<<4,
	AVS_PLANAR_B_ALIGNED = AVS_PLANAR_B|AVS_PLANAR_ALIGNED,
	AVS_PLANAR_B = 1<<7,
	AVS_PLANAR_G_ALIGNED = AVS_PLANAR_G|AVS_PLANAR_ALIGNED,
	AVS_PLANAR_G = 1<<6,
	AVS_PLANAR_R_ALIGNED = AVS_PLANAR_R|AVS_PLANAR_ALIGNED,
	AVS_PLANAR_R = 1<<5,
	AVS_PLANAR_U_ALIGNED = AVS_PLANAR_U|AVS_PLANAR_ALIGNED,
	AVS_PLANAR_U = 1<<1,
	AVS_PLANAR_V_ALIGNED = AVS_PLANAR_V|AVS_PLANAR_ALIGNED,
	AVS_PLANAR_V = 1<<2,
	AVS_PLANAR_Y_ALIGNED = AVS_PLANAR_Y|AVS_PLANAR_ALIGNED,
	AVS_PLANAR_Y = 1<<0
}
enum __anon61b1e98b0403 {
	AVS_CS_BGR = 1 << 28,
	AVS_CS_GENERIC_RGBAP = AVS_CS_PLANAR | AVS_CS_BGR | AVS_CS_RGBA_TYPE // planar RGBA,
	AVS_CS_GENERIC_RGBP = AVS_CS_PLANAR | AVS_CS_BGR | AVS_CS_RGB_TYPE // planar RGB,
	AVS_CS_GENERIC_YUV420 = AVS_CS_PLANAR | AVS_CS_YUV | AVS_CS_VPLANEFIRST | AVS_CS_SUB_HEIGHT_2 | AVS_CS_SUB_WIDTH_2 // 4:2:0 planar,
	AVS_CS_GENERIC_YUV422 = AVS_CS_PLANAR | AVS_CS_YUV | AVS_CS_VPLANEFIRST | AVS_CS_SUB_HEIGHT_1 | AVS_CS_SUB_WIDTH_2 // 4:2:2 planar,
	AVS_CS_GENERIC_YUV444 = AVS_CS_PLANAR | AVS_CS_YUV | AVS_CS_VPLANEFIRST | AVS_CS_SUB_HEIGHT_1 | AVS_CS_SUB_WIDTH_1 // 4:4:4 planar,
	AVS_CS_GENERIC_YUVA420 = AVS_CS_PLANAR | AVS_CS_YUVA | AVS_CS_VPLANEFIRST | AVS_CS_SUB_HEIGHT_2 | AVS_CS_SUB_WIDTH_2 // 4:2:0:A planar,
	AVS_CS_GENERIC_YUVA422 = AVS_CS_PLANAR | AVS_CS_YUVA | AVS_CS_VPLANEFIRST | AVS_CS_SUB_HEIGHT_1 | AVS_CS_SUB_WIDTH_2 // 4:2:2:A planar,
	AVS_CS_GENERIC_YUVA444 = AVS_CS_PLANAR | AVS_CS_YUVA | AVS_CS_VPLANEFIRST | AVS_CS_SUB_HEIGHT_1 | AVS_CS_SUB_WIDTH_1  // 4:4:4:A planar,
	AVS_CS_GENERIC_Y = AVS_CS_PLANAR | AVS_CS_INTERLEAVED | AVS_CS_YUV // Y only (4:0:0),
	AVS_CS_INTERLEAVED = 1 << 30,
	AVS_CS_PLANAR_FILTER = ~(AVS_CS_VPLANEFIRST | AVS_CS_UPLANEFIRST),
	AVS_CS_PLANAR_MASK = AVS_CS_PLANAR | AVS_CS_INTERLEAVED | AVS_CS_YUV | AVS_CS_BGR | AVS_CS_YUVA | AVS_CS_SAMPLE_BITS_MASK | AVS_CS_SUB_HEIGHT_MASK | AVS_CS_SUB_WIDTH_MASK,
	AVS_CS_PLANAR = 1 << 31,
	AVS_CS_RGBA_TYPE = 1 << 1,
	AVS_CS_RGB_TYPE = 1 << 0,
	AVS_CS_SAMPLE_BITS_10 = 5 << AVS_CS_SHIFT_SAMPLE_BITS,
	AVS_CS_SAMPLE_BITS_12 = 6 << AVS_CS_SHIFT_SAMPLE_BITS,
	AVS_CS_SAMPLE_BITS_14 = 7 << AVS_CS_SHIFT_SAMPLE_BITS,
	AVS_CS_SAMPLE_BITS_16 = 1 << AVS_CS_SHIFT_SAMPLE_BITS,
	AVS_CS_SAMPLE_BITS_32 = 2 << AVS_CS_SHIFT_SAMPLE_BITS,
	AVS_CS_SAMPLE_BITS_8 = 0 << AVS_CS_SHIFT_SAMPLE_BITS,
	AVS_CS_SAMPLE_BITS_MASK = 7 << AVS_CS_SHIFT_SAMPLE_BITS,
	AVS_CS_SHIFT_SAMPLE_BITS = 16,
	AVS_CS_SHIFT_SUB_HEIGHT = 8,
	AVS_CS_SHIFT_SUB_WIDTH = 0,
	AVS_CS_SUB_HEIGHT_1 = 3 << AVS_CS_SHIFT_SUB_HEIGHT // YV16 YV24 YV411,
	AVS_CS_SUB_HEIGHT_2 = 0 << AVS_CS_SHIFT_SUB_HEIGHT // YV12 I420,
	AVS_CS_SUB_HEIGHT_4 = 1 << AVS_CS_SHIFT_SUB_HEIGHT // YUV9,
	AVS_CS_SUB_HEIGHT_MASK = 7 << AVS_CS_SHIFT_SUB_HEIGHT,
	AVS_CS_SUB_WIDTH_1 = 3 << AVS_CS_SHIFT_SUB_WIDTH // YV24,
	AVS_CS_SUB_WIDTH_2 = 0 << AVS_CS_SHIFT_SUB_WIDTH // YV12 I420 YV16,
	AVS_CS_SUB_WIDTH_4 = 1 << AVS_CS_SHIFT_SUB_WIDTH // YUV9 YV411,
	AVS_CS_SUB_WIDTH_MASK = 7 << AVS_CS_SHIFT_SUB_WIDTH,
	AVS_CS_UPLANEFIRST = 1 << 4 // I420,
	AVS_CS_VPLANEFIRST = 1 << 3 // YV12 YV16 YV24 YV411 YUV9,
	AVS_CS_YUVA = 1 << 27,
	AVS_CS_YUV = 1 << 29
}
enum __anon61b1e98b0503 {
	AVS_CS_BGR24 = AVS_CS_RGB_TYPE | AVS_CS_BGR | AVS_CS_INTERLEAVED,
	AVS_CS_BGR32 = AVS_CS_RGBA_TYPE | AVS_CS_BGR | AVS_CS_INTERLEAVED,
	AVS_CS_BGR48 = AVS_CS_RGB_TYPE | AVS_CS_BGR | AVS_CS_INTERLEAVED | AVS_CS_SAMPLE_BITS_16 // BGR 3x16 bit,
	AVS_CS_BGR64 = AVS_CS_RGBA_TYPE | AVS_CS_BGR | AVS_CS_INTERLEAVED | AVS_CS_SAMPLE_BITS_16 // BGR 4x16 bit,
	AVS_CS_I420 = AVS_CS_PLANAR | AVS_CS_YUV | AVS_CS_SAMPLE_BITS_8 | AVS_CS_UPLANEFIRST | AVS_CS_SUB_HEIGHT_2 | AVS_CS_SUB_WIDTH_2 // YUV 4:2:0 planar,
	AVS_CS_IYUV = AVS_CS_I420,
	AVS_CS_RAW32 = 1<<5 | AVS_CS_INTERLEAVED,
	AVS_CS_RGBAP10 = AVS_CS_GENERIC_RGBAP | AVS_CS_SAMPLE_BITS_10 // Planar RGBA 10bit samples,
	AVS_CS_RGBAP12 = AVS_CS_GENERIC_RGBAP | AVS_CS_SAMPLE_BITS_12 // Planar RGBA 12bit samples,
	AVS_CS_RGBAP14 = AVS_CS_GENERIC_RGBAP | AVS_CS_SAMPLE_BITS_14 // Planar RGBA 14bit samples,
	AVS_CS_RGBAP16 = AVS_CS_GENERIC_RGBAP | AVS_CS_SAMPLE_BITS_16 // Planar RGBA 16bit samples,
	AVS_CS_RGBAPS = AVS_CS_GENERIC_RGBAP | AVS_CS_SAMPLE_BITS_32 // Planar RGBA 32bit samples,
	AVS_CS_RGBAP = AVS_CS_GENERIC_RGBAP | AVS_CS_SAMPLE_BITS_8 // Planar RGBA 8 bit samples,
	AVS_CS_RGBP10 = AVS_CS_GENERIC_RGBP | AVS_CS_SAMPLE_BITS_10 // Planar RGB 10bit samples,
	AVS_CS_RGBP12 = AVS_CS_GENERIC_RGBP | AVS_CS_SAMPLE_BITS_12 // Planar RGB 12bit samples,
	AVS_CS_RGBP14 = AVS_CS_GENERIC_RGBP | AVS_CS_SAMPLE_BITS_14 // Planar RGB 14bit samples,
	AVS_CS_RGBP16 = AVS_CS_GENERIC_RGBP | AVS_CS_SAMPLE_BITS_16 // Planar RGB 16bit samples,
	AVS_CS_RGBPS = AVS_CS_GENERIC_RGBP | AVS_CS_SAMPLE_BITS_32 // Planar RGB 32bit samples,
	AVS_CS_RGBP = AVS_CS_GENERIC_RGBP | AVS_CS_SAMPLE_BITS_8 // Planar RGB 8 bit samples,
	AVS_CS_UNKNOWN = 0,
	AVS_CS_Y10 = AVS_CS_GENERIC_Y | AVS_CS_SAMPLE_BITS_10 // Y 4:0:0 10bit samples,
	AVS_CS_Y12 = AVS_CS_GENERIC_Y | AVS_CS_SAMPLE_BITS_12 // Y 4:0:0 12bit samples,
	AVS_CS_Y14 = AVS_CS_GENERIC_Y | AVS_CS_SAMPLE_BITS_14 // Y 4:0:0 14bit samples,
	AVS_CS_Y16 = AVS_CS_GENERIC_Y | AVS_CS_SAMPLE_BITS_16 // Y 4:0:0 16bit samples,
	AVS_CS_Y32 = AVS_CS_GENERIC_Y | AVS_CS_SAMPLE_BITS_32 // Y 4:0:0 32bit samples,
	AVS_CS_Y8 = AVS_CS_GENERIC_Y | AVS_CS_SAMPLE_BITS_8 // Y 4:0:0 planar,
	AVS_CS_YUV420P10 = AVS_CS_GENERIC_YUV420 | AVS_CS_SAMPLE_BITS_10 // YUV 4:2:0 10bit samples,
	AVS_CS_YUV420P12 = AVS_CS_GENERIC_YUV420 | AVS_CS_SAMPLE_BITS_12 // YUV 4:2:0 12bit samples,
	AVS_CS_YUV420P14 = AVS_CS_GENERIC_YUV420 | AVS_CS_SAMPLE_BITS_14 // YUV 4:2:0 14bit samples,
	AVS_CS_YUV420P16 = AVS_CS_GENERIC_YUV420 | AVS_CS_SAMPLE_BITS_16 // YUV 4:2:0 16bit samples,
	AVS_CS_YUV420PS = AVS_CS_GENERIC_YUV420 | AVS_CS_SAMPLE_BITS_32 // YUV 4:2:0 32bit samples,
	AVS_CS_YUV422P10 = AVS_CS_GENERIC_YUV422 | AVS_CS_SAMPLE_BITS_10 // YUV 4:2:2 10bit samples,
	AVS_CS_YUV422P12 = AVS_CS_GENERIC_YUV422 | AVS_CS_SAMPLE_BITS_12 // YUV 4:2:2 12bit samples,
	AVS_CS_YUV422P14 = AVS_CS_GENERIC_YUV422 | AVS_CS_SAMPLE_BITS_14 // YUV 4:2:2 14bit samples,
	AVS_CS_YUV422P16 = AVS_CS_GENERIC_YUV422 | AVS_CS_SAMPLE_BITS_16 // YUV 4:2:2 16bit samples,
	AVS_CS_YUV422PS = AVS_CS_GENERIC_YUV422 | AVS_CS_SAMPLE_BITS_32 // YUV 4:2:2 32bit samples,
	AVS_CS_YUV444P10 = AVS_CS_GENERIC_YUV444 | AVS_CS_SAMPLE_BITS_10 // YUV 4:4:4 10bit samples,
	AVS_CS_YUV444P12 = AVS_CS_GENERIC_YUV444 | AVS_CS_SAMPLE_BITS_12 // YUV 4:4:4 12bit samples,
	AVS_CS_YUV444P14 = AVS_CS_GENERIC_YUV444 | AVS_CS_SAMPLE_BITS_14 // YUV 4:4:4 14bit samples,
	AVS_CS_YUV444P16 = AVS_CS_GENERIC_YUV444 | AVS_CS_SAMPLE_BITS_16 // YUV 4:4:4 16bit samples,
	AVS_CS_YUV444PS = AVS_CS_GENERIC_YUV444 | AVS_CS_SAMPLE_BITS_32 // YUV 4:4:4 32bit samples,
	AVS_CS_YUV9 = AVS_CS_PLANAR | AVS_CS_YUV | AVS_CS_SAMPLE_BITS_8 | AVS_CS_VPLANEFIRST | AVS_CS_SUB_HEIGHT_4 | AVS_CS_SUB_WIDTH_4 // YVU 4:1:0 planar,
	AVS_CS_YUVA420P10 = AVS_CS_GENERIC_YUVA420 | AVS_CS_SAMPLE_BITS_10 // YUVA 4:2:0 10bit samples,
	AVS_CS_YUVA420P12 = AVS_CS_GENERIC_YUVA420 | AVS_CS_SAMPLE_BITS_12 // YUVA 4:2:0 12bit samples,
	AVS_CS_YUVA420P14 = AVS_CS_GENERIC_YUVA420 | AVS_CS_SAMPLE_BITS_14 // YUVA 4:2:0 14bit samples,
	AVS_CS_YUVA420P16 = AVS_CS_GENERIC_YUVA420 | AVS_CS_SAMPLE_BITS_16 // YUVA 4:2:0 16bit samples,
	AVS_CS_YUVA420PS = AVS_CS_GENERIC_YUVA420 | AVS_CS_SAMPLE_BITS_32 // YUVA 4:2:0 32bit samples,
	AVS_CS_YUVA420 = AVS_CS_GENERIC_YUVA420 | AVS_CS_SAMPLE_BITS_8 // YUVA 4:2:0 8bit samples,
	AVS_CS_YUVA422P10 = AVS_CS_GENERIC_YUVA422 | AVS_CS_SAMPLE_BITS_10 // YUVA 4:2:2 10bit samples,
	AVS_CS_YUVA422P12 = AVS_CS_GENERIC_YUVA422 | AVS_CS_SAMPLE_BITS_12 // YUVA 4:2:2 12bit samples,
	AVS_CS_YUVA422P14 = AVS_CS_GENERIC_YUVA422 | AVS_CS_SAMPLE_BITS_14 // YUVA 4:2:2 14bit samples,
	AVS_CS_YUVA422P16 = AVS_CS_GENERIC_YUVA422 | AVS_CS_SAMPLE_BITS_16 // YUVA 4:2:2 16bit samples,
	AVS_CS_YUVA422PS = AVS_CS_GENERIC_YUVA422 | AVS_CS_SAMPLE_BITS_32 // YUVA 4:2:2 32bit samples,
	AVS_CS_YUVA422 = AVS_CS_GENERIC_YUVA422 | AVS_CS_SAMPLE_BITS_8 // YUVA 4:2:2 8bit samples,
	AVS_CS_YUVA444P10 = AVS_CS_GENERIC_YUVA444 | AVS_CS_SAMPLE_BITS_10 // YUVA 4:4:4 10bit samples,
	AVS_CS_YUVA444P12 = AVS_CS_GENERIC_YUVA444 | AVS_CS_SAMPLE_BITS_12 // YUVA 4:4:4 12bit samples,
	AVS_CS_YUVA444P14 = AVS_CS_GENERIC_YUVA444 | AVS_CS_SAMPLE_BITS_14 // YUVA 4:4:4 14bit samples,
	AVS_CS_YUVA444P16 = AVS_CS_GENERIC_YUVA444 | AVS_CS_SAMPLE_BITS_16 // YUVA 4:4:4 16bit samples,
	AVS_CS_YUVA444PS = AVS_CS_GENERIC_YUVA444 | AVS_CS_SAMPLE_BITS_32 // YUVA 4:4:4 32bit samples,
	AVS_CS_YUVA444 = AVS_CS_GENERIC_YUVA444 | AVS_CS_SAMPLE_BITS_8 // YUVA 4:4:4 8bit samples,
	AVS_CS_YUY2 = 1<<2 | AVS_CS_YUV | AVS_CS_INTERLEAVED,
	AVS_CS_YV12 = AVS_CS_GENERIC_YUV420 | AVS_CS_SAMPLE_BITS_8 // YVU 4:2:0 planar,
	AVS_CS_YV16 = AVS_CS_GENERIC_YUV422 | AVS_CS_SAMPLE_BITS_8 // YVU 4:2:2 planar,
	AVS_CS_YV24 = AVS_CS_GENERIC_YUV444 | AVS_CS_SAMPLE_BITS_8 // YVU 4:4:4 planar,
	AVS_CS_YV411 = AVS_CS_PLANAR | AVS_CS_YUV | AVS_CS_SAMPLE_BITS_8 | AVS_CS_VPLANEFIRST | AVS_CS_SUB_HEIGHT_1 | AVS_CS_SUB_WIDTH_4 // YVU 4:1:1 planar
}
enum __anon61b1e98b0603 {
	AVS_IT_BFF = 1<<0,
	AVS_IT_FIELDBASED = 1<<2,
	AVS_IT_TFF = 1<<1
}
enum __anon61b1e98b0703 {
	AVS_FILTER_ARGS_DESCRIPTION = 10,
	AVS_FILTER_ARGS_INFO = 8,
	AVS_FILTER_ARGS = 7,
	AVS_FILTER_AUTHOR = 5,
	AVS_FILTER_DESCRIPTION = 11,
	AVS_FILTER_INPUT_COLORSPACE = 2,
	AVS_FILTER_NAME = 4,
	AVS_FILTER_OUTPUT_TYPE = 9,
	AVS_FILTER_TYPE = 1,
	AVS_FILTER_VERSION = 6
}
enum __anon61b1e98b0803 {
	AVS_FILTER_OUTPUT_TYPE_DIFFERENT = 4,
	AVS_FILTER_OUTPUT_TYPE_SAME = 3,
	AVS_FILTER_TYPE_AUDIO = 1,
	AVS_FILTER_TYPE_VIDEO = 2
}
enum __anon61b1e98b0903 {
	AVS_CACHE_ACCESS_RAND = 261 // Filter is access order agnostic.,
	AVS_CACHE_ACCESS_SEQ0 = 262 // Filter prefers sequential access (low cost),
	AVS_CACHE_ACCESS_SEQ1 = 263 // Filter needs sequential access (high cost),
	AVS_CACHE_AUDIO_AUTO = 53 // Audio cache on (auto mode) X byte intial cache.,
	AVS_CACHE_AUDIO_NONE = 52 // Audio cache off (auto mode) X byte intial cache.,
	AVS_CACHE_AUDIO_NOTHING = 51 // Explicitly do not cache audio.,
	AVS_CACHE_AUDIO = 50 // Explicitly do cache audio X byte cache.,
	AVS_CACHE_COST_HI = 225 // Child response of heavy cost. (Slow),
	AVS_CACHE_COST_LOW = 223 // Child response of light cost. (Fast),
	AVS_CACHE_COST_MED = 224 // Child response of medium cost. (Real time),
	AVS_CACHE_COST_UNIT = 222 // Child response of unit cost (less than or equal 1 full frame blit).,
	AVS_CACHE_COST_ZERO = 221 // Child response of zero cost (ptr arithmetic only).,
	AVS_CACHE_FORCE_GENERIC = 13 // LRU cache upto X frames override any previous CACHE_WINDOW.,
	AVS_CACHE_GENERIC = 12 // LRU cache upto X frames.,
	AVS_CACHE_GETCHILD_ACCESS_COST = 260 // Cache ask Child for preferred access pattern.,
	AVS_CACHE_GETCHILD_AUDIO_MODE = 202 // Cache ask Child for desired audio cache mode.,
	AVS_CACHE_GETCHILD_AUDIO_SIZE = 203 // Cache ask Child for desired audio cache size.,
	AVS_CACHE_GETCHILD_CACHE_MODE = 200 // Cache ask Child for desired video cache mode.,
	AVS_CACHE_GETCHILD_CACHE_SIZE = 201 // Cache ask Child for desired video cache size.,
	AVS_CACHE_GETCHILD_COST = 220 // Cache ask Child for estimated processing cost.,
	AVS_CACHE_GETCHILD_THREAD_MODE = 240 // Cache ask Child for thread safetyness.,
	AVS_CACHE_GET_AUDIO_POLICY = 70 // Get the current audio policy.,
	AVS_CACHE_GET_AUDIO_SIZE = 71 // Get the current audio cache size.,
	AVS_CACHE_GET_POLICY = 30 // Get the current policy.,
	AVS_CACHE_GET_RANGE = 32 // Get the current generic frame range.,
	AVS_CACHE_GET_WINDOW = 31 // Get the current window h_span.,
	AVS_CACHE_NOTHING = 10 // Do not cache video.,
	AVS_CACHE_PREFETCH_AUDIO_BEGIN = 120 // Begin queue request transaction to prefetch audio (take critical section).,
	AVS_CACHE_PREFETCH_AUDIO_COMMIT = 124 // Enqueue request transaction to prefetch audio (release critical section).,
	AVS_CACHE_PREFETCH_AUDIO_COUNT = 123 // Set low 32 bits of length.,
	AVS_CACHE_PREFETCH_AUDIO_GO = 125 // Action audio prefetches.,
	AVS_CACHE_PREFETCH_AUDIO_STARTHI = 122 // Set high 32 bits of start.,
	AVS_CACHE_PREFETCH_AUDIO_STARTLO = 121 // Set low 32 bits of start.,
	AVS_CACHE_PREFETCH_FRAME = 100 // Queue request to prefetch frame N.,
	AVS_CACHE_PREFETCH_GO = 101 // Action video prefetches.,
	AVS_CACHE_THREAD_CLASS = 242 // Only 1 thread allowed for each instance. 2.6 filters default!,
	AVS_CACHE_THREAD_OWN = 244 // Safe but limit to 1 thread internally threaded.,
	AVS_CACHE_THREAD_SAFE = 243 // Allow all threads in any instance.,
	AVS_CACHE_THREAD_UNSAFE = 241 // Only 1 thread allowed for all instances. 2.5 filters default!,
	AVS_CACHE_WINDOW = 11 // Hard protect upto X frames within a range of X from the current frame N.
}
enum __anon61b1e98b0b03 {
	AVS_CPUF_SSE3 = 0x100 // PIV+ K8 Venice,
	AVS_CPUF_SSE4_1 = 0x400,
	AVS_CPUF_SSE4_2 = 0x1000 // Nehalem,
	AVS_CPUF_SSE4 = 0x400 // Penryn Wolfdale Yorkfield,
	AVS_CPUF_SSSE3 = 0x200 // Core 2,
	AVS_CPU_3DNOW_EXT = 0x80 // Athlon,
	AVS_CPU_3DNOW = 0x40 // K6-2,
	AVS_CPU_FORCE = 0x01 // N/A,
	AVS_CPU_FPU = 0x02 // 386/486DX,
	AVS_CPU_INTEGER_SSE = 0x08 // PIII Athlon,
	AVS_CPU_MMX = 0x04 // P55C K6 PII,
	AVS_CPU_SSE2 = 0x20 // PIV Hammer,
	AVS_CPU_SSE = 0x10 // PIII Athlon XP/MP,
	AVS_CPU_X86_64 = 0xA0 // Hammer (note: equiv. to 3DNow + SSE2
}
enum __anon9e506a7a0103 {
	AVISYNTH_INTERFACE_VERSION = 3
}
enum __anon9e506a7a0203 {
	AVS_SAMPLE_FLOAT = 1<<4,
	AVS_SAMPLE_INT16 = 1<<1,
	AVS_SAMPLE_INT24 = 1<<2,
	AVS_SAMPLE_INT32 = 1<<3,
	AVS_SAMPLE_INT8 = 1<<0
}
enum __anon9e506a7a0303 {
	AVS_PLANAR_ALIGNED = 1<<3,
	AVS_PLANAR_U_ALIGNED = AVS_PLANAR_U|AVS_PLANAR_ALIGNED,
	AVS_PLANAR_U = 1<<1,
	AVS_PLANAR_V_ALIGNED = AVS_PLANAR_V|AVS_PLANAR_ALIGNED,
	AVS_PLANAR_V = 1<<2,
	AVS_PLANAR_Y_ALIGNED = AVS_PLANAR_Y|AVS_PLANAR_ALIGNED,
	AVS_PLANAR_Y = 1<<0
}
enum __anon9e506a7a0403 {
	AVS_CS_BGR = 1<<28,
	AVS_CS_INTERLEAVED = 1<<30,
	AVS_CS_PLANAR = 1<<31,
	AVS_CS_YUV = 1<<29
}
enum __anon9e506a7a0503 {
	AVS_CS_BGR24 = 1<<0 | AVS_CS_BGR | AVS_CS_INTERLEAVED,
	AVS_CS_BGR32 = 1<<1 | AVS_CS_BGR | AVS_CS_INTERLEAVED,
	AVS_CS_I420 = 1<<4 | AVS_CS_YUV | AVS_CS_PLANAR // y-u-v planar,
	AVS_CS_IYUV = 1<<4 | AVS_CS_YUV | AVS_CS_PLANAR // same as above,
	AVS_CS_UNKNOWN = 0,
	AVS_CS_YUY2 = 1<<2 | AVS_CS_YUV | AVS_CS_INTERLEAVED,
	AVS_CS_YV12 = 1<<3 | AVS_CS_YUV | AVS_CS_PLANAR // y-v-u planar
}
enum __anon9e506a7a0603 {
	AVS_IT_BFF = 1<<0,
	AVS_IT_FIELDBASED = 1<<2,
	AVS_IT_TFF = 1<<1
}
enum __anon9e506a7a0703 {
	AVS_FILTER_ARGS_DESCRIPTION = 10,
	AVS_FILTER_ARGS_INFO = 8,
	AVS_FILTER_ARGS = 7,
	AVS_FILTER_AUTHOR = 5,
	AVS_FILTER_DESCRIPTION = 11,
	AVS_FILTER_INPUT_COLORSPACE = 2,
	AVS_FILTER_NAME = 4,
	AVS_FILTER_OUTPUT_TYPE = 9,
	AVS_FILTER_TYPE = 1,
	AVS_FILTER_VERSION = 6
}
enum __anon9e506a7a0803 {
	AVS_FILTER_OUTPUT_TYPE_DIFFERENT = 4,
	AVS_FILTER_OUTPUT_TYPE_SAME = 3,
	AVS_FILTER_TYPE_AUDIO = 1,
	AVS_FILTER_TYPE_VIDEO = 2
}
enum __anon9e506a7a0903 {
	AVS_CACHE_ALL = 2,
	AVS_CACHE_AUDIO_AUTO = 5,
	AVS_CACHE_AUDIO_NONE = 4,
	AVS_CACHE_AUDIO = 3,
	AVS_CACHE_NOTHING = 0,
	AVS_CACHE_RANGE = 1
}
enum __anon9e506a7a0b03 {
	AVS_CPU_3DNOW_EXT = 0x80 // Athlon,
	AVS_CPU_3DNOW = 0x40 // K6-2,
	AVS_CPU_FORCE = 0x01 // N/A,
	AVS_CPU_FPU = 0x02 // 386/486DX,
	AVS_CPU_INTEGER_SSE = 0x08 // PIII Athlon,
	AVS_CPU_MMX = 0x04 // P55C K6 PII,
	AVS_CPU_SSE2 = 0x20 // PIV Hammer,
	AVS_CPU_SSE = 0x10 // PIII Athlon XP/MP,
	AVS_CPU_X86_64 = 0xA0 // Hammer (note: equiv. to 3DNow + SSE2
}
enum out_sample_fmts {
}
enum pix_fmts {
}
enum show_muxdemuxers {
	SHOW_DEFAULT = 0,
	SHOW_DEMUXERS = 1,
	SHOW_MUXERS = 2
}
enum HWAccelID {
	HWACCEL_AUTO = 0,
	HWACCEL_CUVID = 1,
	HWACCEL_GENERIC = 2,
	HWACCEL_NONE = 0,
	HWACCEL_QSV = 4,
	HWACCEL_VIDEOTOOLBOX = 5
}
enum __anon714c9d3c0303 {
	ENCODER_FINISHED = 1,
	MUXER_FINISHED = 2
}
enum forced_keyframes_const {
	FKF_NB = 0,
	FKF_N_FORCED = 1,
	FKF_N = 2,
	FKF_PREV_FORCED_N = 3,
	FKF_PREV_FORCED_T = 4,
	FKF_T = 5
}
enum ljpeg_formats {
}
enum mjpeg_formats {
}
enum OptGroup {
	GROUP_INFILE = 0,
	GROUP_OUTFILE = 1
}
enum __anonc79babc90103 {
}
enum ShowMode {
}
enum __anon7801d0240103 {
	AV_SYNC_AUDIO_MASTER = 0,
	AV_SYNC_EXTERNAL_CLOCK = 1,
	AV_SYNC_VIDEO_MASTER = 2
}
enum sample_fmts {
}
enum __anon872c66460103 {
	SECTION_ID_CHAPTERS = 0,
	SECTION_ID_CHAPTER_TAGS = 1,
	SECTION_ID_CHAPTER = 2,
	SECTION_ID_ERROR = 3,
	SECTION_ID_FORMAT_TAGS = 4,
	SECTION_ID_FORMAT = 5,
	SECTION_ID_FRAMES = 6,
	SECTION_ID_FRAME_LOGS = 7,
	SECTION_ID_FRAME_LOG = 8,
	SECTION_ID_FRAME_SIDE_DATA_LIST = 9,
	SECTION_ID_FRAME_SIDE_DATA = 10,
	SECTION_ID_FRAME_TAGS = 11,
	SECTION_ID_FRAME = 12,
	SECTION_ID_LIBRARY_VERSIONS = 13,
	SECTION_ID_LIBRARY_VERSION = 14,
	SECTION_ID_NONE = -1,
	SECTION_ID_PACKETS_AND_FRAMES = 16,
	SECTION_ID_PACKETS = 17,
	SECTION_ID_PACKET_SIDE_DATA_LIST = 18,
	SECTION_ID_PACKET_SIDE_DATA = 19,
	SECTION_ID_PACKET_TAGS = 20,
	SECTION_ID_PACKET = 21,
	SECTION_ID_PIXEL_FORMATS = 22,
	SECTION_ID_PIXEL_FORMAT_COMPONENTS = 23,
	SECTION_ID_PIXEL_FORMAT_COMPONENT = 24,
	SECTION_ID_PIXEL_FORMAT_FLAGS = 25,
	SECTION_ID_PIXEL_FORMAT = 26,
	SECTION_ID_PROGRAMS = 27,
	SECTION_ID_PROGRAM_STREAMS = 28,
	SECTION_ID_PROGRAM_STREAM_DISPOSITION = 29,
	SECTION_ID_PROGRAM_STREAM_TAGS = 30,
	SECTION_ID_PROGRAM_STREAM = 31,
	SECTION_ID_PROGRAM_TAGS = 32,
	SECTION_ID_PROGRAM_VERSION = 33,
	SECTION_ID_PROGRAM = 34,
	SECTION_ID_ROOT = 35,
	SECTION_ID_STREAMS = 36,
	SECTION_ID_STREAM_DISPOSITION = 37,
	SECTION_ID_STREAM_SIDE_DATA_LIST = 38,
	SECTION_ID_STREAM_SIDE_DATA = 39,
	SECTION_ID_STREAM_TAGS = 40,
	SECTION_ID_STREAM = 41,
	SECTION_ID_SUBTITLE = 42
}
enum __anon872c66460403 {
	WRITER_STRING_VALIDATION_FAIL = 0,
	WRITER_STRING_VALIDATION_IGNORE = 1,
	WRITER_STRING_VALIDATION_NB = 2,
	WRITER_STRING_VALIDATION_REPLACE = 3
}
enum pixfmt_rgb24 {
	AV_PIX_FMT_0RGB32 = 0,
	AV_PIX_FMT_BGR24 = 1,
	AV_PIX_FMT_NONE = 2
}
enum BandType {
	ESC_BT = 11 ///< Spectral data are coded with an escape sequence.,
	FIRST_PAIR_BT = 5 ///< This and later band types encode two values (rather than four) with one code word.,
	INTENSITY_BT2 = 14 ///< Scalefactor data are intensity stereo positions (out of phase).,
	INTENSITY_BT = 15 ///< Scalefactor data are intensity stereo positions (in phase).,
	NOISE_BT = 13 ///< Spectral data are scaled white noise not coded in the bitstream.,
	RESERVED_BT = 12 ///< Band types following are encoded differently from others.,
	ZERO_BT = 0 ///< Scalefactors and spectral data are all zero.
}
enum ChannelPosition {
	AAC_CHANNEL_BACK = 3,
	AAC_CHANNEL_CC = 5,
	AAC_CHANNEL_FRONT = 1,
	AAC_CHANNEL_LFE = 4,
	AAC_CHANNEL_OFF = 0,
	AAC_CHANNEL_SIDE = 2
}
enum CouplingPoint {
	AFTER_IMDCT = 3,
	BEFORE_TNS = 1,
	BETWEEN_TNS_AND_IMDCT = 2
}
enum ExtensionPayloadID {
	EXT_DATA_ELEMENT = 0,
	EXT_DYNAMIC_RANGE = 0xb,
	EXT_FILL_DATA = 2,
	EXT_FILL = 3,
	EXT_SBR_DATA_CRC = 0xe,
	EXT_SBR_DATA = 0xd
}
enum OCStatus {
	OC_GLOBAL_HDR = 0,
	OC_LOCKED = 1,
	OC_NONE = 2,
	OC_TRIAL_FRAME = 3,
	OC_TRIAL_PCE = 4
}
enum RawDataBlockType {
	TYPE_CCE = 0,
	TYPE_CPE = 1,
	TYPE_DSE = 2,
	TYPE_END = 3,
	TYPE_FIL = 4,
	TYPE_LFE = 5,
	TYPE_PCE = 6,
	TYPE_SCE = 7
}
enum WindowSequence {
	EIGHT_SHORT_SEQUENCE = 0,
	LONG_START_SEQUENCE = 1,
	LONG_STOP_SEQUENCE = 2,
	ONLY_LONG_SEQUENCE = 3
}
enum __anon1ea37b3d0103 {
	AAC_AC3_PARSE_ERROR_BSID = -0x2030c0a,
	AAC_AC3_PARSE_ERROR_CHANNEL_CFG = -0x7030c0a,
	AAC_AC3_PARSE_ERROR_CRC = -0x6030c0a,
	AAC_AC3_PARSE_ERROR_FRAME_SIZE = -0x4030c0a,
	AAC_AC3_PARSE_ERROR_FRAME_TYPE = -0x5030c0a,
	AAC_AC3_PARSE_ERROR_SAMPLE_RATE = -0x3030c0a,
	AAC_AC3_PARSE_ERROR_SYNC = -0x1030c0a
}
enum codec_ids {
	AV_CODEC_ID_AAC = 0,
	AV_CODEC_ID_NONE = 1
}
enum AACCoder {
	AAC_CODER_ANMR = 0,
	AAC_CODER_FAST = 1,
	AAC_CODER_NB = 2,
	AAC_CODER_TWOLOOP = 3
}
enum __anon019153190103 {
	huff_icc_df = 0,
	huff_icc_dt = 1,
	huff_iid_df0 = 2,
	huff_iid_df1 = 3,
	huff_iid_dt0 = 4,
	huff_iid_dt1 = 5,
	huff_ipd_df = 6,
	huff_ipd_dt = 7,
	huff_opd_df = 8,
	huff_opd_dt = 9
}
enum __anon33bceed20103 {
	PSY_3GPP_AH_ACTIVE = 0,
	PSY_3GPP_AH_INACTIVE = 1,
	PSY_3GPP_AH_NONE = 2
}
enum __anon33e9c8220103 {
	F_HUFFMAN_ENV_1_5DB = 0,
	F_HUFFMAN_ENV_3_0DB = 1,
	F_HUFFMAN_ENV_BAL_1_5DB = 2,
	F_HUFFMAN_ENV_BAL_3_0DB = 3,
	T_HUFFMAN_ENV_1_5DB = 4,
	T_HUFFMAN_ENV_3_0DB = 5,
	T_HUFFMAN_ENV_BAL_1_5DB = 6,
	T_HUFFMAN_ENV_BAL_3_0DB = 7,
	T_HUFFMAN_NOISE_3_0DB = 8,
	T_HUFFMAN_NOISE_BAL_3_0DB = 9
}
enum __anon33e9c8220203 {
	FIXFIX = 0,
	FIXVAR = 1,
	VARFIX = 2,
	VARVAR = 3
}
enum __anon33e9c8220303 {
	EXTENSION_ID_PS = 2
}
enum AC3DolbyHeadphoneMode {
	AC3_DHEADPHONMOD_NOTINDICATED = 0,
	AC3_DHEADPHONMOD_OFF = 1,
	AC3_DHEADPHONMOD_ON = 2,
	AC3_DHEADPHONMOD_RESERVED = 3
}
enum AC3DolbySurroundEXMode {
	AC3_DSUREXMOD_NOTINDICATED = 0,
	AC3_DSUREXMOD_OFF = 1,
	AC3_DSUREXMOD_ON = 2,
	AC3_DSUREXMOD_PLIIZ = 3
}
enum AC3DolbySurroundMode {
	AC3_DSURMOD_NOTINDICATED = 0,
	AC3_DSURMOD_OFF = 1,
	AC3_DSURMOD_ON = 2,
	AC3_DSURMOD_RESERVED = 3
}
enum AC3PreferredStereoDownmixMode {
	AC3_DMIXMOD_DPLII = 0,
	AC3_DMIXMOD_LORO = 1,
	AC3_DMIXMOD_LTRT = 2,
	AC3_DMIXMOD_NOTINDICATED = 0
}
enum __anon71c7becd0103 {
	DBA_NEW = 0,
	DBA_NONE = 1,
	DBA_RESERVED = 2,
	DBA_REUSE = 0
}
enum __anon71c7becd0203 {
	AC3_CHMODE_2F1R = 0,
	AC3_CHMODE_2F2R = 1,
	AC3_CHMODE_3F1R = 2,
	AC3_CHMODE_3F2R = 3,
	AC3_CHMODE_3F = 4,
	AC3_CHMODE_DUALMONO = 0,
	AC3_CHMODE_MONO = 6,
	AC3_CHMODE_STEREO = 7
}
enum __anon71c7becd0303 {
	EAC3_FRAME_TYPE_AC3_CONVERT = 0,
	EAC3_FRAME_TYPE_DEPENDENT = 1,
	EAC3_FRAME_TYPE_INDEPENDENT = 0,
	EAC3_FRAME_TYPE_RESERVED = 3
}
enum CustomChannelMapLocation {
	AC3_CHMAP_C_SUR = 1<<(15-7),
	AC3_CHMAP_C = 1<<(15-1),
	AC3_CHMAP_LFE = 1<<(15-15),
	AC3_CHMAP_L_SUR = 1<<(15-3),
	AC3_CHMAP_L = 1<<(15-0),
	AC3_CHMAP_R_SUR = 1<<(15-4),
	AC3_CHMAP_R = 1<<(15-2)
}
enum sample_fmts_both {
	AV_SAMPLE_FMT_NONE = 0,
	AV_SAMPLE_FMT_S16P = 1,
	AV_SAMPLE_FMT_S16 = { AV_SAMPLE_FMT_S16
}
enum sample_fmts_s16p {
	AV_SAMPLE_FMT_NONE = 0,
	AV_SAMPLE_FMT_S16P = { AV_SAMPLE_FMT_S16P
}
enum sample_fmts_s16 {
	AV_SAMPLE_FMT_NONE = 0,
	AV_SAMPLE_FMT_S16 = { AV_SAMPLE_FMT_S16
}
enum sample_fmts_p {
	AV_SAMPLE_FMT_NONE = 0,
	AV_SAMPLE_FMT_S16P = 1
}
enum sample_fmts {
	AV_SAMPLE_FMT_NONE = 0,
	AV_SAMPLE_FMT_S16 = 1
}
enum AICBands {
	COEFF_CHROMA_EXT = 0,
	COEFF_CHROMA = 1,
	COEFF_LUMA_EXT = 2,
	COEFF_LUMA = 0,
	NUM_BANDS = 4
}
enum ff_alac_channel_elements {
}
enum AlacRawDataBlockType {
	TYPE_CCE = 0,
	TYPE_CPE = 1,
	TYPE_DSE = 2,
	TYPE_END = 3,
	TYPE_FIL = 4,
	TYPE_LFE = 5,
	TYPE_PCE = 6,
	TYPE_SCE = 7
}
enum RA_Flag {
	RA_FLAG_FRAMES = 0,
	RA_FLAG_HEADER = 1,
	RA_FLAG_NONE = 2
}
enum ff_amf_pix_fmts {
	AV_PIX_FMT_D3D11 = 0,
	AV_PIX_FMT_DXVA2_VLD = 1,
	AV_PIX_FMT_NONE = 2,
	AV_PIX_FMT_NV12 = 3,
	AV_PIX_FMT_YUV420P = 4
}
enum Mode {
	MODE_10k2 = 0,
	MODE_12k2 = 1,
	MODE_4k75 = 0 ///< 4.75 kbit/s,
	MODE_5k15 = 3,
	MODE_5k9 = 4,
	MODE_6k7 = 5,
	MODE_7k4 = 6,
	MODE_7k95 = 7,
	MODE_DTX = 8,
	NO_DATA = 15 ///< no transmission,
	N_MODES = 10
}
enum Mode {
	MODE_12k65 = 0,
	MODE_14k25 = 1,
	MODE_15k85 = 2,
	MODE_18k25 = 3,
	MODE_19k85 = 4,
	MODE_23k05 = 5,
	MODE_23k85 = 6,
	MODE_6k60 = 0 ///< 6.60 kbit/s,
	MODE_8k85 = 8,
	MODE_SID = 9,
	NO_DATA = 10,
	SP_LOST = 14 ///< speech lost
}
enum __anonabaab21c0103 {
}
enum APECompressionLevel {
	COMPRESSION_LEVEL_EXTRA_HIGH = 4000,
	COMPRESSION_LEVEL_FAST = 1000,
	COMPRESSION_LEVEL_HIGH = 3000,
	COMPRESSION_LEVEL_INSANE = 5000,
	COMPRESSION_LEVEL_NORMAL = 2000
}
enum __anonabcc1cbc0103 {
	APNG_DISPOSE_OP_BACKGROUND = 1,
	APNG_DISPOSE_OP_NONE = 0,
	APNG_DISPOSE_OP_PREVIOUS = 2
}
enum __anonabcc1cbc0203 {
	APNG_BLEND_OP_OVER = 1,
	APNG_BLEND_OP_SOURCE = 0
}
enum channels {
	LEFT = 0,
	NB_CHANNELS = 1,
	RIGHT = 2
}
enum subbands {
	HF = 0,
	LF = 1,
	MHF = 2,
	MLF = 3,
	NB_SUBBANDS = 4
}
enum __anonbcc036a30103 {
	ASS_ALGN = 0,
	ASS_COLOR = 1,
	ASS_FLT = 2,
	ASS_INT = 3,
	ASS_STR = 4,
	ASS_TIMESTAMP = 5
}
enum Atrac3pChannelUnitTypes {
	CH_UNIT_EXTENSION = 2 ///< unit containing extension information,
	CH_UNIT_MONO = 0 ///< unit containing one coded channel,
	CH_UNIT_STEREO = 1 ///< unit containing two jointly-coded channels,
	CH_UNIT_TERMINATOR = 3 ///< unit sequence terminator
}
enum ATRAC9BlockType {
	ATRAC9_BLOCK_TYPE_CPE = 0,
	ATRAC9_BLOCK_TYPE_LFE = 1,
	ATRAC9_BLOCK_TYPE_SCE = 2
}
enum __anon71d2217e0103 {
	AV1_OBU_FRAME_HEADER = 3,
	AV1_OBU_FRAME = 6,
	AV1_OBU_METADATA = 5,
	AV1_OBU_PADDING = 15,
	AV1_OBU_REDUNDANT_FRAME_HEADER = 7,
	AV1_OBU_SEQUENCE_HEADER = 1,
	AV1_OBU_TEMPORAL_DELIMITER = 2,
	AV1_OBU_TILE_GROUP = 4,
	AV1_OBU_TILE_LIST = 8
}
enum __anon71d2217e0203 {
	AV1_METADATA_TYPE_HDR_CLL = 1,
	AV1_METADATA_TYPE_HDR_MDCV = 2,
	AV1_METADATA_TYPE_ITUT_T35 = 4,
	AV1_METADATA_TYPE_SCALABILITY = 3,
	AV1_METADATA_TYPE_TIMECODE = 5
}
enum __anon71d2217e0303 {
	AV1_FRAME_INTER = 1,
	AV1_FRAME_INTRA_ONLY = 2,
	AV1_FRAME_KEY = 0,
	AV1_FRAME_SWITCH = 3
}
enum __anon71d2217e0403 {
	AV1_REF_FRAME_ALTREF2 = 6,
	AV1_REF_FRAME_ALTREF = 7,
	AV1_REF_FRAME_BWDREF = 5,
	AV1_REF_FRAME_GOLDEN = 4,
	AV1_REF_FRAME_INTRA = 0,
	AV1_REF_FRAME_LAST2 = 2,
	AV1_REF_FRAME_LAST3 = 3,
	AV1_REF_FRAME_LAST = 1
}
enum __anon71d2217e0503 {
	AV1_GM_ABS_ALPHA_BITS = 12,
	AV1_GM_ABS_TRANS_BITS = 12,
	AV1_GM_ABS_TRANS_ONLY_BITS = 9,
	AV1_GM_ALPHA_PREC_BITS = 15,
	AV1_GM_TRANS_ONLY_PREC_BITS = 3,
	AV1_GM_TRANS_PREC_BITS = 6,
	AV1_INTERPOLATION_FILTER_SWITCHABLE = 4,
	AV1_MAX_OPERATING_POINTS = 32,
	AV1_MAX_SB_SIZE = 128,
	AV1_MAX_SEGMENTS = 8,
	AV1_MAX_TILE_AREA = 4096 * 2304,
	AV1_MAX_TILE_COLS = 64,
	AV1_MAX_TILE_ROWS = 64,
	AV1_MAX_TILE_WIDTH = 4096,
	AV1_MI_SIZE = 4,
	AV1_NUM_REF_FRAMES = 8,
	AV1_PRIMARY_REF_NONE = 7,
	AV1_REFS_PER_FRAME = 7,
	AV1_SEG_LVL_ALT_LF_Y_V = 1,
	AV1_SEG_LVL_ALT_Q = 0,
	AV1_SEG_LVL_GLOBAL_MV = 7,
	AV1_SEG_LVL_MAX = 8,
	AV1_SEG_LVL_REF_FRAME = 5,
	AV1_SEG_LVL_SKIP = 6,
	AV1_SELECT_INTEGER_MV = 2,
	AV1_SELECT_SCREEN_CONTENT_TOOLS = 2,
	AV1_SUPERRES_DENOM_MIN = 9,
	AV1_SUPERRES_NUM = 8,
	AV1_TOTAL_REFS_PER_FRAME = 8,
	AV1_WARPEDMODEL_PREC_BITS = 16,
	AV1_WARP_MODEL_AFFINE = 3,
	AV1_WARP_MODEL_IDENTITY = 0,
	AV1_WARP_MODEL_ROTZOOM = 2,
	AV1_WARP_MODEL_TRANSLATION = 1
}
enum __anon71d2217e0603 {
	AV1_CSP_COLOCATED = 2 // -> AVCHROMA_LOC_TOPLEFT.,
	AV1_CSP_UNKNOWN = 0,
	AV1_CSP_VERTICAL = 1 // -> AVCHROMA_LOC_LEFT.
}
enum __anon0ca438130103 {
	INSERT = 0,
	PASS = 1,
	REMOVE = 2
}
enum av1_metadata_codec_ids {
	AV_CODEC_ID_AV1 = 0,
	AV_CODEC_ID_NONE = 1
}
enum pix_fmts_10bit {
}
enum pix_fmts_12bit {
}
enum pix_fmts_8bit {
}
enum AVAudioServiceType {
	AV_AUDIO_SERVICE_TYPE_COMMENTARY = 5,
	AV_AUDIO_SERVICE_TYPE_DIALOGUE = 4,
	AV_AUDIO_SERVICE_TYPE_EFFECTS = 1,
	AV_AUDIO_SERVICE_TYPE_EMERGENCY = 6,
	AV_AUDIO_SERVICE_TYPE_HEARING_IMPAIRED = 3,
	AV_AUDIO_SERVICE_TYPE_KARAOKE = 8,
	AV_AUDIO_SERVICE_TYPE_MAIN = 0,
	AV_AUDIO_SERVICE_TYPE_NB = 7,
	AV_AUDIO_SERVICE_TYPE_VISUALLY_IMPAIRED = 2,
	AV_AUDIO_SERVICE_TYPE_VOICE_OVER = 7
}
enum AVCodecID {
	AV_CODEC_ID_012V = 0,
	AV_CODEC_ID_4GV = 1,
	AV_CODEC_ID_4XM = 2,
	AV_CODEC_ID_8BPS = 3,
	AV_CODEC_ID_8SVX_EXP = 4,
	AV_CODEC_ID_8SVX_FIB = 5,
	AV_CODEC_ID_A64_MULTI5 = 6,
	AV_CODEC_ID_A64_MULTI = 7,
	AV_CODEC_ID_AAC_LATM = 8,
	AV_CODEC_ID_AAC = 9,
	AV_CODEC_ID_AASC = 10,
	AV_CODEC_ID_AC3 = 11,
	AV_CODEC_ID_ADPCM_4XM = 12,
	AV_CODEC_ID_ADPCM_ADX = 13,
	AV_CODEC_ID_ADPCM_AFC = 0x11800,
	AV_CODEC_ID_ADPCM_AICA = 15,
	AV_CODEC_ID_ADPCM_CT = 16,
	AV_CODEC_ID_ADPCM_DTK = 17,
	AV_CODEC_ID_ADPCM_EA_MAXIS_XA = 18,
	AV_CODEC_ID_ADPCM_EA_R1 = 19,
	AV_CODEC_ID_ADPCM_EA_R2 = 20,
	AV_CODEC_ID_ADPCM_EA_R3 = 21,
	AV_CODEC_ID_ADPCM_EA_XAS = 22,
	AV_CODEC_ID_ADPCM_EA = 23,
	AV_CODEC_ID_ADPCM_G722 = 24,
	AV_CODEC_ID_ADPCM_G726LE = 25,
	AV_CODEC_ID_ADPCM_G726 = 26,
	AV_CODEC_ID_ADPCM_IMA_AMV = 27,
	AV_CODEC_ID_ADPCM_IMA_APC = 28,
	AV_CODEC_ID_ADPCM_IMA_DAT4 = 29,
	AV_CODEC_ID_ADPCM_IMA_DK3 = 30,
	AV_CODEC_ID_ADPCM_IMA_DK4 = 31,
	AV_CODEC_ID_ADPCM_IMA_EA_EACS = 32,
	AV_CODEC_ID_ADPCM_IMA_EA_SEAD = 33,
	AV_CODEC_ID_ADPCM_IMA_ISS = 34,
	AV_CODEC_ID_ADPCM_IMA_OKI = 35,
	AV_CODEC_ID_ADPCM_IMA_QT = 0x11000,
	AV_CODEC_ID_ADPCM_IMA_RAD = 37,
	AV_CODEC_ID_ADPCM_IMA_SMJPEG = 38,
	AV_CODEC_ID_ADPCM_IMA_WAV = 39,
	AV_CODEC_ID_ADPCM_IMA_WS = 40,
	AV_CODEC_ID_ADPCM_MS = 41,
	AV_CODEC_ID_ADPCM_MTAF = 42,
	AV_CODEC_ID_ADPCM_PSX = 43,
	AV_CODEC_ID_ADPCM_SBPRO_2 = 44,
	AV_CODEC_ID_ADPCM_SBPRO_3 = 45,
	AV_CODEC_ID_ADPCM_SBPRO_4 = 46,
	AV_CODEC_ID_ADPCM_SWF = 47,
	AV_CODEC_ID_ADPCM_THP_LE = 48,
	AV_CODEC_ID_ADPCM_THP = 49,
	AV_CODEC_ID_ADPCM_VIMA = 50,
	AV_CODEC_ID_ADPCM_XA = 51,
	AV_CODEC_ID_ADPCM_YAMAHA = 52,
	AV_CODEC_ID_AIC = 53,
	AV_CODEC_ID_ALAC = 54,
	AV_CODEC_ID_ALIAS_PIX = 55,
	AV_CODEC_ID_AMR_NB = 0x12000,
	AV_CODEC_ID_AMR_WB = 57,
	AV_CODEC_ID_AMV = 58,
	AV_CODEC_ID_ANM = 59,
	AV_CODEC_ID_ANSI = 60,
	AV_CODEC_ID_APE = 61,
	AV_CODEC_ID_APNG = 62,
	AV_CODEC_ID_APTX_HD = 63,
	AV_CODEC_ID_APTX = 64,
	AV_CODEC_ID_ARBC = 65,
	AV_CODEC_ID_ARIB_CAPTION = 66,
	AV_CODEC_ID_ASS = 67,
	AV_CODEC_ID_ASV1 = 68,
	AV_CODEC_ID_ASV2 = 69,
	AV_CODEC_ID_ATRAC1 = 70,
	AV_CODEC_ID_ATRAC3AL = 71,
	AV_CODEC_ID_ATRAC3PAL = 72,
	AV_CODEC_ID_ATRAC3P = 73,
	AV_CODEC_ID_ATRAC3 = 74,
	AV_CODEC_ID_ATRAC9 = 75,
	AV_CODEC_ID_AURA2 = 76,
	AV_CODEC_ID_AURA = 77,
	AV_CODEC_ID_AV1 = 78,
	AV_CODEC_ID_AVRN = 79,
	AV_CODEC_ID_AVRP = 80,
	AV_CODEC_ID_AVS2 = 81,
	AV_CODEC_ID_AVS = 82,
	AV_CODEC_ID_AVUI = 83,
	AV_CODEC_ID_AYUV = 84,
	AV_CODEC_ID_BETHSOFTVID = 85,
	AV_CODEC_ID_BFI = 86,
	AV_CODEC_ID_BINKAUDIO_DCT = 87,
	AV_CODEC_ID_BINKAUDIO_RDFT = 88,
	AV_CODEC_ID_BINKVIDEO = 89,
	AV_CODEC_ID_BINTEXT = 0x18800,
	AV_CODEC_ID_BIN_DATA = 91,
	AV_CODEC_ID_BITPACKED = 92,
	AV_CODEC_ID_BMP = 93,
	AV_CODEC_ID_BMV_AUDIO = 94,
	AV_CODEC_ID_BMV_VIDEO = 95,
	AV_CODEC_ID_BRENDER_PIX = 96,
	AV_CODEC_ID_C93 = 97,
	AV_CODEC_ID_CAVS = 98,
	AV_CODEC_ID_CDGRAPHICS = 99,
	AV_CODEC_ID_CDXL = 100,
	AV_CODEC_ID_CELT = 101,
	AV_CODEC_ID_CFHD = 102,
	AV_CODEC_ID_CINEPAK = 103,
	AV_CODEC_ID_CLEARVIDEO = 104,
	AV_CODEC_ID_CLJR = 105,
	AV_CODEC_ID_CLLC = 106,
	AV_CODEC_ID_CMV = 107,
	AV_CODEC_ID_CODEC2 = 108,
	AV_CODEC_ID_COMFORT_NOISE = 109,
	AV_CODEC_ID_COOK = 110,
	AV_CODEC_ID_CPIA = 111,
	AV_CODEC_ID_CSCD = 112,
	AV_CODEC_ID_CYUV = 113,
	AV_CODEC_ID_DAALA = 114,
	AV_CODEC_ID_DDS = 115,
	AV_CODEC_ID_DFA = 116,
	AV_CODEC_ID_DIRAC = 117,
	AV_CODEC_ID_DNXHD = 118,
	AV_CODEC_ID_DOLBY_E = 119,
	AV_CODEC_ID_DPX = 120,
	AV_CODEC_ID_DSD_LSBF_PLANAR = 121,
	AV_CODEC_ID_DSD_LSBF = 122,
	AV_CODEC_ID_DSD_MSBF_PLANAR = 123,
	AV_CODEC_ID_DSD_MSBF = 124,
	AV_CODEC_ID_DSICINAUDIO = 125,
	AV_CODEC_ID_DSICINVIDEO = 126,
	AV_CODEC_ID_DSS_SP = 127,
	AV_CODEC_ID_DST = 128,
	AV_CODEC_ID_DTS = 129,
	AV_CODEC_ID_DVAUDIO = 130,
	AV_CODEC_ID_DVB_SUBTITLE = 131,
	AV_CODEC_ID_DVB_TELETEXT = 132,
	AV_CODEC_ID_DVD_NAV = 133,
	AV_CODEC_ID_DVD_SUBTITLE = 0x17000,
	AV_CODEC_ID_DVVIDEO = 135,
	AV_CODEC_ID_DXA = 136,
	AV_CODEC_ID_DXTORY = 137,
	AV_CODEC_ID_DXV = 138,
	AV_CODEC_ID_EAC3 = 139,
	AV_CODEC_ID_EIA_608 = 140,
	AV_CODEC_ID_ESCAPE124 = 141,
	AV_CODEC_ID_ESCAPE130 = 142,
	AV_CODEC_ID_EVRC = 143,
	AV_CODEC_ID_EXR = 144,
	AV_CODEC_ID_FFMETADATA = 0x21000 ///< Dummy codec for streams containing only metadata information.,
	AV_CODEC_ID_FFV1 = 146,
	AV_CODEC_ID_FFVHUFF = 147,
	AV_CODEC_ID_FFWAVESYNTH = 0x15800,
	AV_CODEC_ID_FIC = 149,
	AV_CODEC_ID_FIRST_AUDIO = 0x10000 ///< A dummy id pointing at the start of audio codecs,
	AV_CODEC_ID_FIRST_SUBTITLE = 0x17000 ///< A dummy ID pointing at the start of subtitle codecs.,
	AV_CODEC_ID_FIRST_UNKNOWN = 0x18000 ///< A dummy ID pointing at the start of various fake codecs.,
	AV_CODEC_ID_FITS = 153,
	AV_CODEC_ID_FLAC = 154,
	AV_CODEC_ID_FLASHSV2 = 155,
	AV_CODEC_ID_FLASHSV = 156,
	AV_CODEC_ID_FLIC = 157,
	AV_CODEC_ID_FLV1 = 158,
	AV_CODEC_ID_FMVC = 159,
	AV_CODEC_ID_FRAPS = 160,
	AV_CODEC_ID_FRWU = 161,
	AV_CODEC_ID_G2M = 162,
	AV_CODEC_ID_G723_1 = 163,
	AV_CODEC_ID_G729 = 164,
	AV_CODEC_ID_GDV = 165,
	AV_CODEC_ID_GIF = 166,
	AV_CODEC_ID_GREMLIN_DPCM = 167,
	AV_CODEC_ID_GSM_MS = 168,
	AV_CODEC_ID_GSM = 169,
	AV_CODEC_ID_H261 = 170,
	AV_CODEC_ID_H263I = 171,
	AV_CODEC_ID_H263P = 172,
	AV_CODEC_ID_H263 = 173,
	AV_CODEC_ID_H264 = 174,
	AV_CODEC_ID_HAP = 175,
	AV_CODEC_ID_HCOM = 176,
	AV_CODEC_ID_HDMV_PGS_SUBTITLE = 177,
	AV_CODEC_ID_HDMV_TEXT_SUBTITLE = 178,
	AV_CODEC_ID_HEVC = 179,
	AV_CODEC_ID_HNM4_VIDEO = 180,
	AV_CODEC_ID_HQX = 181,
	AV_CODEC_ID_HQ_HQA = 182,
	AV_CODEC_ID_HUFFYUV = 183,
	AV_CODEC_ID_HYMT = 184,
	AV_CODEC_ID_IAC = 185,
	AV_CODEC_ID_IDCIN = 186,
	AV_CODEC_ID_IDF = 187,
	AV_CODEC_ID_IFF_ILBM = 188,
	AV_CODEC_ID_ILBC = 189,
	AV_CODEC_ID_IMC = 190,
	AV_CODEC_ID_IMM4 = 191,
	AV_CODEC_ID_INDEO2 = 192,
	AV_CODEC_ID_INDEO3 = 193,
	AV_CODEC_ID_INDEO4 = 194,
	AV_CODEC_ID_INDEO5 = 195,
	AV_CODEC_ID_INTERPLAY_ACM = 196,
	AV_CODEC_ID_INTERPLAY_DPCM = 197,
	AV_CODEC_ID_INTERPLAY_VIDEO = 198,
	AV_CODEC_ID_JACOSUB = 199,
	AV_CODEC_ID_JPEG2000 = 200,
	AV_CODEC_ID_JPEGLS = 201,
	AV_CODEC_ID_JV = 202,
	AV_CODEC_ID_KGV1 = 203,
	AV_CODEC_ID_KMVC = 204,
	AV_CODEC_ID_LAGARITH = 205,
	AV_CODEC_ID_LJPEG = 206,
	AV_CODEC_ID_LOCO = 207,
	AV_CODEC_ID_M101 = 208,
	AV_CODEC_ID_MACE3 = 209,
	AV_CODEC_ID_MACE6 = 210,
	AV_CODEC_ID_MAD = 211,
	AV_CODEC_ID_MAGICYUV = 212,
	AV_CODEC_ID_MDEC = 213,
	AV_CODEC_ID_METASOUND = 214,
	AV_CODEC_ID_MICRODVD = 0x17800,
	AV_CODEC_ID_MIMIC = 216,
	AV_CODEC_ID_MJPEGB = 217,
	AV_CODEC_ID_MJPEG = 218,
	AV_CODEC_ID_MLP = 219,
	AV_CODEC_ID_MMVIDEO = 220,
	AV_CODEC_ID_MOTIONPIXELS = 221,
	AV_CODEC_ID_MOV_TEXT = 222,
	AV_CODEC_ID_MP1 = 223,
	AV_CODEC_ID_MP2 = 0x15000,
	AV_CODEC_ID_MP3ADU = 225,
	AV_CODEC_ID_MP3ON4 = 226,
	AV_CODEC_ID_MP3 = 227,
	AV_CODEC_ID_MP4ALS = 228,
	AV_CODEC_ID_MPEG1VIDEO = 229,
	AV_CODEC_ID_MPEG2TS = 0x20000 /**< _FAKE_ codec to indicate a raw MPEG-2 TS,
	AV_CODEC_ID_MPEG2VIDEO = 231,
	AV_CODEC_ID_MPEG4SYSTEMS = 0x20001 /**< _FAKE_ codec to indicate a MPEG-4 Systems,
	AV_CODEC_ID_MPEG4 = 233,
	AV_CODEC_ID_MPL2 = 234,
	AV_CODEC_ID_MSA1 = 235,
	AV_CODEC_ID_MSCC = 236,
	AV_CODEC_ID_MSMPEG4V1 = 237,
	AV_CODEC_ID_MSMPEG4V2 = 238,
	AV_CODEC_ID_MSMPEG4V3 = 239,
	AV_CODEC_ID_MSRLE = 240,
	AV_CODEC_ID_MSS1 = 241,
	AV_CODEC_ID_MSS2 = 242,
	AV_CODEC_ID_MSVIDEO1 = 243,
	AV_CODEC_ID_MSZH = 244,
	AV_CODEC_ID_MTS2 = 245,
	AV_CODEC_ID_MUSEPACK7 = 246,
	AV_CODEC_ID_MUSEPACK8 = 247,
	AV_CODEC_ID_MVC1 = 248,
	AV_CODEC_ID_MVC2 = 249,
	AV_CODEC_ID_MWSC = 250,
	AV_CODEC_ID_MXPEG = 251,
	AV_CODEC_ID_NELLYMOSER = 252,
	AV_CODEC_ID_NONE = 253,
	AV_CODEC_ID_NUV = 254,
	AV_CODEC_ID_ON2AVC = 255,
	AV_CODEC_ID_OPUS = 256,
	AV_CODEC_ID_OTF = 257,
	AV_CODEC_ID_PAF_AUDIO = 258,
	AV_CODEC_ID_PAF_VIDEO = 259,
	AV_CODEC_ID_PAM = 260,
	AV_CODEC_ID_PBM = 261,
	AV_CODEC_ID_PCM_ALAW = 262,
	AV_CODEC_ID_PCM_BLURAY = 263,
	AV_CODEC_ID_PCM_DVD = 264,
	AV_CODEC_ID_PCM_F16LE = 265,
	AV_CODEC_ID_PCM_F24LE = 266,
	AV_CODEC_ID_PCM_F32BE = 267,
	AV_CODEC_ID_PCM_F32LE = 268,
	AV_CODEC_ID_PCM_F64BE = 269,
	AV_CODEC_ID_PCM_F64LE = 270,
	AV_CODEC_ID_PCM_LXF = 271,
	AV_CODEC_ID_PCM_MULAW = 272,
	AV_CODEC_ID_PCM_S16BE_PLANAR = 273,
	AV_CODEC_ID_PCM_S16BE = 274,
	AV_CODEC_ID_PCM_S16LE_PLANAR = 275,
	AV_CODEC_ID_PCM_S16LE = 0x10000,
	AV_CODEC_ID_PCM_S24BE = 277,
	AV_CODEC_ID_PCM_S24DAUD = 278,
	AV_CODEC_ID_PCM_S24LE_PLANAR = 279,
	AV_CODEC_ID_PCM_S24LE = 280,
	AV_CODEC_ID_PCM_S32BE = 281,
	AV_CODEC_ID_PCM_S32LE_PLANAR = 282,
	AV_CODEC_ID_PCM_S32LE = 283,
	AV_CODEC_ID_PCM_S64BE = 284,
	AV_CODEC_ID_PCM_S64LE = 0x10800,
	AV_CODEC_ID_PCM_S8_PLANAR = 286,
	AV_CODEC_ID_PCM_S8 = 287,
	AV_CODEC_ID_PCM_U16BE = 288,
	AV_CODEC_ID_PCM_U16LE = 289,
	AV_CODEC_ID_PCM_U24BE = 290,
	AV_CODEC_ID_PCM_U24LE = 291,
	AV_CODEC_ID_PCM_U32BE = 292,
	AV_CODEC_ID_PCM_U32LE = 293,
	AV_CODEC_ID_PCM_U8 = 294,
	AV_CODEC_ID_PCM_VIDC = 295,
	AV_CODEC_ID_PCM_ZORK = 296,
	AV_CODEC_ID_PCX = 297,
	AV_CODEC_ID_PGMYUV = 298,
	AV_CODEC_ID_PGM = 299,
	AV_CODEC_ID_PICTOR = 300,
	AV_CODEC_ID_PIXLET = 301,
	AV_CODEC_ID_PJS = 302,
	AV_CODEC_ID_PNG = 303,
	AV_CODEC_ID_PPM = 304,
	AV_CODEC_ID_PROBE = 0x19000 ///< codec_id is not known (like AV_CODEC_ID_NONE) but lavf should attempt to identify it,
	AV_CODEC_ID_PRORES = 306,
	AV_CODEC_ID_PROSUMER = 307,
	AV_CODEC_ID_PSD = 308,
	AV_CODEC_ID_PTX = 309,
	AV_CODEC_ID_QCELP = 310,
	AV_CODEC_ID_QDM2 = 311,
	AV_CODEC_ID_QDMC = 312,
	AV_CODEC_ID_QDRAW = 313,
	AV_CODEC_ID_QPEG = 314,
	AV_CODEC_ID_QTRLE = 315,
	AV_CODEC_ID_R10K = 316,
	AV_CODEC_ID_R210 = 317,
	AV_CODEC_ID_RALF = 318,
	AV_CODEC_ID_RASC = 319,
	AV_CODEC_ID_RAWVIDEO = 320,
	AV_CODEC_ID_RA_144 = 0x13000,
	AV_CODEC_ID_RA_288 = 322,
	AV_CODEC_ID_REALTEXT = 323,
	AV_CODEC_ID_RL2 = 324,
	AV_CODEC_ID_ROQ_DPCM = 0x14000,
	AV_CODEC_ID_ROQ = 326,
	AV_CODEC_ID_RPZA = 327,
	AV_CODEC_ID_RSCC = 328,
	AV_CODEC_ID_RV10 = 329,
	AV_CODEC_ID_RV20 = 330,
	AV_CODEC_ID_RV30 = 331,
	AV_CODEC_ID_RV40 = 332,
	AV_CODEC_ID_S302M = 333,
	AV_CODEC_ID_SAMI = 334,
	AV_CODEC_ID_SANM = 335,
	AV_CODEC_ID_SBC = 336,
	AV_CODEC_ID_SCPR = 337,
	AV_CODEC_ID_SCREENPRESSO = 338,
	AV_CODEC_ID_SCTE_35 = 339,
	AV_CODEC_ID_SDX2_DPCM = 0x14800,
	AV_CODEC_ID_SGIRLE = 341,
	AV_CODEC_ID_SGI = 342,
	AV_CODEC_ID_SHEERVIDEO = 343,
	AV_CODEC_ID_SHORTEN = 344,
	AV_CODEC_ID_SIPR = 345,
	AV_CODEC_ID_SMACKAUDIO = 346,
	AV_CODEC_ID_SMACKVIDEO = 347,
	AV_CODEC_ID_SMC = 348,
	AV_CODEC_ID_SMPTE_KLV = 349,
	AV_CODEC_ID_SMVJPEG = 350,
	AV_CODEC_ID_SMV = 351,
	AV_CODEC_ID_SNOW = 352,
	AV_CODEC_ID_SOL_DPCM = 353,
	AV_CODEC_ID_SONIC_LS = 354,
	AV_CODEC_ID_SONIC = 355,
	AV_CODEC_ID_SP5X = 356,
	AV_CODEC_ID_SPEEDHQ = 357,
	AV_CODEC_ID_SPEEX = 358,
	AV_CODEC_ID_SRGC = 359,
	AV_CODEC_ID_SRT = 360,
	AV_CODEC_ID_SSA = 361,
	AV_CODEC_ID_STL = 362,
	AV_CODEC_ID_SUBRIP = 363,
	AV_CODEC_ID_SUBVIEWER1 = 364,
	AV_CODEC_ID_SUBVIEWER = 365,
	AV_CODEC_ID_SUNRAST = 366,
	AV_CODEC_ID_SVG = 367,
	AV_CODEC_ID_SVQ1 = 368,
	AV_CODEC_ID_SVQ3 = 369,
	AV_CODEC_ID_TAK = 370,
	AV_CODEC_ID_TARGA_Y216 = 371,
	AV_CODEC_ID_TARGA = 372,
	AV_CODEC_ID_TDSC = 373,
	AV_CODEC_ID_TEXT = 374,
	AV_CODEC_ID_TGQ = 375,
	AV_CODEC_ID_TGV = 376,
	AV_CODEC_ID_THEORA = 377,
	AV_CODEC_ID_THP = 378,
	AV_CODEC_ID_TIERTEXSEQVIDEO = 379,
	AV_CODEC_ID_TIFF = 380,
	AV_CODEC_ID_TIMED_ID3 = 381,
	AV_CODEC_ID_TMV = 382,
	AV_CODEC_ID_TQI = 383,
	AV_CODEC_ID_TRUEHD = 384,
	AV_CODEC_ID_TRUEMOTION1 = 385,
	AV_CODEC_ID_TRUEMOTION2RT = 386,
	AV_CODEC_ID_TRUEMOTION2 = 387,
	AV_CODEC_ID_TRUESPEECH = 388,
	AV_CODEC_ID_TSCC2 = 389,
	AV_CODEC_ID_TSCC = 390,
	AV_CODEC_ID_TTA = 391,
	AV_CODEC_ID_TTF = 0x18000,
	AV_CODEC_ID_TTML = 393,
	AV_CODEC_ID_TWINVQ = 394,
	AV_CODEC_ID_TXD = 395,
	AV_CODEC_ID_ULTI = 396,
	AV_CODEC_ID_UTVIDEO = 397,
	AV_CODEC_ID_V210X = 398,
	AV_CODEC_ID_V210 = 399,
	AV_CODEC_ID_V308 = 400,
	AV_CODEC_ID_V408 = 401,
	AV_CODEC_ID_V410 = 402,
	AV_CODEC_ID_VBLE = 403,
	AV_CODEC_ID_VB = 404,
	AV_CODEC_ID_VC1IMAGE = 405,
	AV_CODEC_ID_VC1 = 406,
	AV_CODEC_ID_VCR1 = 407,
	AV_CODEC_ID_VIXL = 408,
	AV_CODEC_ID_VMDAUDIO = 409,
	AV_CODEC_ID_VMDVIDEO = 410,
	AV_CODEC_ID_VMNC = 411,
	AV_CODEC_ID_VORBIS = 412,
	AV_CODEC_ID_VP3 = 413,
	AV_CODEC_ID_VP5 = 414,
	AV_CODEC_ID_VP6A = 415,
	AV_CODEC_ID_VP6F = 416,
	AV_CODEC_ID_VP6 = 417,
	AV_CODEC_ID_VP7 = 418,
	AV_CODEC_ID_VP8 = 419,
	AV_CODEC_ID_VP9 = 420,
	AV_CODEC_ID_VPLAYER = 421,
	AV_CODEC_ID_WAVPACK = 422,
	AV_CODEC_ID_WCMV = 423,
	AV_CODEC_ID_WEBP = 424,
	AV_CODEC_ID_WEBVTT = 425,
	AV_CODEC_ID_WESTWOOD_SND1 = 426,
	AV_CODEC_ID_WMALOSSLESS = 427,
	AV_CODEC_ID_WMAPRO = 428,
	AV_CODEC_ID_WMAV1 = 429,
	AV_CODEC_ID_WMAV2 = 430,
	AV_CODEC_ID_WMAVOICE = 431,
	AV_CODEC_ID_WMV1 = 432,
	AV_CODEC_ID_WMV2 = 433,
	AV_CODEC_ID_WMV3IMAGE = 434,
	AV_CODEC_ID_WMV3 = 435,
	AV_CODEC_ID_WNV1 = 436,
	AV_CODEC_ID_WRAPPED_AVFRAME = 0x21001 ///< Passthrough codec AVFrames wrapped in AVPacket,
	AV_CODEC_ID_WS_VQA = 438,
	AV_CODEC_ID_XAN_DPCM = 439,
	AV_CODEC_ID_XAN_WC3 = 440,
	AV_CODEC_ID_XAN_WC4 = 441,
	AV_CODEC_ID_XBIN = 442,
	AV_CODEC_ID_XBM = 443,
	AV_CODEC_ID_XFACE = 444,
	AV_CODEC_ID_XMA1 = 445,
	AV_CODEC_ID_XMA2 = 446,
	AV_CODEC_ID_XPM = 447,
	AV_CODEC_ID_XSUB = 448,
	AV_CODEC_ID_XWD = 449,
	AV_CODEC_ID_Y41P = 0x8000,
	AV_CODEC_ID_YLC = 451,
	AV_CODEC_ID_YOP = 452,
	AV_CODEC_ID_YUV4 = 453,
	AV_CODEC_ID_ZEROCODEC = 454,
	AV_CODEC_ID_ZLIB = 455,
	AV_CODEC_ID_ZMBV = 456
}
enum AVDiscard {
	AVDISCARD_ALL = 48 ///< discard all,
	AVDISCARD_BIDIR = 16 ///< discard all bidirectional frames,
	AVDISCARD_DEFAULT = 0 ///< discard useless packets like 0 size packets in avi,
	AVDISCARD_NONE = -16 ///< discard nothing,
	AVDISCARD_NONINTRA = 24 ///< discard all non intra frames,
	AVDISCARD_NONKEY = 32 ///< discard all frames except keyframes,
	AVDISCARD_NONREF = 8 ///< discard all non reference
}
enum AVFieldOrder {
	AV_FIELD_BB = 0,
	AV_FIELD_BT = 1,
	AV_FIELD_PROGRESSIVE = 2,
	AV_FIELD_TB = 3,
	AV_FIELD_TT = 4,
	AV_FIELD_UNKNOWN = 5
}
enum AVLockOp {
	AV_LOCK_CREATE = 0,
	AV_LOCK_DESTROY = 1,
	AV_LOCK_OBTAIN = 2,
	AV_LOCK_RELEASE = 3
}
enum AVPacketSideDataType {
	AV_PKT_DATA_A53_CC = 0,
	AV_PKT_DATA_AFD = 1,
	AV_PKT_DATA_AUDIO_SERVICE_TYPE = 2,
	AV_PKT_DATA_CONTENT_LIGHT_LEVEL = 3,
	AV_PKT_DATA_CPB_PROPERTIES = 4,
	AV_PKT_DATA_DISPLAYMATRIX = 5,
	AV_PKT_DATA_ENCRYPTION_INFO = 6,
	AV_PKT_DATA_ENCRYPTION_INIT_INFO = 7,
	AV_PKT_DATA_FALLBACK_TRACK = 8,
	AV_PKT_DATA_H263_MB_INFO = 9,
	AV_PKT_DATA_JP_DUALMONO = 10,
	AV_PKT_DATA_MASTERING_DISPLAY_METADATA = 11,
	AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL = 12,
	AV_PKT_DATA_METADATA_UPDATE = 13,
	AV_PKT_DATA_MPEGTS_STREAM_ID = 14,
	AV_PKT_DATA_NB = 15,
	AV_PKT_DATA_NEW_EXTRADATA = 16,
	AV_PKT_DATA_PALETTE = 17,
	AV_PKT_DATA_PARAM_CHANGE = 18,
	AV_PKT_DATA_QUALITY_STATS = 19,
	AV_PKT_DATA_REPLAYGAIN = 20,
	AV_PKT_DATA_SKIP_SAMPLES = 21,
	AV_PKT_DATA_SPHERICAL = 22,
	AV_PKT_DATA_STEREO3D = 23,
	AV_PKT_DATA_STRINGS_METADATA = 24,
	AV_PKT_DATA_SUBTITLE_POSITION = 25,
	AV_PKT_DATA_WEBVTT_IDENTIFIER = 26,
	AV_PKT_DATA_WEBVTT_SETTINGS = 27
}
enum AVPictureStructure {
	AV_PICTURE_STRUCTURE_BOTTOM_FIELD = 0,
	AV_PICTURE_STRUCTURE_FRAME = 1,
	AV_PICTURE_STRUCTURE_TOP_FIELD = 2,
	AV_PICTURE_STRUCTURE_UNKNOWN = 3
}
enum AVSideDataParamChangeFlags {
	AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT = 0x0001,
	AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_LAYOUT = 0x0002,
	AV_SIDE_DATA_PARAM_CHANGE_DIMENSIONS = 0x0008,
	AV_SIDE_DATA_PARAM_CHANGE_SAMPLE_RATE = 0x0004
}
enum AVSubtitleType {
	SUBTITLE_ASS = 0,
	SUBTITLE_BITMAP = 1,
	SUBTITLE_NONE = 2,
	SUBTITLE_TEXT = 3
}
enum __anon09528acb0103 {
	AV_CODEC_HW_CONFIG_METHOD_AD_HOC = 0x08,
	AV_CODEC_HW_CONFIG_METHOD_HW_DEVICE_CTX = 0x01,
	AV_CODEC_HW_CONFIG_METHOD_HW_FRAMES_CTX = 0x02,
	AV_CODEC_HW_CONFIG_METHOD_INTERNAL = 0x04
}
enum DCTTransformType {
	DCT_III = 0,
	DCT_II = 0,
	DCT_I = 2,
	DST_I = 3
}
enum RDFTransformType {
	DFT_C2R = 0,
	DFT_R2C = 1,
	IDFT_C2R = 2,
	IDFT_R2C = 3
}
enum __anon71d33a3b0103 {
	AVS_AUDIO = 0x02,
	AVS_GAME_DATA = 0x04,
	AVS_PALETTE = 0x03,
	AVS_VIDEO = 0x01
}
enum __anon71d33a3b0203 {
	AVS_I_FRAME = 0x00,
	AVS_P_FRAME_2X2 = 0x02,
	AVS_P_FRAME_2X3 = 0x03,
	AVS_P_FRAME_3X3 = 0x01
}
enum BethsoftVidBlockType {
	AUDIO_BLOCK = 0x7d,
	EOF_BLOCK = 0x14,
	FIRST_AUDIO_BLOCK = 0x7c,
	PALETTE_BLOCK = 0x02,
	VIDEO_I_FRAME = 0x03,
	VIDEO_P_FRAME = 0x01,
	VIDEO_YOFF_P_FRAME = 0x04
}
enum BlockTypes {
	FILL_BLOCK = 0,
	INTER_BLOCK = 1,
	INTRA_BLOCK = 2,
	MOTION_BLOCK = 3,
	PATTERN_BLOCK = 4,
	RAW_BLOCK = 5,
	RESIDUE_BLOCK = 6,
	RUN_BLOCK = 7,
	SCALED_BLOCK = 8,
	SKIP_BLOCK = 0 ///< skipped block
}
enum OldSources {
	BINKB_NB_SRC = 0,
	BINKB_SRC_BLOCK_TYPES = 0 ///< 8x8 block types,
	BINKB_SRC_COLORS = 2,
	BINKB_SRC_INTER_COEFS = 3,
	BINKB_SRC_INTER_DC = 4,
	BINKB_SRC_INTER_Q = 5,
	BINKB_SRC_INTRA_DC = 6,
	BINKB_SRC_INTRA_Q = 7,
	BINKB_SRC_PATTERN = 8,
	BINKB_SRC_X_OFF = 9,
	BINKB_SRC_Y_OFF = 10
}
enum Sources {
	BINK_NB_SRC = 0,
	BINK_SRC_BLOCK_TYPES = 0 ///< 8x8 block types,
	BINK_SRC_COLORS = 2,
	BINK_SRC_INTER_DC = 3,
	BINK_SRC_INTRA_DC = 4,
	BINK_SRC_PATTERN = 5,
	BINK_SRC_RUN = 6,
	BINK_SRC_SUB_BLOCK_TYPES = 7,
	BINK_SRC_X_OFF = 8,
	BINK_SRC_Y_OFF = 9
}
enum __anon71e056950103 {
	BMP_BITFIELDS = 3,
	BMP_RGB = 0,
	BMP_RLE4 = 2,
	BMP_RLE8 = 1
}
enum BMVFlags {
	BMV_AUDIO = 0x20,
	BMV_COMMAND = 0x10,
	BMV_DELTA = 2,
	BMV_END = 3,
	BMV_EXT = 0x40,
	BMV_INTRA = 5,
	BMV_NOP = 0,
	BMV_PALETTE = 0x08,
	BMV_PRINT = 0x80,
	BMV_SCROLL = 0x04
}
enum __anon71d4e7e00103 {
	C93_4X4_2COLOR = 0x0A,
	C93_4X4_4COLOR_GRP = 0x0B,
	C93_4X4_4COLOR = 0x0D,
	C93_4X4_FROM_CURR = 0x07,
	C93_4X4_FROM_PREV = 0x06,
	C93_8X8_2COLOR = 0x08,
	C93_8X8_FROM_PREV = 0x02,
	C93_8X8_INTRA = 0x0F,
	C93_NOOP = 0x0E
}
enum cavs_block {
	BLK_16X16 = 0,
	BLK_16X8 = 1,
	BLK_8X16 = 2,
	BLK_8X8 = 3
}
enum cavs_intra_chroma {
	INTRA_C_DC_128 = 0,
	INTRA_C_HORIZ = 1,
	INTRA_C_LP_LEFT = 2,
	INTRA_C_LP_TOP = 3,
	INTRA_C_LP = 4,
	INTRA_C_PLANE = 5,
	INTRA_C_VERT = 6
}
enum cavs_intra_luma {
	INTRA_L_DC_128 = 0,
	INTRA_L_DOWN_LEFT = 1,
	INTRA_L_DOWN_RIGHT = 2,
	INTRA_L_HORIZ = 3,
	INTRA_L_LP_LEFT = 4,
	INTRA_L_LP_TOP = 5,
	INTRA_L_LP = 6,
	INTRA_L_VERT = 7
}
enum cavs_mb {
	B_8X8 = 29,
	B_BWD_16X16 = 1,
	B_DIRECT = 2,
	B_FWD_16X16 = 3,
	B_SKIP = 4,
	B_SYM_16X16 = 5,
	I_8X8 = 0,
	P_16X16 = 7,
	P_16X8 = 8,
	P_8X16 = 9,
	P_8X8 = 10,
	P_SKIP = 11
}
enum cavs_mv_loc {
	MV_BWD_A1 = 0,
	MV_BWD_A3 = MV_BWD_OFFS+8,
	MV_BWD_B2 = 2,
	MV_BWD_B3 = 3,
	MV_BWD_C2 = 4,
	MV_BWD_D3 = MV_BWD_OFFS,
	MV_BWD_X0 = 6,
	MV_BWD_X1 = 7,
	MV_BWD_X2 = 8,
	MV_BWD_X3 = 9,
	MV_FWD_A1 = 10,
	MV_FWD_A3 = 8,
	MV_FWD_B2 = 12,
	MV_FWD_B3 = 13,
	MV_FWD_C2 = 14,
	MV_FWD_D3 = 0,
	MV_FWD_X0 = 16,
	MV_FWD_X1 = 17,
	MV_FWD_X2 = 18,
	MV_FWD_X3 = 19
}
enum cavs_mv_pred {
	MV_PRED_BSKIP = 0,
	MV_PRED_LEFT = 1,
	MV_PRED_MEDIAN = 2,
	MV_PRED_PSKIP = 3,
	MV_PRED_TOPRIGHT = 4,
	MV_PRED_TOP = 5
}
enum cavs_sub_mb {
	B_SUB_BWD = 0,
	B_SUB_DIRECT = 1,
	B_SUB_FWD = 2,
	B_SUB_SYM = 3
}
enum ff_cbs_all_codec_ids {
	AV_CODEC_ID_AV1 = 0,
	AV_CODEC_ID_H264 = 1,
	AV_CODEC_ID_H265 = 2,
	AV_CODEC_ID_MJPEG = 3,
	AV_CODEC_ID_MPEG2VIDEO = 4,
	AV_CODEC_ID_NONE = 5,
	AV_CODEC_ID_VP9 = 6
}
enum __anon1c1ada910103 {
	H264_MAX_SEI_PAYLOADS = 64
}
enum __anon1c1aded20103 {
	H265_MAX_SEI_PAYLOADS = 64
}
enum __anon2541b9d30103 {
	JPEG_MARKER_APPN = 0xe0,
	JPEG_MARKER_COM = 0xfe,
	JPEG_MARKER_DHT = 0xc4,
	JPEG_MARKER_DQT = 0xdb,
	JPEG_MARKER_EOI = 0xd9,
	JPEG_MARKER_JPGN = 0xf0,
	JPEG_MARKER_SOF0 = 0xc0,
	JPEG_MARKER_SOF1 = 0xc1,
	JPEG_MARKER_SOF2 = 0xc2,
	JPEG_MARKER_SOF3 = 0xc3,
	JPEG_MARKER_SOI = 0xd8,
	JPEG_MARKER_SOS = 0xda
}
enum __anon2541b9d30203 {
	JPEG_MAX_COMPONENTS = 255,
	JPEG_MAX_HEIGHT = 65535,
	JPEG_MAX_WIDTH = 65535
}
enum __anonb467b4680103 {
	MPEG2_START_EXTENSION = 0xb5,
	MPEG2_START_GROUP = 0xb8,
	MPEG2_START_PICTURE = 0x00,
	MPEG2_START_SEQUENCE_END = 0xb7,
	MPEG2_START_SEQUENCE_ERROR = 0xb4,
	MPEG2_START_SEQUENCE_HEADER = 0xb3,
	MPEG2_START_SLICE_MAX = 0xaf,
	MPEG2_START_SLICE_MIN = 0x01,
	MPEG2_START_USER_DATA = 0xb2
}
enum __anonb467b4680203 {
	MPEG2_EXTENSION_CAMAERA_PARAMETERS = 0xb,
	MPEG2_EXTENSION_COPYRIGHT = 0x4,
	MPEG2_EXTENSION_ITU_T = 0xc,
	MPEG2_EXTENSION_PICTURE_CODING = 0x8,
	MPEG2_EXTENSION_PICTURE_DISPLAY = 0x7,
	MPEG2_EXTENSION_PICTURE_SPATIAL_SCALABLE = 0x9,
	MPEG2_EXTENSION_PICTURE_TEMPORAL_SCALABLE = 0xa,
	MPEG2_EXTENSION_QUANT_MATRIX = 0x3,
	MPEG2_EXTENSION_SEQUENCE_DISPLAY = 0x2,
	MPEG2_EXTENSION_SEQUENCE_SCALABLE = 0x5,
	MPEG2_EXTENSION_SEQUENCE = 0x1
}
enum __anon28c31bcc0103 {
	VP9_MAX_REF_FRAMES = 4,
	VP9_MAX_SEGMENTS = 8,
	VP9_MAX_TILE_WIDTH_B64 = 64,
	VP9_MIN_TILE_WIDTH_B64 = 4,
	VP9_NUM_REF_FRAMES = 8,
	VP9_REFS_PER_FRAME = 3,
	VP9_SEG_LVL_MAX = 4
}
enum __anon28c31bcc0203 {
	VP9_KEY_FRAME = 0,
	VP9_NON_KEY_FRAME = 1
}
enum __anon28c31bcc0303 {
	VP9_FRAME_SYNC_0 = 0x49,
	VP9_FRAME_SYNC_1 = 0x83,
	VP9_FRAME_SYNC_2 = 0x42
}
enum __anon28c31bcc0403 {
	VP9_CS_BT_2020 = 5,
	VP9_CS_BT_601 = 1,
	VP9_CS_BT_709 = 2,
	VP9_CS_RESERVED = 6,
	VP9_CS_RGB = 7,
	VP9_CS_SMPTE_170 = 3,
	VP9_CS_SMPTE_240 = 4,
	VP9_CS_UNKNOWN = 0
}
enum __anon28c31bcc0503 {
	VP9_ALTREF_FRAME = 3,
	VP9_GOLDEN_FRAME = 2,
	VP9_INTRA_FRAME = 0,
	VP9_LAST_FRAME = 1
}
enum __anon28c31bcc0603 {
	VP9_MAX_FRAMES_IN_SUPERFRAME = 8,
	VP9_SUPERFRAME_MARKER = 6
}
enum cc_charset {
	CCSET_BASIC_AMERICAN = 0,
	CCSET_EXTENDED_PORTUGUESE_GERMAN_DANISH = 1,
	CCSET_EXTENDED_SPANISH_FRENCH_MISC = 2,
	CCSET_SPECIAL_AMERICAN = 3
}
enum cc_color_code {
	CCCOL_BLACK = 0,
	CCCOL_BLUE = 1,
	CCCOL_CYAN = 2,
	CCCOL_GREEN = 3,
	CCCOL_MAGENTA = 4,
	CCCOL_RED = 5,
	CCCOL_TRANSPARENT = 6,
	CCCOL_USERDEFINED = 7,
	CCCOL_WHITE = 8,
	CCCOL_YELLOW = 9
}
enum cc_font {
	CCFONT_ITALICS = 0,
	CCFONT_REGULAR = 1,
	CCFONT_UNDERLINED_ITALICS = 2,
	CCFONT_UNDERLINED = 3
}
enum cc_mode {
	CCMODE_PAINTON = 0,
	CCMODE_POPON = 1,
	CCMODE_ROLLUP = 2,
	CCMODE_TEXT = 3
}
enum CFHDParam {
	BitsPerComponent = 101,
	ChannelCount = 12,
	ChannelHeight = 105,
	ChannelNumber = 62,
	ChannelWidth = 104,
	ImageHeight = 21,
	ImageWidth = 20,
	LowpassPrecision = 35,
	PrescaleShift = 109,
	Quantization = 53,
	SampleFlags = 68,
	SubbandCount = 14,
	SubbandNumber = 48
}
enum CinepakMode {
	MODE_COUNT = 0,
	MODE_MC = 1,
	MODE_V1_ONLY = 0,
	MODE_V1_V4 = 3
}
enum mb_encoding {
	ENC_SKIP = 0,
	ENC_UNCERTAIN = 1,
	ENC_V1 = 2,
	ENC_V4 = 3
}
enum __anon1d7a627f0103 {
	RET_COPY_AGAIN = 1,
	RET_ERROR = -1,
	RET_OK = 0
}
enum pix_fmts {
}
enum pix_fmts {
}
enum DCADownMixType {
	DCA_DMIX_TYPE_1_0 = 0,
	DCA_DMIX_TYPE_2_1 = 1,
	DCA_DMIX_TYPE_2_2 = 2,
	DCA_DMIX_TYPE_3_0 = 3,
	DCA_DMIX_TYPE_3_1 = 4,
	DCA_DMIX_TYPE_COUNT = 5,
	DCA_DMIX_TYPE_LoRo = 6,
	DCA_DMIX_TYPE_LtRt = 7
}
enum DCAExtensionMask {
	DCA_CSS_CORE = 0x001,
	DCA_CSS_MASK = 0x00f,
	DCA_CSS_X96 = 0x004,
	DCA_CSS_XCH = 0x008,
	DCA_CSS_XXCH = 0x002,
	DCA_EXSS_CORE = 0x010,
	DCA_EXSS_LBR = 0x100,
	DCA_EXSS_MASK = 0xff0,
	DCA_EXSS_RSV1 = 0x400,
	DCA_EXSS_RSV2 = 0x800,
	DCA_EXSS_X96 = 0x080,
	DCA_EXSS_XBR = 0x020,
	DCA_EXSS_XLL = 0x200,
	DCA_EXSS_XXCH = 0x040
}
enum DCAParseError {
	DCA_PARSE_ERROR_AMODE = -5,
	DCA_PARSE_ERROR_DEFICIT_SAMPLES = -2,
	DCA_PARSE_ERROR_FRAME_SIZE = -4,
	DCA_PARSE_ERROR_LFE_FLAG = -8,
	DCA_PARSE_ERROR_PCM_BLOCKS = -3,
	DCA_PARSE_ERROR_PCM_RES = -9,
	DCA_PARSE_ERROR_RESERVED_BIT = -7,
	DCA_PARSE_ERROR_SAMPLE_RATE = -6,
	DCA_PARSE_ERROR_SYNC_WORD = -1
}
enum DCARepresentationType {
	DCA_REPR_TYPE_LhRh = 3,
	DCA_REPR_TYPE_LtRt = 2
}
enum DCASpeakerMask {
	DCA_SPEAKER_MASK_Chr = 0x00400000,
	DCA_SPEAKER_MASK_Ch = 0x00004000,
	DCA_SPEAKER_MASK_Cl = 0x02000000,
	DCA_SPEAKER_MASK_Cs = 0x00000040,
	DCA_SPEAKER_MASK_C = 0x00000001,
	DCA_SPEAKER_MASK_LFE1 = 0x00000020,
	DCA_SPEAKER_MASK_LFE2 = 0x00010000,
	DCA_SPEAKER_MASK_Lc = 0x00000800,
	DCA_SPEAKER_MASK_Lhr = 0x00800000,
	DCA_SPEAKER_MASK_Lhs = 0x00100000,
	DCA_SPEAKER_MASK_Lh = 0x00002000,
	DCA_SPEAKER_MASK_Ll = 0x04000000,
	DCA_SPEAKER_MASK_Lsr = 0x00000080,
	DCA_SPEAKER_MASK_Lss = 0x00000200,
	DCA_SPEAKER_MASK_Ls = 0x00000008,
	DCA_SPEAKER_MASK_Lw = 0x00020000,
	DCA_SPEAKER_MASK_L = 0x00000002,
	DCA_SPEAKER_MASK_Oh = 0x00080000,
	DCA_SPEAKER_MASK_Rc = 0x00001000,
	DCA_SPEAKER_MASK_Rhr = 0x01000000,
	DCA_SPEAKER_MASK_Rhs = 0x00200000,
	DCA_SPEAKER_MASK_Rh = 0x00008000,
	DCA_SPEAKER_MASK_Rl = 0x08000000,
	DCA_SPEAKER_MASK_Rsr = 0x00000100,
	DCA_SPEAKER_MASK_Rss = 0x00000400,
	DCA_SPEAKER_MASK_Rs = 0x00000010,
	DCA_SPEAKER_MASK_Rw = 0x00040000,
	DCA_SPEAKER_MASK_R = 0x00000004
}
enum DCASpeakerPair {
	DCA_SPEAKER_PAIR_Chr = 0x4000,
	DCA_SPEAKER_PAIR_Ch = 0x0080,
	DCA_SPEAKER_PAIR_Cs = 0x0010,
	DCA_SPEAKER_PAIR_C = 0x0001,
	DCA_SPEAKER_PAIR_LFE1 = 0x0008,
	DCA_SPEAKER_PAIR_LFE2 = 0x1000,
	DCA_SPEAKER_PAIR_LR = 0x0002,
	DCA_SPEAKER_PAIR_LcRc = 0x0200,
	DCA_SPEAKER_PAIR_LhRh = 0x0020,
	DCA_SPEAKER_PAIR_LhrRhr = 0x8000,
	DCA_SPEAKER_PAIR_LhsRhs = 0x2000,
	DCA_SPEAKER_PAIR_LsRs = 0x0004,
	DCA_SPEAKER_PAIR_LsrRsr = 0x0040,
	DCA_SPEAKER_PAIR_LssRss = 0x0800,
	DCA_SPEAKER_PAIR_LwRw = 0x0400,
	DCA_SPEAKER_PAIR_Oh = 0x0100
}
enum DCASpeaker {
	DCA_SPEAKER_COUNT = 0,
	DCA_SPEAKER_Chr = 1,
	DCA_SPEAKER_Ch = 2,
	DCA_SPEAKER_Cl = 3,
	DCA_SPEAKER_Cs = 4,
	DCA_SPEAKER_C = 5,
	DCA_SPEAKER_LFE1 = 6,
	DCA_SPEAKER_LFE2 = 7,
	DCA_SPEAKER_Lc = 8,
	DCA_SPEAKER_Lhr = 9,
	DCA_SPEAKER_Lhs = 10,
	DCA_SPEAKER_Lh = 11,
	DCA_SPEAKER_Ll = 12,
	DCA_SPEAKER_Lsr = 13,
	DCA_SPEAKER_Lss = 14,
	DCA_SPEAKER_Ls = 15,
	DCA_SPEAKER_Lw = 16,
	DCA_SPEAKER_L = 17,
	DCA_SPEAKER_Oh = 18,
	DCA_SPEAKER_RSV1 = 19,
	DCA_SPEAKER_RSV2 = 20,
	DCA_SPEAKER_RSV3 = 21,
	DCA_SPEAKER_RSV4 = 22,
	DCA_SPEAKER_Rc = 23,
	DCA_SPEAKER_Rhr = 24,
	DCA_SPEAKER_Rhs = 25,
	DCA_SPEAKER_Rh = 26,
	DCA_SPEAKER_Rl = 27,
	DCA_SPEAKER_Rsr = 28,
	DCA_SPEAKER_Rss = 29,
	DCA_SPEAKER_Rs = 30,
	DCA_SPEAKER_Rw = 31,
	DCA_SPEAKER_R = 32
}
enum HeaderType {
	HEADER_CORE = 0,
	HEADER_XCH = 1,
	HEADER_XXCH = 2
}
enum DCACoreAudioMode {
	DCA_AMODE_2F1R = 0,
	DCA_AMODE_2F2R = 1,
	DCA_AMODE_3F1R = 2,
	DCA_AMODE_3F2R = 3,
	DCA_AMODE_3F = 4,
	DCA_AMODE_COUNT = 5,
	DCA_AMODE_MONO_DUAL = 6,
	DCA_AMODE_MONO = 7,
	DCA_AMODE_STEREO_SUMDIFF = 8,
	DCA_AMODE_STEREO_TOTAL = 9,
	DCA_AMODE_STEREO = 10
}
enum DCACoreExtAudioType {
	DCA_EXT_AUDIO_X96 = 2,
	DCA_EXT_AUDIO_XCH = 0,
	DCA_EXT_AUDIO_XXCH = 6
}
enum DCACoreLFEFlag {
	DCA_LFE_FLAG_128 = 0,
	DCA_LFE_FLAG_64 = 1,
	DCA_LFE_FLAG_INVALID = 2,
	DCA_LFE_FLAG_NONE = 3
}
enum codec_ids {
	AV_CODEC_ID_DTS = 0,
	AV_CODEC_ID_NONE = 1
}
enum LBRChunkTypes {
	LBR_CHUNK_ECS = 0x0b,
	LBR_CHUNK_EXTENSION = 0x7f,
	LBR_CHUNK_FRAME_NO_CSUM = 0x06,
	LBR_CHUNK_FRAME = 0x04,
	LBR_CHUNK_LFE = 0x0a,
	LBR_CHUNK_NULL = 0x00,
	LBR_CHUNK_PAD = 0x01,
	LBR_CHUNK_RESERVED_1 = 0x0c,
	LBR_CHUNK_RESERVED_2 = 0x0d,
	LBR_CHUNK_RES_GRID_HR_LAST = 0x4f,
	LBR_CHUNK_RES_GRID_HR = 0x40,
	LBR_CHUNK_RES_GRID_LR_LAST = 0x3f,
	LBR_CHUNK_RES_GRID_LR = 0x30,
	LBR_CHUNK_RES_TS_1_LAST = 0x5f,
	LBR_CHUNK_RES_TS_1 = 0x50,
	LBR_CHUNK_RES_TS_2_LAST = 0x6f,
	LBR_CHUNK_RES_TS_2 = 0x60,
	LBR_CHUNK_SCF = 0x0e,
	LBR_CHUNK_TONAL_GRP_1 = 0x11,
	LBR_CHUNK_TONAL_GRP_2 = 0x12,
	LBR_CHUNK_TONAL_GRP_3 = 0x13,
	LBR_CHUNK_TONAL_GRP_4 = 0x14,
	LBR_CHUNK_TONAL_GRP_5 = 0x15,
	LBR_CHUNK_TONAL_SCF_GRP_1 = 0x17,
	LBR_CHUNK_TONAL_SCF_GRP_2 = 0x18,
	LBR_CHUNK_TONAL_SCF_GRP_3 = 0x19,
	LBR_CHUNK_TONAL_SCF_GRP_4 = 0x1a,
	LBR_CHUNK_TONAL_SCF_GRP_5 = 0x1b,
	LBR_CHUNK_TONAL_SCF = 0x16,
	LBR_CHUNK_TONAL = 0x10
}
enum LBRFlags {
	LBR_FLAG_24_BIT = 0x01,
	LBR_FLAG_BAND_LIMIT_1_2 = 0x08,
	LBR_FLAG_BAND_LIMIT_1_3 = 0x0c,
	LBR_FLAG_BAND_LIMIT_1_4 = 0x10,
	LBR_FLAG_BAND_LIMIT_1_8 = 0x18,
	LBR_FLAG_BAND_LIMIT_2_3 = 0x04,
	LBR_FLAG_BAND_LIMIT_MASK = 0x1c,
	LBR_FLAG_BAND_LIMIT_NONE = 0x14,
	LBR_FLAG_DMIX_MULTI_CH = 0x40,
	LBR_FLAG_DMIX_STEREO = 0x20,
	LBR_FLAG_LFE_PRESENT = 0x02
}
enum DCALBRHeader {
	DCA_LBR_HEADER_DECODER_INIT = 2,
	DCA_LBR_HEADER_SYNC_ONLY = 1
}
enum DDSDXGIFormat {
	DXGI_FORMAT_B5G6R5_UNORM = 85,
	DXGI_FORMAT_B8G8R8A8_TYPELESS = 90,
	DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 91,
	DXGI_FORMAT_B8G8R8A8_UNORM = 87,
	DXGI_FORMAT_B8G8R8X8_TYPELESS = 92,
	DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 93,
	DXGI_FORMAT_B8G8R8X8_UNORM = 88,
	DXGI_FORMAT_BC1_TYPELESS = 70,
	DXGI_FORMAT_BC1_UNORM_SRGB = 72,
	DXGI_FORMAT_BC1_UNORM = 71,
	DXGI_FORMAT_BC2_TYPELESS = 73,
	DXGI_FORMAT_BC2_UNORM_SRGB = 75,
	DXGI_FORMAT_BC2_UNORM = 74,
	DXGI_FORMAT_BC3_TYPELESS = 76,
	DXGI_FORMAT_BC3_UNORM_SRGB = 78,
	DXGI_FORMAT_BC3_UNORM = 77,
	DXGI_FORMAT_BC4_SNORM = 81,
	DXGI_FORMAT_BC4_TYPELESS = 79,
	DXGI_FORMAT_BC4_UNORM = 80,
	DXGI_FORMAT_BC5_SNORM = 84,
	DXGI_FORMAT_BC5_TYPELESS = 82,
	DXGI_FORMAT_BC5_UNORM = 83,
	DXGI_FORMAT_R16G16B16A16_FLOAT = 10,
	DXGI_FORMAT_R16G16B16A16_SINT = 14,
	DXGI_FORMAT_R16G16B16A16_SNORM = 13,
	DXGI_FORMAT_R16G16B16A16_TYPELESS = 9,
	DXGI_FORMAT_R16G16B16A16_UINT = 12,
	DXGI_FORMAT_R16G16B16A16_UNORM = 11,
	DXGI_FORMAT_R8G8B8A8_SINT = 32,
	DXGI_FORMAT_R8G8B8A8_SNORM = 31,
	DXGI_FORMAT_R8G8B8A8_TYPELESS = 27,
	DXGI_FORMAT_R8G8B8A8_UINT = 30,
	DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 29,
	DXGI_FORMAT_R8G8B8A8_UNORM = 28
}
enum DDSPostProc {
	DDS_ALPHA_EXP = 0,
	DDS_NONE = 0,
	DDS_NORMAL_MAP = 2,
	DDS_RAW_YCOCG = 3,
	DDS_SWAP_ALPHA = 4,
	DDS_SWIZZLE_A2XY = 5,
	DDS_SWIZZLE_RBXG = 6,
	DDS_SWIZZLE_RGXB = 7,
	DDS_SWIZZLE_RXBG = 8,
	DDS_SWIZZLE_RXGB = 9,
	DDS_SWIZZLE_XGBR = 10,
	DDS_SWIZZLE_XGXR = 11,
	DDS_SWIZZLE_XRBG = 12
}
enum dirac_pix_fmt {
}
enum dirac_primaries {
	AVCOL_PRI_BT470BG = 0,
	AVCOL_PRI_BT709 = 1,
	AVCOL_PRI_SMPTE170M = 2
}
enum DiracParseCodes {
	DIRAC_PCODE_AUX = 0x20,
	DIRAC_PCODE_END_SEQ = 0x10,
	DIRAC_PCODE_INTER_NOREF_CO1 = 0x0A,
	DIRAC_PCODE_INTER_NOREF_CO2 = 0x09,
	DIRAC_PCODE_INTER_REF_CO1 = 0x0D,
	DIRAC_PCODE_INTER_REF_CO2 = 0x0E,
	DIRAC_PCODE_INTRA_REF_CO = 0x0C,
	DIRAC_PCODE_INTRA_REF_PICT = 0xCC,
	DIRAC_PCODE_INTRA_REF_RAW = 0x4C,
	DIRAC_PCODE_MAGIC = 0x42424344,
	DIRAC_PCODE_PAD = 0x30,
	DIRAC_PCODE_PICTURE_CODED = 0x08,
	DIRAC_PCODE_PICTURE_HQ = 0xE8,
	DIRAC_PCODE_PICTURE_LOW_DEL = 0xC8,
	DIRAC_PCODE_PICTURE_RAW = 0x48,
	DIRAC_PCODE_SEQ_HEADER = 0x00
}
enum dirac_arith_contexts {
	CTX_COEFF_DATA = 0,
	CTX_DELTA_Q_DATA = 1,
	CTX_DELTA_Q_F = 2,
	CTX_DELTA_Q_SIGN = 3,
	CTX_NPNN_F1 = 4,
	CTX_NPZN_F1 = 5,
	CTX_NP_F2 = 6,
	CTX_NP_F3 = 7,
	CTX_NP_F4 = 8,
	CTX_NP_F5 = 9,
	CTX_NP_F6 = 10,
	CTX_SIGN_NEG = 11,
	CTX_SIGN_POS = 12,
	CTX_SIGN_ZERO = 13,
	CTX_ZERO_BLOCK = 14,
	CTX_ZPNN_F1 = 15,
	CTX_ZPZN_F1 = 16,
	CTX_ZP_F2 = 17,
	CTX_ZP_F3 = 18,
	CTX_ZP_F4 = 19,
	CTX_ZP_F5 = 20,
	CTX_ZP_F6 = 21,
	DIRAC_CTX_COUNT = 22
}
enum dwt_type {
	DWT_DIRAC_DAUB9_7 = 0,
	DWT_DIRAC_DD13_7 = 1,
	DWT_DIRAC_DD9_7 = 2,
	DWT_DIRAC_FIDELITY = 3,
	DWT_DIRAC_HAAR0 = 4,
	DWT_DIRAC_HAAR1 = 5,
	DWT_DIRAC_LEGALL5_3 = 6,
	DWT_NUM_TYPES = 7,
	DWT_SNOW_DAUB9_7 = 8,
	DWT_SNOW_LEGALL5_3 = 9
}
enum dirac_subband {
	subband_hh = 3,
	subband_hl = 1,
	subband_lh = 2,
	subband_ll = 0,
	subband_nb = 4
}
enum CinVideoBitmapIndex {
	CIN_CUR_BMP = 0 /* current */,
	CIN_INT_BMP = 2 /* intermediate */,
	CIN_PRE_BMP = 1 /* previous */
}
enum DumpFreq {
	DUMP_FREQ_ALL = 0,
	DUMP_FREQ_KEYFRAME = 1
}
enum dv_pack_type {
	dv_audio_control = 0x51,
	dv_audio_recdate = 0x52,
	dv_audio_rectime = 0x53,
	dv_audio_source = 0x50,
	dv_header525 = 0x3f /* see dv_write_pack for important details on */,
	dv_header625 = 0xbf /* these two packs */,
	dv_timecode = 0x13,
	dv_unknown_pack = 0xff,
	dv_video_control = 0x61,
	dv_video_recdate = 0x62,
	dv_video_rectime = 0x63,
	dv_video_source = 0x60
}
enum dv_section_type {
	dv_sect_audio = 0x76,
	dv_sect_header = 0x1f,
	dv_sect_subcode = 0x3f,
	dv_sect_vaux = 0x56,
	dv_sect_video = 0x96
}
enum codec_ids {
	AV_CODEC_ID_EAC3 = 0,
	AV_CODEC_ID_NONE = 1
}
enum __anonede852990103 {
	EAC3_GAQ_124 = 0,
	EAC3_GAQ_12 = 1,
	EAC3_GAQ_14 = 2,
	EAC3_GAQ_NO = 0
}
enum __anon41eff68d0103 {
	RATE_ERRS = -1,
	RATE_FULL = 1,
	RATE_HALF = 2,
	RATE_QUANT = 3,
	RATE_QUARTER = 4,
	SILENCE = 5
}
enum ExrCompr {
	EXR_B44A = 0,
	EXR_B44 = 1,
	EXR_DWA = 2,
	EXR_DWB = 3,
	EXR_PIZ = 4,
	EXR_PXR24 = 5,
	EXR_RAW = 6,
	EXR_RLE = 7,
	EXR_UNKN = 8,
	EXR_ZIP16 = 9,
	EXR_ZIP1 = 10
}
enum ExrPixelType {
	EXR_FLOAT = 0,
	EXR_HALF = 1,
	EXR_UINT = 2,
	EXR_UNKNOWN = 3
}
enum ExrTileLevelMode {
	EXR_TILE_LEVEL_MIPMAP = 0,
	EXR_TILE_LEVEL_ONE = 1,
	EXR_TILE_LEVEL_RIPMAP = 2,
	EXR_TILE_LEVEL_UNKNOWN = 3
}
enum ExrTileLevelRound {
	EXR_TILE_ROUND_DOWN = 0,
	EXR_TILE_ROUND_UNKNOWN = 1,
	EXR_TILE_ROUND_UP = 2
}
enum codec_ids {
	AV_CODEC_ID_AV1 = 0,
	AV_CODEC_ID_AVS2 = 1,
	AV_CODEC_ID_CAVS = 2,
	AV_CODEC_ID_H264 = 3,
	AV_CODEC_ID_HEVC = 4,
	AV_CODEC_ID_MPEG1VIDEO = 5,
	AV_CODEC_ID_MPEG2VIDEO = 6,
	AV_CODEC_ID_MPEG4 = 7,
	AV_CODEC_ID_NONE = 8,
	AV_CODEC_ID_VC1 = 9
}
enum FFJniFieldType {
	FF_JNI_CLASS = 0,
	FF_JNI_FIELD = 1,
	FF_JNI_METHOD = 2,
	FF_JNI_STATIC_FIELD = 3,
	FF_JNI_STATIC_METHOD = 4
}
enum fft_permutation_type {
	FF_FFT_PERM_AVX = 0,
	FF_FFT_PERM_DEFAULT = 1,
	FF_FFT_PERM_SWAP_LSBS = 2
}
enum mdct_permutation_type {
	FF_MDCT_PERM_INTERLEAVE = 0,
	FF_MDCT_PERM_NONE = 1
}
enum ws_interval_type {
	WS_NOISE = MKTAG('N''O''I''S'),
	WS_SINE = MKTAG('S''I''N''E')
}
enum __anon3e1ccbe30103 {
}
enum FITSHeaderState {
	STATE_BITPIX = 0,
	STATE_GCOUNT = 1,
	STATE_NAXIS_N = 2,
	STATE_NAXIS = 3,
	STATE_PCOUNT = 4,
	STATE_REST = 5,
	STATE_SIMPLE = 6,
	STATE_XTENSION = 7
}
enum FLACExtradataFormat {
	FLAC_EXTRADATA_FORMAT_FULL_HEADER = 1,
	FLAC_EXTRADATA_FORMAT_STREAMINFO = 0
}
enum __anonb72653ec0103 {
	FLAC_CHMODE_INDEPENDENT = 0,
	FLAC_CHMODE_LEFT_SIDE = 1,
	FLAC_CHMODE_MID_SIDE = 3,
	FLAC_CHMODE_RIGHT_SIDE = 2
}
enum __anonb72653ec0203 {
	FLAC_METADATA_TYPE_APPLICATION = 0,
	FLAC_METADATA_TYPE_CUESHEET = 1,
	FLAC_METADATA_TYPE_INVALID = 127,
	FLAC_METADATA_TYPE_PADDING = 3,
	FLAC_METADATA_TYPE_PICTURE = 4,
	FLAC_METADATA_TYPE_SEEKTABLE = 5,
	FLAC_METADATA_TYPE_STREAMINFO = 0,
	FLAC_METADATA_TYPE_VORBIS_COMMENT = 7
}
enum CodingMode {
	CODING_MODE_RICE2 = 5,
	CODING_MODE_RICE = 4
}
enum ChunkType {
	CHUNK_CC = 0,
	CHUNK_CD = 1,
	CURSOR_POS = 2,
	CURSOR_SHAPE = 3,
	DISPLAY_INFO = 0xC8,
	TILE_DATA = 5
}
enum Compression {
	COMPR_EPIC_J_B = 2,
	COMPR_KEMPF_J_B = 1
}
enum FrameType {
	ACTIVE_FRAME = 0,
	SID_FRAME = 1,
	UNTRANSMITTED_FRAME = 2
}
enum Rate {
	RATE_5300 = 0,
	RATE_6300 = 1
}
enum __anon662d9a860103 {
	FORMAT_COUNT = 0,
	FORMAT_G729D_6K4 = 1,
	FORMAT_G729_8K = 0
}
enum __anon723875070103 {
	GF_OFFSETTING = 1<<0,
	GF_TRANSDIFF = 1<<1
}
enum GIFParseStates {
	GIF_EXTENSION_BLOCK = 0,
	GIF_EXTENSION = 1,
	GIF_HEADER = 1,
	GIF_IMAGE_BLOCK = 3,
	GIF_IMAGE = 4
}
enum GSMModes {
	GSM_13000 = 0,
	MSN_10000 = 1,
	MSN_10600 = 2,
	MSN_11200 = 3,
	MSN_11800 = 4,
	MSN_12400 = 5,
	MSN_8200 = 6,
	MSN_8800 = 7,
	MSN_9400 = 8,
	NUM_GSM_MODES = 9
}
enum ff_h263_hwaccel_pixfmt_list_420 {
	AV_PIX_FMT_CUDA = 0,
	AV_PIX_FMT_NONE = 1,
	AV_PIX_FMT_VAAPI = 2,
	AV_PIX_FMT_VDPAU = 3,
	AV_PIX_FMT_VIDEOTOOLBOX = 4,
	AV_PIX_FMT_YUV420P = 5
}
enum __anonb79ebbba0103 {
	H264_NAL_AUD = 9,
	H264_NAL_AUXILIARY_SLICE = 19,
	H264_NAL_DEPTH_EXTEN_SLICE = 21,
	H264_NAL_DPA = 2,
	H264_NAL_DPB = 3,
	H264_NAL_DPC = 4,
	H264_NAL_DPS = 16,
	H264_NAL_END_SEQUENCE = 10,
	H264_NAL_END_STREAM = 11,
	H264_NAL_EXTEN_SLICE = 20,
	H264_NAL_FILLER_DATA = 12,
	H264_NAL_IDR_SLICE = 5,
	H264_NAL_PPS = 8,
	H264_NAL_PREFIX = 14,
	H264_NAL_RESERVED17 = 17,
	H264_NAL_RESERVED18 = 18,
	H264_NAL_RESERVED22 = 22,
	H264_NAL_RESERVED23 = 23,
	H264_NAL_SEI = 6,
	H264_NAL_SLICE = 1,
	H264_NAL_SPS_EXT = 13,
	H264_NAL_SPS = 7,
	H264_NAL_SUB_SPS = 15,
	H264_NAL_UNSPECIFIED24 = 24,
	H264_NAL_UNSPECIFIED25 = 25,
	H264_NAL_UNSPECIFIED26 = 26,
	H264_NAL_UNSPECIFIED27 = 27,
	H264_NAL_UNSPECIFIED28 = 28,
	H264_NAL_UNSPECIFIED29 = 29,
	H264_NAL_UNSPECIFIED30 = 30,
	H264_NAL_UNSPECIFIED31 = 31,
	H264_NAL_UNSPECIFIED = 0
}
enum __anonb79ebbba0203 {
	H264_MAX_CPB_CNT = 32,
	H264_MAX_DPB_FRAMES = 16,
	H264_MAX_HEIGHT = H264_MAX_MB_HEIGHT * 16,
	H264_MAX_MB_HEIGHT = 1055,
	H264_MAX_MB_PIC_SIZE = 139264,
	H264_MAX_MB_WIDTH = 1055,
	H264_MAX_MMCO_COUNT = H264_MAX_REFS * 2 + 3,
	H264_MAX_PPS_COUNT = 256,
	H264_MAX_REFS = 2 * H264_MAX_DPB_FRAMES,
	H264_MAX_RPLM_COUNT = H264_MAX_REFS + 1,
	H264_MAX_SLICE_GROUPS = 8,
	H264_MAX_SPS_COUNT = 32,
	H264_MAX_WIDTH = H264_MAX_MB_WIDTH * 16
}
enum __anone3a893cf0103 {
	EXTRACT = 0,
	INSERT = 1,
	PASS = 2,
	REMOVE = 3
}
enum __anone3a893cf0203 {
	FLIP_HORIZONTAL = 1,
	FLIP_VERTICAL = 2
}
enum __anone3a893cf0303 {
	LEVEL_AUTO = -1,
	LEVEL_UNSET = -2
}
enum h264_metadata_codec_ids {
	AV_CODEC_ID_H264 = 0,
	AV_CODEC_ID_NONE = 1
}
enum codec_ids {
	AV_CODEC_ID_H264 = 0,
	AV_CODEC_ID_NONE = 1
}
enum h264_redundant_pps_codec_ids {
	AV_CODEC_ID_H264 = 0,
	AV_CODEC_ID_NONE = 1
}
enum __anon0ef7045a0103 {
	H264_SEI_TYPE_ALTERNATIVE_TRANSFER = 147 ///< alternative transfer,
	H264_SEI_TYPE_BUFFERING_PERIOD = 0 ///< buffering period (H.264 D.1.1),
	H264_SEI_TYPE_DISPLAY_ORIENTATION = 47 ///< display orientation,
	H264_SEI_TYPE_FILLER_PAYLOAD = 3 ///< filler data,
	H264_SEI_TYPE_FRAME_PACKING = 45 ///< frame packing arrangement,
	H264_SEI_TYPE_GREEN_METADATA = 56 ///< GreenMPEG information,
	H264_SEI_TYPE_MASTERING_DISPLAY_COLOUR_VOLUME = 137 ///< mastering display properties,
	H264_SEI_TYPE_PAN_SCAN_RECT = 2 ///< pan-scan rectangle,
	H264_SEI_TYPE_PIC_TIMING = 1 ///< picture timing,
	H264_SEI_TYPE_RECOVERY_POINT = 6 ///< recovery point (frame # to decoder sync),
	H264_SEI_TYPE_USER_DATA_REGISTERED = 4 ///< registered user data as specified by Rec. ITU-T T.35,
	H264_SEI_TYPE_USER_DATA_UNREGISTERED = 5 ///< unregistered user data
}
enum __anon0ef7045a0203 {
	H264_SEI_PIC_STRUCT_BOTTOM_FIELD = 2 ///< 2: bottom field,
	H264_SEI_PIC_STRUCT_BOTTOM_TOP_BOTTOM = 6 ///< 6: bottom field top field bottom field repeated in that order,
	H264_SEI_PIC_STRUCT_BOTTOM_TOP = 4 ///< 4: bottom field top field in that order,
	H264_SEI_PIC_STRUCT_FRAME_DOUBLING = 7 ///< 7: %frame doubling,
	H264_SEI_PIC_STRUCT_FRAME_TRIPLING = 8 ///< 8: %frame tripling,
	H264_SEI_PIC_STRUCT_FRAME = 0 ///< 0: %frame,
	H264_SEI_PIC_STRUCT_TOP_BOTTOM_TOP = 5 ///< 5: top field bottom field top field repeated in that order,
	H264_SEI_PIC_STRUCT_TOP_BOTTOM = 3 ///< 3: top field bottom field in that order,
	H264_SEI_PIC_STRUCT_TOP_FIELD = 1 ///< 1: top field
}
enum __anon0ef7045a0303 {
	H264_SEI_FPA_TYPE_2D = 6,
	H264_SEI_FPA_TYPE_CHECKERBOARD = 0,
	H264_SEI_FPA_TYPE_INTERLEAVE_COLUMN = 1,
	H264_SEI_FPA_TYPE_INTERLEAVE_ROW = 2,
	H264_SEI_FPA_TYPE_INTERLEAVE_TEMPORAL = 5,
	H264_SEI_FPA_TYPE_SIDE_BY_SIDE = 3,
	H264_SEI_FPA_TYPE_TOP_BOTTOM = 4
}
enum MMCOOpcode {
	MMCO_END = 0,
	MMCO_LONG2UNUSED = 1,
	MMCO_LONG = 2,
	MMCO_RESET = 3,
	MMCO_SET_MAX_LONG = 4,
	MMCO_SHORT2LONG = 5,
	MMCO_SHORT2UNUSED = 6
}
enum __anonefddb9b00103 {
	INSERT = 0,
	PASS = 1,
	REMOVE = 2
}
enum h265_metadata_codec_ids {
	AV_CODEC_ID_HEVC = 0,
	AV_CODEC_ID_NONE = 1
}
enum HapCompressor {
	HAP_COMP_COMPLEX = 0xC0,
	HAP_COMP_NONE = 0xA0,
	HAP_COMP_SNAPPY = 0xB0
}
enum HapSectionType {
	HAP_ST_COMPRESSOR_TABLE = 0x02,
	HAP_ST_DECODE_INSTRUCTIONS = 0x01,
	HAP_ST_OFFSET_TABLE = 0x04,
	HAP_ST_SIZE_TABLE = 0x03
}
enum HapTextureFormat {
	HAP_FMT_RGBADXT5 = 0x0E,
	HAP_FMT_RGBDXT1 = 0x0B,
	HAP_FMT_RGTC1 = 0x01,
	HAP_FMT_YCOCGDXT5 = 0x0F
}
enum HapHeaderLength {
	HAP_HDR_LONG = 8,
	HAP_HDR_SHORT = 4
}
enum codec_ids {
	AV_CODEC_ID_HAP = 0,
	AV_CODEC_ID_NONE = 1
}
enum HEVCNALUnitType {
	HEVC_NAL_AUD = 35,
	HEVC_NAL_BLA_N_LP = 18,
	HEVC_NAL_BLA_W_LP = 16,
	HEVC_NAL_BLA_W_RADL = 17,
	HEVC_NAL_CRA_NUT = 21,
	HEVC_NAL_EOB_NUT = 37,
	HEVC_NAL_EOS_NUT = 36,
	HEVC_NAL_FD_NUT = 38,
	HEVC_NAL_IDR_N_LP = 20,
	HEVC_NAL_IDR_W_RADL = 19,
	HEVC_NAL_IRAP_VCL22 = 22,
	HEVC_NAL_IRAP_VCL23 = 23,
	HEVC_NAL_PPS = 34,
	HEVC_NAL_RADL_N = 6,
	HEVC_NAL_RADL_R = 7,
	HEVC_NAL_RASL_N = 8,
	HEVC_NAL_RASL_R = 9,
	HEVC_NAL_RSV_NVCL41 = 41,
	HEVC_NAL_RSV_NVCL42 = 42,
	HEVC_NAL_RSV_NVCL43 = 43,
	HEVC_NAL_RSV_NVCL44 = 44,
	HEVC_NAL_RSV_NVCL45 = 45,
	HEVC_NAL_RSV_NVCL46 = 46,
	HEVC_NAL_RSV_NVCL47 = 47,
	HEVC_NAL_RSV_VCL24 = 24,
	HEVC_NAL_RSV_VCL25 = 25,
	HEVC_NAL_RSV_VCL26 = 26,
	HEVC_NAL_RSV_VCL27 = 27,
	HEVC_NAL_RSV_VCL28 = 28,
	HEVC_NAL_RSV_VCL29 = 29,
	HEVC_NAL_RSV_VCL30 = 30,
	HEVC_NAL_RSV_VCL31 = 31,
	HEVC_NAL_SEI_PREFIX = 39,
	HEVC_NAL_SEI_SUFFIX = 40,
	HEVC_NAL_SPS = 33,
	HEVC_NAL_STSA_N = 4,
	HEVC_NAL_STSA_R = 5,
	HEVC_NAL_TRAIL_N = 0,
	HEVC_NAL_TRAIL_R = 1,
	HEVC_NAL_TSA_N = 2,
	HEVC_NAL_TSA_R = 3,
	HEVC_NAL_UNSPEC48 = 48,
	HEVC_NAL_UNSPEC49 = 49,
	HEVC_NAL_UNSPEC50 = 50,
	HEVC_NAL_UNSPEC51 = 51,
	HEVC_NAL_UNSPEC52 = 52,
	HEVC_NAL_UNSPEC53 = 53,
	HEVC_NAL_UNSPEC54 = 54,
	HEVC_NAL_UNSPEC55 = 55,
	HEVC_NAL_UNSPEC56 = 56,
	HEVC_NAL_UNSPEC57 = 57,
	HEVC_NAL_UNSPEC58 = 58,
	HEVC_NAL_UNSPEC59 = 59,
	HEVC_NAL_UNSPEC60 = 60,
	HEVC_NAL_UNSPEC61 = 61,
	HEVC_NAL_UNSPEC62 = 62,
	HEVC_NAL_UNSPEC63 = 63,
	HEVC_NAL_VCL_N10 = 10,
	HEVC_NAL_VCL_N12 = 12,
	HEVC_NAL_VCL_N14 = 14,
	HEVC_NAL_VCL_R11 = 11,
	HEVC_NAL_VCL_R13 = 13,
	HEVC_NAL_VCL_R15 = 15,
	HEVC_NAL_VPS = 32
}
enum HEVCSliceType {
	HEVC_SLICE_B = 0,
	HEVC_SLICE_I = 2,
	HEVC_SLICE_P = 1
}
enum __anonbb5d7d9c0103 {
	HEVC_MAX_CPB_CNT = 32,
	HEVC_MAX_DPB_SIZE = 16,
	HEVC_MAX_ENTRY_POINT_OFFSETS = HEVC_MAX_TILE_COLUMNS * 135,
	HEVC_MAX_HEIGHT = 16888,
	HEVC_MAX_LAYERS = 63,
	HEVC_MAX_LAYER_SETS = 1024,
	HEVC_MAX_LOG2_CTB_SIZE = 6,
	HEVC_MAX_LONG_TERM_REF_PICS = 32,
	HEVC_MAX_LUMA_PS = 35651584,
	HEVC_MAX_PPS_COUNT = 64,
	HEVC_MAX_REFS = HEVC_MAX_DPB_SIZE,
	HEVC_MAX_SHORT_TERM_REF_PIC_SETS = 64,
	HEVC_MAX_SLICE_SEGMENTS = 600,
	HEVC_MAX_SPS_COUNT = 16,
	HEVC_MAX_SUB_LAYERS = 7,
	HEVC_MAX_TILE_COLUMNS = 20,
	HEVC_MAX_TILE_ROWS = 22,
	HEVC_MAX_VPS_COUNT = 16,
	HEVC_MAX_WIDTH = 16888,
	HEVC_MIN_LOG2_CTB_SIZE = 4
}
enum codec_ids {
	AV_CODEC_ID_HEVC = 0,
	AV_CODEC_ID_NONE = 1
}
enum __anon7627e73c0103 {
	HEVC_SEI_TYPE_ACTIVE_PARAMETER_SETS = 129,
	HEVC_SEI_TYPE_ALTERNATIVE_TRANSFER_CHARACTERISTICS = 147,
	HEVC_SEI_TYPE_BUFFERING_PERIOD = 0,
	HEVC_SEI_TYPE_CONTENT_LIGHT_LEVEL_INFO = 144,
	HEVC_SEI_TYPE_DECODED_PICTURE_HASH = 132,
	HEVC_SEI_TYPE_DECODING_UNIT_INFO = 130,
	HEVC_SEI_TYPE_DISPLAY_ORIENTATION = 47,
	HEVC_SEI_TYPE_FILLER_PAYLOAD = 3,
	HEVC_SEI_TYPE_FILM_GRAIN_CHARACTERISTICS = 19,
	HEVC_SEI_TYPE_FRAME_PACKING = 45,
	HEVC_SEI_TYPE_FULL_FRAME_SNAPSHOT = 15,
	HEVC_SEI_TYPE_MASTERING_DISPLAY_INFO = 137,
	HEVC_SEI_TYPE_PAN_SCAN_RECT = 2,
	HEVC_SEI_TYPE_PICTURE_TIMING = 1,
	HEVC_SEI_TYPE_POST_FILTER_HINT = 22,
	HEVC_SEI_TYPE_PROGRESSIVE_REFINEMENT_SEGMENT_END = 17,
	HEVC_SEI_TYPE_PROGRESSIVE_REFINEMENT_SEGMENT_START = 16,
	HEVC_SEI_TYPE_RECOVERY_POINT = 6,
	HEVC_SEI_TYPE_REGION_REFRESH_INFO = 134,
	HEVC_SEI_TYPE_SCALABLE_NESTING = 133,
	HEVC_SEI_TYPE_SCENE_INFO = 9,
	HEVC_SEI_TYPE_SOP_DESCRIPTION = 128,
	HEVC_SEI_TYPE_TEMPORAL_LEVEL0_INDEX = 131,
	HEVC_SEI_TYPE_TIME_CODE = 136,
	HEVC_SEI_TYPE_TONE_MAPPING_INFO = 23,
	HEVC_SEI_TYPE_USER_DATA_REGISTERED_ITU_T_T35 = 4,
	HEVC_SEI_TYPE_USER_DATA_UNREGISTERED = 5
}
enum InterPredIdc {
	PRED_BI = 0,
	PRED_L0 = 0,
	PRED_L1 = 2
}
enum IntraPredMode {
	INTRA_ANGULAR_10 = 0,
	INTRA_ANGULAR_11 = 1,
	INTRA_ANGULAR_12 = 2,
	INTRA_ANGULAR_13 = 3,
	INTRA_ANGULAR_14 = 4,
	INTRA_ANGULAR_15 = 5,
	INTRA_ANGULAR_16 = 6,
	INTRA_ANGULAR_17 = 7,
	INTRA_ANGULAR_18 = 8,
	INTRA_ANGULAR_19 = 9,
	INTRA_ANGULAR_20 = 10,
	INTRA_ANGULAR_21 = 11,
	INTRA_ANGULAR_22 = 12,
	INTRA_ANGULAR_23 = 13,
	INTRA_ANGULAR_24 = 14,
	INTRA_ANGULAR_25 = 15,
	INTRA_ANGULAR_26 = 16,
	INTRA_ANGULAR_27 = 17,
	INTRA_ANGULAR_28 = 18,
	INTRA_ANGULAR_29 = 19,
	INTRA_ANGULAR_2 = 20,
	INTRA_ANGULAR_30 = 21,
	INTRA_ANGULAR_31 = 22,
	INTRA_ANGULAR_32 = 23,
	INTRA_ANGULAR_33 = 24,
	INTRA_ANGULAR_34 = 25,
	INTRA_ANGULAR_3 = 26,
	INTRA_ANGULAR_4 = 27,
	INTRA_ANGULAR_5 = 28,
	INTRA_ANGULAR_6 = 29,
	INTRA_ANGULAR_7 = 30,
	INTRA_ANGULAR_8 = 31,
	INTRA_ANGULAR_9 = 32,
	INTRA_DC = 33,
	INTRA_PLANAR = 0
}
enum PartMode {
	PART_2Nx2N = 0,
	PART_2NxN = 1,
	PART_2NxnD = 5,
	PART_2NxnU = 4,
	PART_Nx2N = 2,
	PART_NxN = 3,
	PART_nLx2N = 6,
	PART_nRx2N = 7
}
enum PredFlag {
	PF_BI = 0,
	PF_INTRA = 0,
	PF_L0 = 2,
	PF_L1 = 3
}
enum PredMode {
	MODE_INTER = 0,
	MODE_INTRA = 1,
	MODE_SKIP = 2
}
enum RPSType {
	LT_CURR = 0,
	LT_FOLL = 1,
	NB_RPS_TYPE = 2,
	ST_CURR_AFT = 3,
	ST_CURR_BEF = 0,
	ST_FOLL = 5
}
enum SAOEOClass {
	SAO_EO_135D = 0,
	SAO_EO_45D = 1,
	SAO_EO_HORIZ = 0,
	SAO_EO_VERT = 3
}
enum SAOType {
	SAO_APPLIED = 0,
	SAO_BAND = 1,
	SAO_EDGE = 2,
	SAO_NOT_APPLIED = 0
}
enum ScanType {
	SCAN_DIAG = 0,
	SCAN_HORIZ = 1,
	SCAN_VERT = 2
}
enum SyntaxElement {
	ABS_MVD_GREATER0_FLAG = 0,
	ABS_MVD_GREATER1_FLAG = 1,
	ABS_MVD_MINUS2 = 2,
	CBF_CB_CR = 3,
	CBF_LUMA = 4,
	COEFF_ABS_LEVEL_GREATER1_FLAG = 5,
	COEFF_ABS_LEVEL_GREATER2_FLAG = 6,
	COEFF_ABS_LEVEL_REMAINING = 7,
	COEFF_SIGN_FLAG = 8,
	CU_CHROMA_QP_OFFSET_FLAG = 9,
	CU_CHROMA_QP_OFFSET_IDX = 10,
	CU_QP_DELTA = 11,
	CU_TRANSQUANT_BYPASS_FLAG = 12,
	END_OF_SLICE_FLAG = 13,
	EXPLICIT_RDPCM_DIR_FLAG = 14,
	EXPLICIT_RDPCM_FLAG = 15,
	INTER_PRED_IDC = 16,
	INTRA_CHROMA_PRED_MODE = 17,
	LAST_SIGNIFICANT_COEFF_X_PREFIX = 18,
	LAST_SIGNIFICANT_COEFF_X_SUFFIX = 19,
	LAST_SIGNIFICANT_COEFF_Y_PREFIX = 20,
	LAST_SIGNIFICANT_COEFF_Y_SUFFIX = 21,
	LOG2_RES_SCALE_ABS = 22,
	MERGE_FLAG = 23,
	MERGE_IDX = 24,
	MPM_IDX = 25,
	MVD_SIGN_FLAG = 26,
	MVP_LX_FLAG = 27,
	NO_RESIDUAL_DATA_FLAG = 28,
	PART_MODE = 29,
	PCM_FLAG = 30,
	PRED_MODE_FLAG = 31,
	PREV_INTRA_LUMA_PRED_FLAG = 32,
	REF_IDX_L0 = 33,
	REF_IDX_L1 = 34,
	REM_INTRA_LUMA_PRED_MODE = 35,
	RES_SCALE_SIGN_FLAG = 36,
	SAO_BAND_POSITION = 37,
	SAO_EO_CLASS = 38,
	SAO_MERGE_FLAG = 0,
	SAO_OFFSET_ABS = 40,
	SAO_OFFSET_SIGN = 41,
	SAO_TYPE_IDX = 42,
	SIGNIFICANT_COEFF_FLAG = 43,
	SIGNIFICANT_COEFF_GROUP_FLAG = 44,
	SKIP_FLAG = 45,
	SPLIT_CODING_UNIT_FLAG = 46,
	SPLIT_TRANSFORM_FLAG = 47,
	TRANSFORM_SKIP_FLAG = 48
}
enum HQXFormat {
	HQX_422A = 0,
	HQX_422 = 0,
	HQX_444A = 2,
	HQX_444 = 3
}
enum HQXACMode {
	HQX_AC_Q0 = 0,
	HQX_AC_Q128 = 1,
	HQX_AC_Q16 = 2,
	HQX_AC_Q32 = 3,
	HQX_AC_Q64 = 4,
	HQX_AC_Q8 = 5,
	NUM_HQX_AC = 6
}
enum Predictor {
	LEFT = 0,
	MEDIAN = 1,
	PLANE = 2
}
enum idct_permutation_type {
	FF_IDCT_PERM_LIBMPEG2 = 0,
	FF_IDCT_PERM_NONE = 1,
	FF_IDCT_PERM_PARTTRANS = 2,
	FF_IDCT_PERM_SIMPLE = 3,
	FF_IDCT_PERM_SSE2 = 4,
	FF_IDCT_PERM_TRANSPOSE = 5
}
enum __anon725b00e60103 {
	MASK_HAS_MASK = 0,
	MASK_HAS_TRANSPARENT_COLOR = 1,
	MASK_LASSO = 2,
	MASK_NONE = 3
}
enum IIRFilterMode {
	FF_FILTER_MODE_BANDPASS = 0,
	FF_FILTER_MODE_BANDSTOP = 1,
	FF_FILTER_MODE_HIGHPASS = 2,
	FF_FILTER_MODE_LOWPASS = 3
}
enum IIRFilterType {
	FF_FILTER_TYPE_BESSEL = 0,
	FF_FILTER_TYPE_BIQUAD = 1,
	FF_FILTER_TYPE_BUTTERWORTH = 2,
	FF_FILTER_TYPE_CHEBYSHEV = 3,
	FF_FILTER_TYPE_ELLIPTIC = 4
}
enum codec_ids {
	AV_CODEC_ID_MPEG2VIDEO = 0,
	AV_CODEC_ID_NONE = 1
}
enum __anon800b6b730103 {
	RLE_ESC_F9 = 249 ///< same as RLE_ESC_FA + do the same with next block,
	RLE_ESC_FA = 250 ///< INTRA: skip block INTER: copy data from reference,
	RLE_ESC_FB = 251 ///< apply null delta to N blocks / skip N blocks,
	RLE_ESC_FC = 252 ///< same as RLE_ESC_FD + do the same with next block,
	RLE_ESC_FD = 253 ///< apply null delta to all remaining lines of this block,
	RLE_ESC_FE = 254 ///< apply null delta to all lines up to the 3rd line,
	RLE_ESC_FF = 255 ///< apply null delta to all lines up to the 2nd line
}
enum __anon800b6b730203 {
	IV3_BAD_COUNTER = 3,
	IV3_BAD_DATA = 2,
	IV3_BAD_RLE = 1,
	IV3_NOERR = 0,
	IV3_OUT_OF_DATA = 5,
	IV3_UNSUPPORTED = 4
}
enum __anon800b6b730303 {
	H_SPLIT = 0,
	INTER_DATA = 3,
	INTRA_NULL = 2,
	V_SPLIT = 1
}
enum __anon800b73f50103 {
	FRAMETYPE_INTER_NOREF = 3 ///< droppable P-frame,
	FRAMETYPE_INTER_SCAL = 2 ///< droppable P-frame used in the scalability mode,
	FRAMETYPE_INTER = 1 ///< non-droppable P-frame,
	FRAMETYPE_INTRA = 0,
	FRAMETYPE_NULL = 4 ///< empty frame with no data
}
enum __anon7263d3be0103 {
	IVI4_FRAMETYPE_BIDIR = 3 ///< bidirectional frame,
	IVI4_FRAMETYPE_INTER_NOREF = 4 ///< droppable P-frame,
	IVI4_FRAMETYPE_INTER = 2 ///< non-droppable P-frame,
	IVI4_FRAMETYPE_INTRA1 = 1 ///< intra frame with slightly different bitstream coding,
	IVI4_FRAMETYPE_INTRA = 0,
	IVI4_FRAMETYPE_NULL_FIRST = 5 ///< empty frame with no data,
	IVI4_FRAMETYPE_NULL_LAST = 6 ///< empty frame with no data
}
enum __anon7263d3be0203 {
	IVI_BLK_HUFF = 1 /// Huffman table is used for coding blocks,
	IVI_MB_HUFF = 0 /// Huffman table is used for coding macroblocks
}
enum __anon1d1c53240203 {
	ALIGN_JC = 1<<3 // justify center default,
	ALIGN_JL = 1<<4 // justify left,
	ALIGN_JR = 1<<5 // justify right,
	ALIGN_VB = 1<<0 // vertical bottom default,
	ALIGN_VM = 1<<1 // vertical middle,
	ALIGN_VT = 1<<2 // vertical top
}
enum Jpeg2000Markers {
	JPEG2000_COC = 0,
	JPEG2000_COD = 1,
	JPEG2000_COM = 2,
	JPEG2000_CRG = 0xff63 // component registration,
	JPEG2000_EOC = 0xffd9 // end of codestream,
	JPEG2000_EPH = 5,
	JPEG2000_PLM = 0xff57 // tile-part lengths,
	JPEG2000_PLT = 7,
	JPEG2000_POC = 8,
	JPEG2000_PPM = 9,
	JPEG2000_PPT = 10,
	JPEG2000_QCC = 11,
	JPEG2000_QCD = 0xff5c // quantization default,
	JPEG2000_RGN = 13,
	JPEG2000_SIZ = 0xff51 // image and tile size,
	JPEG2000_SOC = 0xff4f // start of codestream,
	JPEG2000_SOD = 16,
	JPEG2000_SOP = 17,
	JPEG2000_SOT = 0xff90 // start of tile-part,
	JPEG2000_TLM = 0xff55 // packed packet headers tile-part header
}
enum Jpeg2000Quantsty {
	JPEG2000_QSTY_NONE = 0,
	JPEG2000_QSTY_SE = 1,
	JPEG2000_QSTY_SI = 2
}
enum all_pix_fmts {
	GRAY_PIXEL_FORMATS = 0,
	RGB_PIXEL_FORMATS = {RGB_PIXEL_FORMATS,
	XYZ_PIXEL_FORMATS = 2,
	YUV_PIXEL_FORMATS = 3
}
enum gray_pix_fmts {
	GRAY_PIXEL_FORMATS = {GRAY_PIXEL_FORMATS
}
enum rgb_pix_fmts {
	RGB_PIXEL_FORMATS = {RGB_PIXEL_FORMATS
}
enum xyz_pix_fmts {
	XYZ_PIXEL_FORMATS = {XYZ_PIXEL_FORMATS,
	YUV_PIXEL_FORMATS = 1
}
enum yuv_pix_fmts {
	YUV_PIXEL_FORMATS = {YUV_PIXEL_FORMATS
}
enum DWTType {
	FF_DWT53 = 0,
	FF_DWT97_INT = 1,
	FF_DWT97 = 2,
	FF_DWT_NB = 3
}
enum LagarithFrameType {
	FRAME_ARITH_RGB24 = 4 /**< arithmetic coded RGB24 */,
	FRAME_ARITH_RGBA = 8 /**< arithmetic coded RGBA */,
	FRAME_ARITH_YUY2 = 3 /**< arithmetic coded YUY2 */,
	FRAME_ARITH_YV12 = 10 /**< arithmetic coded YV12 */,
	FRAME_OLD_ARITH_RGB = 7 /**< obsolete arithmetic coded RGB (no longer encoded by upstream since version 1.1.0) */,
	FRAME_RAW = 1 /**< uncompressed */,
	FRAME_REDUCED_RES = 11 /**< reduced resolution YV12 frame */,
	FRAME_SOLID_COLOR = 6 /**< solid non-grayscale color frame */,
	FRAME_SOLID_GRAY = 5 /**< solid grayscale color frame */,
	FRAME_SOLID_RGBA = 9 /**< solid RGBA color frame */,
	FRAME_U_RGB24 = 2 /**< unaligned RGB24 */
}
enum color_ranges {
}
enum av1_pix_fmts_highbd {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_YUV420P10 = 1,
	AV_PIX_FMT_YUV420P12 = 2,
	AV_PIX_FMT_YUV420P = 3,
	AV_PIX_FMT_YUV422P10 = 4,
	AV_PIX_FMT_YUV422P12 = 5,
	AV_PIX_FMT_YUV422P = 6,
	AV_PIX_FMT_YUV444P10 = 7,
	AV_PIX_FMT_YUV444P12 = 8,
	AV_PIX_FMT_YUV444P = 9
}
enum av1_pix_fmts {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_YUV420P = 1,
	AV_PIX_FMT_YUV422P = 2,
	AV_PIX_FMT_YUV444P = 3
}
enum pix_fmt {
}
enum ConcealMethod {
	CONCEAL_METHOD_ENERGY_INTERPOLATION = 2,
	CONCEAL_METHOD_NB = 1,
	CONCEAL_METHOD_NOISE_SUBSTITUTION = 1,
	CONCEAL_METHOD_SPECTRAL_MUTING = 0
}
enum pix_fmts {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_YUV420P = 1
}
enum libopenjpeg_all_pix_fmts {
	GRAY_PIXEL_FORMATS = 0,
	RGB_PIXEL_FORMATS = 1,
	XYZ_PIXEL_FORMATS = 2,
	YUV_PIXEL_FORMATS = 3
}
enum libopenjpeg_gray_pix_fmts {
	GRAY_PIXEL_FORMATS = 0
}
enum libopenjpeg_rgb_pix_fmts {
	RGB_PIXEL_FORMATS = 0
}
enum libopenjpeg_yuv_pix_fmts {
	YUV_PIXEL_FORMATS = 0
}
enum vp9_pix_fmts_def {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_YUV420P = 1,
	AV_PIX_FMT_YUVA420P = 2
}
enum vp9_pix_fmts_highbd {
	AV_PIX_FMT_GBRP10 = 0,
	AV_PIX_FMT_GBRP12 = 1,
	AV_PIX_FMT_GBRP = 2,
	AV_PIX_FMT_NONE = 3,
	AV_PIX_FMT_YUV420P10 = 4,
	AV_PIX_FMT_YUV420P12 = 5,
	AV_PIX_FMT_YUV420P = 6,
	AV_PIX_FMT_YUV422P10 = 7,
	AV_PIX_FMT_YUV422P12 = 8,
	AV_PIX_FMT_YUV422P = 9,
	AV_PIX_FMT_YUV440P10 = 10,
	AV_PIX_FMT_YUV440P12 = 11,
	AV_PIX_FMT_YUV440P = 12,
	AV_PIX_FMT_YUV444P10 = 13,
	AV_PIX_FMT_YUV444P12 = 14,
	AV_PIX_FMT_YUV444P = 15,
	AV_PIX_FMT_YUVA420P = 16
}
enum vp9_pix_fmts_highcol {
	AV_PIX_FMT_GBRP = 0,
	AV_PIX_FMT_NONE = 1,
	AV_PIX_FMT_YUV420P = 2,
	AV_PIX_FMT_YUV422P = 3,
	AV_PIX_FMT_YUV440P = 4,
	AV_PIX_FMT_YUV444P = 5,
	AV_PIX_FMT_YUVA420P = 6
}
enum color_ranges {
}
enum colorspaces {
}
enum pix_fmts_10bit {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_NV20 = 1,
	AV_PIX_FMT_YUV420P10 = 2,
	AV_PIX_FMT_YUV422P10 = 3,
	AV_PIX_FMT_YUV444P10 = 4
}
enum pix_fmts_8bit_rgb {
	AV_PIX_FMT_BGR0 = 0,
	AV_PIX_FMT_BGR24 = 1,
	AV_PIX_FMT_NONE = 2,
	AV_PIX_FMT_RGB24 = 3
}
enum pix_fmts_8bit {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_NV12 = 1,
	AV_PIX_FMT_NV16 = 2,
	AV_PIX_FMT_NV21 = 3,
	AV_PIX_FMT_YUV420P = 4,
	AV_PIX_FMT_YUV422P = 5,
	AV_PIX_FMT_YUV444P = 6,
	AV_PIX_FMT_YUVJ420P = 7,
	AV_PIX_FMT_YUVJ422P = 8,
	AV_PIX_FMT_YUVJ444P = 9
}
enum pix_fmts_9bit {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_YUV420P9 = 1,
	AV_PIX_FMT_YUV444P9 = 2
}
enum pix_fmts_all {
	AV_PIX_FMT_GRAY10 = 0,
	AV_PIX_FMT_GRAY8 = 1,
	AV_PIX_FMT_NONE = 2,
	AV_PIX_FMT_NV12 = 3,
	AV_PIX_FMT_NV16 = 4,
	AV_PIX_FMT_NV20 = 5,
	AV_PIX_FMT_NV21 = 6,
	AV_PIX_FMT_YUV420P10 = 7,
	AV_PIX_FMT_YUV420P = 8,
	AV_PIX_FMT_YUV422P10 = 9,
	AV_PIX_FMT_YUV422P = 10,
	AV_PIX_FMT_YUV444P10 = 11,
	AV_PIX_FMT_YUV444P = 12,
	AV_PIX_FMT_YUVJ420P = 13,
	AV_PIX_FMT_YUVJ422P = 14,
	AV_PIX_FMT_YUVJ444P = 15
}
enum x265_csp_eight {
	AV_PIX_FMT_GBRP = 0,
	AV_PIX_FMT_GRAY8 = 1,
	AV_PIX_FMT_NONE = 2,
	AV_PIX_FMT_YUV420P = 3,
	AV_PIX_FMT_YUV422P = 4,
	AV_PIX_FMT_YUV444P = 5
}
enum x265_csp_ten {
	AV_PIX_FMT_GBRP10 = 0,
	AV_PIX_FMT_GBRP = 1,
	AV_PIX_FMT_GRAY10 = 2,
	AV_PIX_FMT_GRAY8 = 3,
	AV_PIX_FMT_NONE = 4,
	AV_PIX_FMT_YUV420P10 = 5,
	AV_PIX_FMT_YUV420P = 6,
	AV_PIX_FMT_YUV422P10 = 7,
	AV_PIX_FMT_YUV422P = 8,
	AV_PIX_FMT_YUV444P10 = 9,
	AV_PIX_FMT_YUV444P = 10
}
enum x265_csp_twelve {
	AV_PIX_FMT_GBRP10 = 0,
	AV_PIX_FMT_GBRP12 = 1,
	AV_PIX_FMT_GBRP = 2,
	AV_PIX_FMT_GRAY10 = 3,
	AV_PIX_FMT_GRAY12 = 4,
	AV_PIX_FMT_GRAY8 = 5,
	AV_PIX_FMT_NONE = 6,
	AV_PIX_FMT_YUV420P10 = 7,
	AV_PIX_FMT_YUV420P12 = 8,
	AV_PIX_FMT_YUV420P = 9,
	AV_PIX_FMT_YUV422P10 = 10,
	AV_PIX_FMT_YUV422P12 = 11,
	AV_PIX_FMT_YUV422P = 12,
	AV_PIX_FMT_YUV444P10 = 13,
	AV_PIX_FMT_YUV444P12 = 14,
	AV_PIX_FMT_YUV444P = 15
}
enum LOCO_MODE {
	LOCO_CRGBA = -3,
	LOCO_CRGB = -2,
	LOCO_CYUY2 = -1,
	LOCO_CYV12 = -4,
	LOCO_RGBA = 4,
	LOCO_RGB = 3,
	LOCO_UNKN = 0,
	LOCO_UYVY = 2,
	LOCO_YUY2 = 1,
	LOCO_YV12 = 5
}
enum FFLPCType {
	FF_LPC_TYPE_CHOLESKY = 3 ///< Cholesky factorization,
	FF_LPC_TYPE_DEFAULT = -1 ///< use the codec default LPC type,
	FF_LPC_TYPE_FIXED = 1 ///< fixed LPC coefficients,
	FF_LPC_TYPE_LEVINSON = 2 ///< Levinson-Durbin recursion,
	FF_LPC_TYPE_NB = 4,
	FF_LPC_TYPE_NONE = 0 ///< do not use LPC prediction or use all zero coefficients
}
enum FF_LZW_MODES {
	FF_LZW_GIF = 0,
	FF_LZW_TIFF = 1
}
enum Prediction {
	GRADIENT = 0,
	LEFT = 1,
	MEDIAN = 2
}
enum Prediction {
	GRADIENT = 0,
	LEFT = 1,
	MEDIAN = 2
}
enum __anonbd7c0f830103 {
	COLOR_FormatAndroidOpaque = 0x7F000789,
	COLOR_FormatYCbYCr = 0x19,
	COLOR_FormatYUV420Planar = 0x13,
	COLOR_FormatYUV420SemiPlanar = 0x15,
	COLOR_QCOM_FormatYUV420PackedSemiPlanar64x32Tile2m8ka = 0x7fa30c03,
	COLOR_QCOM_FormatYUV420SemiPlanar32m = 0x7fa30c04,
	COLOR_QCOM_FormatYUV420SemiPlanar = 0x7fa30c00,
	COLOR_TI_FormatYUV420PackedSemiPlanarInterlaced = 0x7f000001,
	COLOR_TI_FormatYUV420PackedSemiPlanar = 0x7f000100
}
enum pix_fmts {
}
enum JpegMarker {
	APP0 = 0xe0,
	APP10 = 0xea,
	APP11 = 0xeb,
	APP12 = 0xec,
	APP13 = 0xed,
	APP14 = 0xee,
	APP15 = 0xef,
	APP1 = 0xe1,
	APP2 = 0xe2,
	APP3 = 0xe3,
	APP4 = 0xe4,
	APP5 = 0xe5,
	APP6 = 0xe6,
	APP7 = 0xe7,
	APP8 = 0xe8,
	APP9 = 0xe9,
	COM = 0xfe /* comment */,
	DAC = 0xcc /* define arithmetic-coding conditioning */,
	DHP = 0xde /* define hierarchical progression */,
	DHT = 0xc4 /* define huffman tables */,
	DNL = 0xdc /* define number of lines */,
	DQT = 0xdb /* define quantization tables */,
	DRI = 0xdd /* define restart interval */,
	EOI = 0xd9 /* end of image */,
	EXP = 0xdf /* expand reference components */,
	JPG0 = 0xf0,
	JPG10 = 0xfa,
	JPG11 = 0xfb,
	JPG12 = 0xfc,
	JPG13 = 0xfd,
	JPG1 = 0xf1,
	JPG2 = 0xf2,
	JPG3 = 0xf3,
	JPG4 = 0xf4,
	JPG5 = 0xf5,
	JPG6 = 0xf6,
	JPG9 = 0xf9,
	JPG = 0xc8 /* reserved for JPEG extension */,
	LSE = 0xf8 ///< JPEG-LS extension parameters,
	RST0 = 0xd0,
	RST1 = 0xd1,
	RST2 = 0xd2,
	RST3 = 0xd3,
	RST4 = 0xd4,
	RST5 = 0xd5,
	RST6 = 0xd6,
	RST7 = 0xd7,
	SOF0 = 0xc0 /* baseline */,
	SOF10 = 0xca /* progressive arithmetic */,
	SOF11 = 0xcb /* lossless arithmetic */,
	SOF13 = 0xcd /* differential sequential arithmetic */,
	SOF14 = 0xce /* differential progressive arithmetic */,
	SOF15 = 0xcf /* differential lossless arithmetic */,
	SOF1 = 0xc1 /* extended sequential huffman */,
	SOF2 = 0xc2 /* progressive huffman */,
	SOF3 = 0xc3 /* lossless huffman */,
	SOF48 = 0xf7 ///< JPEG-LS,
	SOF5 = 0xc5 /* differential sequential huffman */,
	SOF6 = 0xc6 /* differential progressive huffman */,
	SOF7 = 0xc7 /* differential lossless huffman */,
	SOF9 = 0xc9 /* extended sequential arithmetic */,
	SOI = 0xd8 /* start of image */,
	SOS = 0xda /* start of scan */,
	TEM = 0x01 /* temporary private use for arithmetic coding */
}
enum codec_ids {
	AV_CODEC_ID_MJPEG = 0,
	AV_CODEC_ID_NONE = 1
}
enum codec_ids {
	AV_CODEC_ID_MJPEG = 0,
	AV_CODEC_ID_NONE = 1
}
enum pix_fmts {
}
enum HuffmanTableOption {
	HUFFMAN_TABLE_DEFAULT = 0 ///< Use the default Huffman tables.,
	HUFFMAN_TABLE_OPTIMAL = 1 ///< Compute and use optimal Huffman tables.,
	NB_HUFFMAN_TABLE_OPTION = 2
}
enum THDChannelModifier {
	THD_CH_MODIFIER_LBINRBIN = 0x2 // Dolby Headphone,
	THD_CH_MODIFIER_LTRT = 0x1 // Dolby Surround,
	THD_CH_MODIFIER_MONO = 0x3 // Mono or Dual Mono,
	THD_CH_MODIFIER_NOTINDICATED = 0x0,
	THD_CH_MODIFIER_NOTSURROUNDEX = 0x1 // Not Dolby Digital EX,
	THD_CH_MODIFIER_STEREO = 0x0 // Stereo (not Dolby Surround),
	THD_CH_MODIFIER_SURROUNDEX = 0x2 // Dolby Digital EX
}
enum InputBitDepth {
	BITS_16 = 0,
	BITS_20 = 1,
	BITS_24 = 2
}
enum MLPChMode {
	MLP_CHMODE_LEFT_RIGHT = 0,
	MLP_CHMODE_LEFT_SIDE = 1,
	MLP_CHMODE_MID_SIDE = 2,
	MLP_CHMODE_RIGHT_SIDE = 3
}
enum ParamFlags {
	PARAMS_DEFAULT = 0xff,
	PARAM_BLOCKSIZE = 1 << 7,
	PARAM_FIR = 1 << 3,
	PARAM_HUFFOFFSET = 1 << 1,
	PARAM_IIR = 1 << 2,
	PARAM_MATRIX = 1 << 6,
	PARAM_OUTSHIFT = 1 << 5,
	PARAM_PRESENCE_FLAGS = 1 << 8,
	PARAM_PRESENT = 1 << 0,
	PARAM_QUANTSTEP = 1 << 4
}
enum codec_ids {
	AV_CODEC_ID_MP3 = 0,
	AV_CODEC_ID_NONE = 1
}
enum mpeg12_pixfmt_list_422 {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_YUV422P = 1
}
enum mpeg12_pixfmt_list_444 {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_YUV444P = 1
}
enum mpeg1_hwaccel_pixfmt_list_420 {
	AV_PIX_FMT_CUDA = 0,
	AV_PIX_FMT_NONE = 1,
	AV_PIX_FMT_VDPAU = 2,
	AV_PIX_FMT_XVMC = 3,
	AV_PIX_FMT_YUV420P = 4
}
enum mpeg2_hwaccel_pixfmt_list_420 {
	AV_PIX_FMT_CUDA = 0,
	AV_PIX_FMT_D3D11VA_VLD = 1,
	AV_PIX_FMT_D3D11 = 2,
	AV_PIX_FMT_DXVA2_VLD = 3,
	AV_PIX_FMT_NONE = 4,
	AV_PIX_FMT_VAAPI = 5,
	AV_PIX_FMT_VDPAU = 6,
	AV_PIX_FMT_VIDEOTOOLBOX = 7,
	AV_PIX_FMT_XVMC = 8,
	AV_PIX_FMT_YUV420P = 9
}
enum mpeg2_metadata_codec_ids {
	AV_CODEC_ID_MPEG2VIDEO = 0,
	AV_CODEC_ID_NONE = 1
}
enum codec_ids {
	AV_CODEC_ID_MPEG4 = 0,
	AV_CODEC_ID_NONE = 1
}
enum AudioObjectType {
	AOT_AAC_LC = 0,
	AOT_AAC_LTP = 1,
	AOT_AAC_MAIN = 2,
	AOT_AAC_SCALABLE = 3,
	AOT_AAC_SSR = 4,
	AOT_ALS = 5,
	AOT_CELP = 6,
	AOT_DST = 7,
	AOT_ER_AAC_ELD = 8,
	AOT_ER_AAC_LC = 9,
	AOT_ER_AAC_LD = 10,
	AOT_ER_AAC_LTP = 19 ///< N Error Resilient Long Term Prediction,
	AOT_ER_AAC_SCALABLE = 12,
	AOT_ER_BSAC = 13,
	AOT_ER_CELP = 14,
	AOT_ER_HILN = 15,
	AOT_ER_HVXC = 16,
	AOT_ER_PARAM = 17,
	AOT_ER_TWINVQ = 18,
	AOT_ESCAPE = 19,
	AOT_HVXC = 20,
	AOT_L1 = 21,
	AOT_L2 = 22,
	AOT_L3 = 23,
	AOT_LD_SURROUND = 24,
	AOT_MAINSYNTH = 25,
	AOT_MIDI = 26,
	AOT_NULL = 27,
	AOT_PS = 28,
	AOT_SAFX = 29,
	AOT_SAOC = 30,
	AOT_SBR = 31,
	AOT_SLS_NON_CORE = 32,
	AOT_SLS = 33,
	AOT_SMR_MAIN = 34,
	AOT_SMR_SIMPLE = 35,
	AOT_SSC = 36,
	AOT_SURROUND = 37,
	AOT_TTSI = 12 ///< N Text-To-Speech Interface,
	AOT_TWINVQ = 39,
	AOT_USAC_NOSBR = 40,
	AOT_USAC = 41,
	AOT_WAVESYNTH = 42
}
enum OutputFormat {
	FMT_H261 = 0,
	FMT_H263 = 1,
	FMT_MJPEG = 2,
	FMT_MPEG1 = 3
}
enum ContextDirection {
	LEFT = 0,
	TOP_LEFT = 0,
	TOP_RIGHT = 2,
	TOP = 3
}
enum SplitMode {
	SPLIT_HOR = 0,
	SPLIT_NONE = 1,
	SPLIT_VERT = 0
}
enum BlockType {
	DCT_BLOCK = 0,
	FILL_BLOCK = 0,
	HAAR_BLOCK = 2,
	IMAGE_BLOCK = 3,
	SKIP_BLOCK = 4
}
enum BlockType {
	DCT_BLOCK = 0,
	IMAGE_BLOCK = 1,
	SKIP_BLOCK = 0
}
enum CachePos {
	LEFT = 0,
	TOP_LEFT = 1,
	TOP = 2
}
enum FrameType {
	INTER_FRAME = 0,
	INTRA_FRAME = 0,
	SKIP_FRAME = 2
}
enum MSV1Mode {
	MODE_2COL = 0,
	MODE_8COL = 1,
	MODE_FILL = 2,
	MODE_SKIP = 0
}
enum __anon72bdf92a0103 {
}
enum ff_nvenc_pix_fmts {
	AV_PIX_FMT_0BGR32 = 0,
	AV_PIX_FMT_0RGB32 = 1,
	AV_PIX_FMT_CUDA = 2,
	AV_PIX_FMT_D3D11 = 3,
	AV_PIX_FMT_NONE = 4,
	AV_PIX_FMT_NV12 = 5,
	AV_PIX_FMT_P010 = 6,
	AV_PIX_FMT_P016 = 7,
	AV_PIX_FMT_YUV420P = 8,
	AV_PIX_FMT_YUV444P16 = 9,
	AV_PIX_FMT_YUV444P = 10
}
enum __anon1b6592500103 {
	PRESET_BD = 0,
	PRESET_DEFAULT = 0,
	PRESET_FAST = 2,
	PRESET_HP = 3,
	PRESET_HQ = 4,
	PRESET_LOSSLESS_DEFAULT = 5,
	PRESET_LOSSLESS_HP = 6,
	PRESET_LOW_LATENCY_DEFAULT = 7,
	PRESET_LOW_LATENCY_HP = 8,
	PRESET_LOW_LATENCY_HQ = 9,
	PRESET_MEDIUM = 10,
	PRESET_SLOW = 11
}
enum __anon1b6592500203 {
	NV_ENC_H264_PROFILE_BASELINE = 0,
	NV_ENC_H264_PROFILE_HIGH_444P = 1,
	NV_ENC_H264_PROFILE_HIGH = 2,
	NV_ENC_H264_PROFILE_MAIN = 3
}
enum __anon1b6592500303 {
	NV_ENC_HEVC_PROFILE_MAIN_10 = 0,
	NV_ENC_HEVC_PROFILE_MAIN = 1,
	NV_ENC_HEVC_PROFILE_REXT = 2
}
enum __anon1b6592500403 {
	NVENC_LOSSLESS = 2,
	NVENC_LOWLATENCY = 1,
	NVENC_ONE_PASS = 4,
	NVENC_TWO_PASSES = 8
}
enum __anon1b6592500503 {
	ANY_DEVICE = 0,
	LIST_DEVICES = -2
}
enum omx_encoder_pix_fmts {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_YUV420P = 1
}
enum WindowTypes {
	WINDOW_TYPE_8SHORT = 3,
	WINDOW_TYPE_EXT4 = 1,
	WINDOW_TYPE_EXT5 = 2,
	WINDOW_TYPE_EXT6 = 3,
	WINDOW_TYPE_EXT7 = 4,
	WINDOW_TYPE_LONG_START = 5,
	WINDOW_TYPE_LONG_STOP = 6,
	WINDOW_TYPE_LONG = 0
}
enum OpusBandwidth {
	OPUS_BANDWIDTH_FULLBAND = 0,
	OPUS_BANDWIDTH_MEDIUMBAND = 1,
	OPUS_BANDWIDTH_NARROWBAND = 2,
	OPUS_BANDWIDTH_SUPERWIDEBAND = 3,
	OPUS_BANDWIDTH_WIDEBAND = 4,
	OPUS_BANDWITH_NB = 5
}
enum OpusMode {
	OPUS_MODE_CELT = 0,
	OPUS_MODE_HYBRID = 1,
	OPUS_MODE_NB = 2,
	OPUS_MODE_SILK = 3
}
enum CeltBlockSize {
	CELT_BLOCK_120 = 0,
	CELT_BLOCK_240 = 1,
	CELT_BLOCK_480 = 2,
	CELT_BLOCK_960 = 3,
	CELT_BLOCK_NB = 4
}
enum CeltSpread {
	CELT_SPREAD_AGGRESSIVE = 0,
	CELT_SPREAD_LIGHT = 1,
	CELT_SPREAD_NONE = 2,
	CELT_SPREAD_NORMAL = 3
}
enum SegmentType {
	DISPLAY_SEGMENT = 0x80,
	OBJECT_SEGMENT = 0x15,
	PALETTE_SEGMENT = 0x14,
	PRESENTATION_SEGMENT = 0x16,
	WINDOW_SEGMENT = 0x17
}
enum PNGHeaderState {
	PNG_IHDR = 1 << 0,
	PNG_PLTE = 1 << 1
}
enum PNGImageState {
	PNG_ALLIMAGE = 1 << 1,
	PNG_IDAT = 1 << 0
}
enum codec_ids {
	AV_CODEC_ID_NONE = 0,
	AV_CODEC_ID_PRORES = 1
}
enum __anon56a3f39c0103 {
	PRORES_PROFILE_4444XQ = 0,
	PRORES_PROFILE_4444 = 1,
	PRORES_PROFILE_AUTO = -1,
	PRORES_PROFILE_HQ = 3,
	PRORES_PROFILE_LT = 4,
	PRORES_PROFILE_PROXY = 0,
	PRORES_PROFILE_STANDARD = 6
}
enum __anon56a3f39c0203 {
	QUANT_MAT_DEFAULT = 0,
	QUANT_MAT_HQ = 1,
	QUANT_MAT_LT = 2,
	QUANT_MAT_PROXY_CHROMA = 3,
	QUANT_MAT_PROXY = 0,
	QUANT_MAT_STANDARD = 5,
	QUANT_MAT_XQ_LUMA = 6
}
enum PsdColorMode {
	PSD_BITMAP = 0,
	PSD_CMYK = 1,
	PSD_DUOTONE = 2,
	PSD_GRAYSCALE = 3,
	PSD_INDEXED = 4,
	PSD_LAB = 5,
	PSD_MULTICHANNEL = 6,
	PSD_RGB = 7
}
enum PsdCompr {
	PSD_RAW = 0,
	PSD_RLE = 1,
	PSD_ZIP_WITHOUT_P = 2,
	PSD_ZIP_WITH_P = 3
}
enum __anon01bd7ae30103 {
	STATE_GET_BUFFER = 0,
	STATE_GET_FORMAT = 1,
	STATE_INPUT_READY = 2,
	STATE_SETTING_UP = 3,
	STATE_SETUP_FINISHED = 4
}
enum __anondc9348d20103 {
	I_F_Q = -1 /**< insufficient frame quality */,
	RATE_FULL = 1,
	RATE_HALF = 2,
	RATE_OCTAVE = 3,
	RATE_QUARTER = 4,
	SILENCE = 5
}
enum QuickdrawOpcodes {
	CLIP = 0x0001,
	DIRECTBITSRECT = 1,
	DIRECTBITSRGN = 2,
	EOP = 0x00FF,
	LONGCOMMENT = 4,
	PACKBITSRECT = 0x0098,
	PACKBITSRGN = 6,
	SHORTCOMMENT = 0x00A0
}
enum pix_fmts {
}
enum LoadPlugin {
	LOAD_PLUGIN_HEVC_HW = 0,
	LOAD_PLUGIN_HEVC_SW = 1,
	LOAD_PLUGIN_NONE = 2
}
enum LoadPlugin {
	LOAD_PLUGIN_HEVC_HW = 0,
	LOAD_PLUGIN_HEVC_SW = 1,
	LOAD_PLUGIN_NONE = 2
}
enum RemoveFreq {
	REMOVE_FREQ_ALL = 0,
	REMOVE_FREQ_KEYFRAME = 1,
	REMOVE_FREQ_NONKEYFRAME = 2
}
enum RV40BlockTypes {
	RV34_MB_B_BACKWARD = 0,
	RV34_MB_B_BIDIR = 1,
	RV34_MB_B_DIRECT = 2,
	RV34_MB_B_FORWARD = 3,
	RV34_MB_P_16x16 = 4,
	RV34_MB_P_16x8 = 5,
	RV34_MB_P_8x16 = 6,
	RV34_MB_P_8x8 = 7,
	RV34_MB_P_MIX16x16 = 8,
	RV34_MB_SKIP = 9,
	RV34_MB_TYPES = 10,
	RV34_MB_TYPE_INTRA16x16 = 11,
	RV34_MB_TYPE_INTRA = 12
}
enum RV40BlockPos {
	POS_BOTTOM = 0,
	POS_CUR = 1,
	POS_LEFT = 2,
	POS_TOP = 3
}
enum GlyphDir {
	DIR_DOWN = 0,
	DIR_LEFT = 1,
	DIR_RIGHT = 2,
	DIR_UP = 3,
	NO_DIR = 4
}
enum GlyphEdge {
	BOTTOM_EDGE = 0,
	LEFT_EDGE = 1,
	NO_EDGE = 2,
	RIGHT_EDGE = 3,
	TOP_EDGE = 4
}
enum __anon730db7ae0103 {
}
enum __anon730db7ae0203 {
}
enum __anond54b94140103 {
	MODE_16k = 0,
	MODE_5k0 = 1,
	MODE_6k5 = 2,
	MODE_8k5 = 3,
	MODE_COUNT = 4
}
enum SmkBlockTypes {
	SMK_BLK_FILL = 3,
	SMK_BLK_FULL = 1,
	SMK_BLK_MONO = 0,
	SMK_BLK_SKIP = 2
}
enum __anonb467060c0103 {
	SNAPPY_COPY_1 = 0,
	SNAPPY_COPY_2 = 1,
	SNAPPY_COPY_4 = 2,
	SNAPPY_LITERAL = 3
}
enum __anon332a437b0103 {
}
enum __anon332a437b0203 {
}
enum TAKCodecType {
	TAK_CODEC_MONO_STEREO = 2,
	TAK_CODEC_MULTICHANNEL = 4
}
enum TAKFrameSizeType {
	TAK_FST_1024 = 0,
	TAK_FST_125ms = 1,
	TAK_FST_16384 = 2,
	TAK_FST_188ms = 3,
	TAK_FST_2048 = 4,
	TAK_FST_250ms = 5,
	TAK_FST_4096 = 6,
	TAK_FST_512 = 7,
	TAK_FST_8192 = 8,
	TAK_FST_94ms = 0
}
enum TAKMetaDataType {
	TAK_METADATA_ENCODER = 0,
	TAK_METADATA_END = 0,
	TAK_METADATA_LAST_FRAME = 2,
	TAK_METADATA_MD5 = 3,
	TAK_METADATA_PADDING = 4,
	TAK_METADATA_SEEKTABLE = 5,
	TAK_METADATA_SIMPLE_WAVE_DATA = 6,
	TAK_METADATA_STREAMINFO = 7
}
enum TargaCompr {
	TGA_BW = 3 // black & white or grayscale,
	TGA_NODATA = 0 // no image data,
	TGA_PAL = 1 // palettized,
	TGA_RGB = 2 // true-color,
	TGA_RLE = 8 // flag pointing that data is RLE-coded
}
enum TargaFlags {
	TGA_INTERLEAVE2 = 0x40 // 2-way interleave odd then even lines,
	TGA_INTERLEAVE4 = 0x80 // 4-way interleave,
	TGA_RIGHTTOLEFT = 0x10 // right-to-left (flipped horizontally),
	TGA_TOPTOBOTTOM = 0x20 // top-to-bottom (NOT flipped vertically)
}
enum TDSCCursorFormat {
	CUR_FMT_BGRA = 0x20010004,
	CUR_FMT_MONO = 0x01010004,
	CUR_FMT_RGBA = 0x20010008
}
enum tf_transform {
	TRANSFORM_DCT = 0,
	TRANSFORM_FFT = 1,
	TRANSFORM_MDCT = 2,
	TRANSFORM_RDFT = 3
}
enum TiffCompr {
	TIFF_ADOBE_DEFLATE = 0,
	TIFF_CCITT_RLE = 1,
	TIFF_DEFLATE = 0x80B2,
	TIFF_G3 = 3,
	TIFF_G4 = 4,
	TIFF_JPEG = 5,
	TIFF_LZMA = 0x886D,
	TIFF_LZW = 7,
	TIFF_NEWJPEG = 8,
	TIFF_PACKBITS = 0x8005,
	TIFF_RAW = 1
}
enum TiffGeoTagKey {
	TIFF_GEOGRAPHIC_TYPE_GEOKEY = 2048,
	TIFF_GEOG_ANGULAR_UNITS_GEOKEY = 2054,
	TIFF_GEOG_ANGULAR_UNIT_SIZE_GEOKEY = 2055,
	TIFF_GEOG_AZIMUTH_UNITS_GEOKEY = 2060,
	TIFF_GEOG_CITATION_GEOKEY = 2049,
	TIFF_GEOG_ELLIPSOID_GEOKEY = 2056,
	TIFF_GEOG_GEODETIC_DATUM_GEOKEY = 2050,
	TIFF_GEOG_INV_FLATTENING_GEOKEY = 2059,
	TIFF_GEOG_LINEAR_UNITS_GEOKEY = 2052,
	TIFF_GEOG_LINEAR_UNIT_SIZE_GEOKEY = 2053,
	TIFF_GEOG_PRIME_MERIDIAN_GEOKEY = 2051,
	TIFF_GEOG_PRIME_MERIDIAN_LONG_GEOKEY = 2061,
	TIFF_GEOG_SEMI_MAJOR_AXIS_GEOKEY = 2057,
	TIFF_GEOG_SEMI_MINOR_AXIS_GEOKEY = 2058,
	TIFF_GT_CITATION_GEOKEY = 1026,
	TIFF_GT_MODEL_TYPE_GEOKEY = 1024,
	TIFF_GT_RASTER_TYPE_GEOKEY = 1025,
	TIFF_PCS_CITATION_GEOKEY = 3073,
	TIFF_PROJECTED_CS_TYPE_GEOKEY = 3072,
	TIFF_PROJECTION_GEOKEY = 3074,
	TIFF_PROJ_AZIMUTH_ANGLE_GEOKEY = 3094,
	TIFF_PROJ_CENTER_EASTING_GEOKEY = 3090,
	TIFF_PROJ_CENTER_LAT_GEOKEY = 3089,
	TIFF_PROJ_CENTER_LONG_GEOKEY = 3088,
	TIFF_PROJ_CENTER_NORTHING_GEOKEY = 3091,
	TIFF_PROJ_COORD_TRANS_GEOKEY = 3075,
	TIFF_PROJ_FALSE_EASTING_GEOKEY = 3082,
	TIFF_PROJ_FALSE_NORTHING_GEOKEY = 3083,
	TIFF_PROJ_FALSE_ORIGIN_EASTING_GEOKEY = 3086,
	TIFF_PROJ_FALSE_ORIGIN_LAT_GEOKEY = 3085,
	TIFF_PROJ_FALSE_ORIGIN_LONG_GEOKEY = 3084,
	TIFF_PROJ_FALSE_ORIGIN_NORTHING_GEOKEY = 3087,
	TIFF_PROJ_LINEAR_UNITS_GEOKEY = 3076,
	TIFF_PROJ_LINEAR_UNIT_SIZE_GEOKEY = 3077,
	TIFF_PROJ_NAT_ORIGIN_LAT_GEOKEY = 3081,
	TIFF_PROJ_NAT_ORIGIN_LONG_GEOKEY = 3080,
	TIFF_PROJ_SCALE_AT_CENTER_GEOKEY = 3093,
	TIFF_PROJ_SCALE_AT_NAT_ORIGIN_GEOKEY = 3092,
	TIFF_PROJ_STD_PARALLEL1_GEOKEY = 3078,
	TIFF_PROJ_STD_PARALLEL2_GEOKEY = 3079,
	TIFF_PROJ_STRAIGHT_VERT_POLE_LONG_GEOKEY = 3095,
	TIFF_VERTICAL_CITATION_GEOKEY = 4097,
	TIFF_VERTICAL_CS_TYPE_GEOKEY = 4096,
	TIFF_VERTICAL_DATUM_GEOKEY = 4098,
	TIFF_VERTICAL_UNITS_GEOKEY = 4099
}
enum TiffGeoTagType {
	GEOTIFF_DOUBLE = 34736,
	GEOTIFF_SHORT = 0,
	GEOTIFF_STRING = 34737
}
enum TiffPhotometric {
	TIFF_PHOTOMETRIC_ALPHA_MASK = 0,
	TIFF_PHOTOMETRIC_BLACK_IS_ZERO = 1,
	TIFF_PHOTOMETRIC_CFA = 32803 /* Color Filter Array (DNG) */,
	TIFF_PHOTOMETRIC_CIE_LAB = 8 /* 1976 CIE L*a*b* */,
	TIFF_PHOTOMETRIC_ICC_LAB = 4,
	TIFF_PHOTOMETRIC_ITU_LAB = 5,
	TIFF_PHOTOMETRIC_LINEAR_RAW = 34892 /* Linear Raw (DNG) */,
	TIFF_PHOTOMETRIC_LOG_LUV = 7,
	TIFF_PHOTOMETRIC_LOG_L = 32844 /* CIE Log2(L) */,
	TIFF_PHOTOMETRIC_NONE = -1,
	TIFF_PHOTOMETRIC_PALETTE = 10,
	TIFF_PHOTOMETRIC_RGB = 11,
	TIFF_PHOTOMETRIC_SEPARATED = 12,
	TIFF_PHOTOMETRIC_WHITE_IS_ZERO = 13,
	TIFF_PHOTOMETRIC_YCBCR = 14
}
enum TiffTags {
	TIFF_ARTIST = 0x13B,
	TIFF_BPP = 1,
	TIFF_CFA_PATTERN_DIM = 0x828D,
	TIFF_CFA_PATTERN = 0x828E,
	TIFF_COMPR = 4,
	TIFF_COPYRIGHT = 0x8298,
	TIFF_DATE = 0x132,
	TIFF_DOCUMENT_NAME = 0x10D,
	TIFF_EXTRASAMPLES = 0x152,
	TIFF_FILL_ORDER = 0x10A,
	TIFF_GEO_ASCII_PARAMS = 0x87B1,
	TIFF_GEO_DOUBLE_PARAMS = 0x87B0,
	TIFF_GEO_KEY_DIRECTORY = 0x87AF,
	TIFF_HEIGHT = 13,
	TIFF_HOST_COMPUTER = 0x13C,
	TIFF_IMAGE_DESCRIPTION = 0x10E,
	TIFF_MAKE = 0x10F,
	TIFF_MODEL_PIXEL_SCALE = 0x830E,
	TIFF_MODEL_TIEPOINT = 0x8482,
	TIFF_MODEL_TRANSFORMATION = 0x8480,
	TIFF_MODEL = 0x110,
	TIFF_PAGE_NAME = 0x11D,
	TIFF_PAGE_NUMBER = 0x129,
	TIFF_PAL = 0x140,
	TIFF_PHOTOMETRIC = 0x106,
	TIFF_PLANAR = 0x11C,
	TIFF_PREDICTOR = 0x13D,
	TIFF_REFERENCE_BW = 0x214,
	TIFF_RES_UNIT = 0x128,
	TIFF_ROWSPERSTRIP = 0x116,
	TIFF_SAMPLES_PER_PIXEL = 0x115,
	TIFF_SOFTWARE_NAME = 0x131,
	TIFF_STRIP_OFFS = 0x111,
	TIFF_STRIP_SIZE = 33,
	TIFF_SUBFILE = 0xfe,
	TIFF_SUB_IFDS = 0x14A,
	TIFF_T4OPTIONS = 0x124,
	TIFF_T6OPTIONS = 37,
	TIFF_TILE_BYTE_COUNTS = 0x145,
	TIFF_TILE_LENGTH = 0x143,
	TIFF_TILE_OFFSETS = 0x144,
	TIFF_TILE_WIDTH = 0x142,
	TIFF_WHITE_LEVEL = 0xC61D,
	TIFF_WIDTH = 0x100,
	TIFF_XPOS = 0x11E,
	TIFF_XRES = 0x11A,
	TIFF_YCBCR_COEFFICIENTS = 0x211,
	TIFF_YCBCR_POSITIONING = 0x213,
	TIFF_YCBCR_SUBSAMPLING = 0x212,
	TIFF_YPOS = 0x11F,
	TIFF_YRES = 0x11B
}
enum TiffTypes {
	TIFF_BYTE = 1,
	TIFF_DOUBLE = 1,
	TIFF_FLOAT = 2,
	TIFF_IFD = 3,
	TIFF_LONG = 4,
	TIFF_RATIONAL = 5,
	TIFF_SBYTE = 6,
	TIFF_SHORT = 7,
	TIFF_SLONG = 8,
	TIFF_SRATIONAL = 9,
	TIFF_SSHORT = 10,
	TIFF_STRING = 11,
	TIFF_UNDEFINED = 12
}
enum codec_ids {
	AV_CODEC_ID_NONE = 0,
	AV_CODEC_ID_TRUEHD = 1
}
enum TM2_BLOCKS {
	TM2_HI_RES = 0,
	TM2_LOW_RES = 1,
	TM2_MED_RES = 2,
	TM2_MOTION = 3,
	TM2_NULL_RES = 4,
	TM2_STILL = 5,
	TM2_UPDATE = 6
}
enum TM2_STREAMS {
	TM2_C_HI = 0,
	TM2_C_LO = 1,
	TM2_L_HI = 2,
	TM2_L_LO = 3,
	TM2_MOT = 4,
	TM2_NUM_STREAMS = 5,
	TM2_TYPE = 6,
	TM2_UPD = 7
}
enum ff_twinvq_wtype_to_ftype_table {
	TWINVQ_FT_LONG = 0,
	TWINVQ_FT_LONG = 1,
	TWINVQ_FT_MEDIUM = 2,
	TWINVQ_FT_MEDIUM = 3,
	TWINVQ_FT_SHORT = 4
}
enum TwinVQCodec {
	TWINVQ_CODEC_METASOUND = 0,
	TWINVQ_CODEC_VQF = 1
}
enum TwinVQFrameType {
	TWINVQ_FT_LONG = 0,
	TWINVQ_FT_MEDIUM = 1,
	TWINVQ_FT_PPC = 2,
	TWINVQ_FT_SHORT = 0 ///< Short frame (divided in n sub-blocks)
}
enum map {
}
enum __anonf31b76b60103 {
	PRED_GRADIENT = 0,
	PRED_LEFT = 1,
	PRED_MEDIAN = 2,
	PRED_NONE = 0
}
enum __anonf31b76b60203 {
	COMP_HUFF = 0,
	COMP_NONE = 0
}
enum __anonf31b76b60303 {
	UTVIDEO_420 = MKTAG('Y' 'V' '1' '2'),
	UTVIDEO_422 = MKTAG('Y' 'U' 'Y' '2'),
	UTVIDEO_444 = MKTAG('Y' 'V' '2' '4'),
	UTVIDEO_RGBA = MKTAG(0x00 0x00 0x02 0x18),
	UTVIDEO_RGB = MKTAG(0x00 0x00 0x01 0x18)
}
enum V4L2Buffer_status {
	V4L2BUF_AVAILABLE = 0,
	V4L2BUF_IN_DRIVER = 1,
	V4L2BUF_RET_USER = 2
}
enum __anonb6a55f6a0103 {
	MAX_PARAM_BUFFERS = 16
}
enum __anon57b357140103 {
	MAX_CONFIG_ATTRIBUTES = 4,
	MAX_DPB_SIZE = 16,
	MAX_GLOBAL_PARAMS = 4,
	MAX_PARAM_BUFFER_SIZE = 1024,
	MAX_PICTURE_REFERENCES = 2,
	MAX_REORDER_DELAY = 16
}
enum __anon57b357140203 {
	PICTURE_TYPE_B = 3,
	PICTURE_TYPE_IDR = 0,
	PICTURE_TYPE_I = 1,
	PICTURE_TYPE_P = 2
}
enum __anon57b357140703 {
	FLAG_B_PICTURES = 1 << 3,
	FLAG_B_PICTURE_REFERENCES = 1 << 4,
	FLAG_CONSTANT_QUALITY_ONLY = 1 << 1,
	FLAG_INTRA_ONLY = 1 << 2,
	FLAG_NON_IDR_KEY_PICTURES = 1 << 5,
	FLAG_SLICE_CONTROL = 1 << 0
}
enum __anonfe95cdb20103 {
	SEI_IDENTIFIER = 0x02,
	SEI_RECOVERY_POINT = 0x04,
	SEI_TIMING = 0x01
}
enum __anonfe95d1f30103 {
	SEI_CONTENT_LIGHT_LEVEL = 0x10,
	SEI_MASTERING_DISPLAY = 0x08
}
enum VBFlags {
	VB_HAS_AUDIO = 0x04,
	VB_HAS_GMC = 0x01,
	VB_HAS_LENGTH = 0x20,
	VB_HAS_PALETTE = 0x10,
	VB_HAS_VIDEO = 0x08
}
enum BMVTypes {
	BMV_TYPE_BACKWARD = 0,
	BMV_TYPE_DIRECT = 1,
	BMV_TYPE_FORWARD = 2,
	BMV_TYPE_INTERPOLATED = 3
}
enum COTypes {
	CONDOVER_ALL = 0,
	CONDOVER_NONE = 0,
	CONDOVER_SELECT = 2
}
enum CodingSet {
	CS_HIGH_MOT_INTER = 0,
	CS_HIGH_MOT_INTRA = 0,
	CS_HIGH_RATE_INTER = 2,
	CS_HIGH_RATE_INTRA = 3,
	CS_LOW_MOT_INTER = 4,
	CS_LOW_MOT_INTRA = 5,
	CS_MID_RATE_INTER = 6,
	CS_MID_RATE_INTRA = 7
}
enum DQDoubleEdge {
	DQDOUBLE_BEDGE_BOTTOMLEFT = 0,
	DQDOUBLE_BEDGE_BOTTOMRIGHT = 1,
	DQDOUBLE_BEDGE_TOPLEFT = 2,
	DQDOUBLE_BEDGE_TOPRIGHT = 3
}
enum DQProfile {
	DQPROFILE_ALL_MBS = 0,
	DQPROFILE_DOUBLE_EDGES = 1,
	DQPROFILE_FOUR_EDGES = 2,
	DQPROFILE_SINGLE_EDGE = 3
}
enum DQSingleEdge {
	DQSINGLE_BEDGE_BOTTOM = 0,
	DQSINGLE_BEDGE_LEFT = 1,
	DQSINGLE_BEDGE_RIGHT = 2,
	DQSINGLE_BEDGE_TOP = 3
}
enum FrameCodingMode {
	ILACE_FIELD = 0,
	ILACE_FRAME = 1,
	PROGRESSIVE = 0 ///< in the bitstream is reported as 00b
}
enum Imode {
	IMODE_COLSKIP = 0,
	IMODE_DIFF2 = 1,
	IMODE_DIFF6 = 2,
	IMODE_NORM2 = 3,
	IMODE_NORM6 = 4,
	IMODE_RAW = 5,
	IMODE_ROWSKIP = 6
}
enum MBModesIntfr {
	MV_PMODE_INTFR_1MV = 0,
	MV_PMODE_INTFR_2MV_FIELD = 1,
	MV_PMODE_INTFR_2MV = 2,
	MV_PMODE_INTFR_4MV_FIELD = 3,
	MV_PMODE_INTFR_4MV = 4,
	MV_PMODE_INTFR_INTRA = 5
}
enum MVModes {
	MV_PMODE_1MV_HPEL_BILIN = 0,
	MV_PMODE_1MV_HPEL = 1,
	MV_PMODE_1MV = 2,
	MV_PMODE_INTENSITY_COMP = 3,
	MV_PMODE_MIXED_MV = 4
}
enum QuantMode {
	QUANT_FRAME_EXPLICIT = 0,
	QUANT_FRAME_IMPLICIT = 1,
	QUANT_NON_UNIFORM = 2,
	QUANT_UNIFORM = 3
}
enum TransformTypes {
	TT_4X4 = 0,
	TT_4X8_LEFT = 1,
	TT_4X8_RIGHT = 2,
	TT_4X8 = 3,
	TT_8X4_BOTTOM = 4,
	TT_8X4_TOP = 5,
	TT_8X4 = 6,
	TT_8X8 = 7
}
enum Profile {
	PROFILE_ADVANCED = 0,
	PROFILE_COMPLEX = 1,
	PROFILE_MAIN = 2,
	PROFILE_SIMPLE = 3
}
enum VC1Code {
	VC1_CODE_ENDOFSEQ = 0x0000010A,
	VC1_CODE_ENTRYPOINT = 1,
	VC1_CODE_FIELD = 2,
	VC1_CODE_FRAME = 3,
	VC1_CODE_RES0 = 0x00000100,
	VC1_CODE_SEQHDR = 5,
	VC1_CODE_SLICE = 6
}
enum __anonbf76b1670103 {
	NO_MATCH = 0,
	ONE_ZERO = 1,
	ONE = 2,
	TWO_ZEROS = 3
}
enum vc1_hwaccel_pixfmt_list_420 {
	AV_PIX_FMT_CUDA = 0,
	AV_PIX_FMT_D3D11VA_VLD = 1,
	AV_PIX_FMT_D3D11 = 2,
	AV_PIX_FMT_DXVA2_VLD = 3,
	AV_PIX_FMT_NONE = 4,
	AV_PIX_FMT_VAAPI = 5,
	AV_PIX_FMT_VDPAU = 6,
	AV_PIX_FMT_YUV420P = 7
}
enum VC2_QM {
	VC2_QM_COL = 0,
	VC2_QM_DEF = 0,
	VC2_QM_FLAT = 2,
	VC2_QM_NB = 3
}
enum allowed_pix_fmts {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_YUV420P10 = 1,
	AV_PIX_FMT_YUV420P12 = 2,
	AV_PIX_FMT_YUV420P = 3,
	AV_PIX_FMT_YUV422P10 = 4,
	AV_PIX_FMT_YUV422P12 = 5,
	AV_PIX_FMT_YUV422P = 6,
	AV_PIX_FMT_YUV444P10 = 7,
	AV_PIX_FMT_YUV444P12 = 8,
	AV_PIX_FMT_YUV444P = 9
}
enum VC2TransformType {
	VC2_TRANSFORMS_NB = 0,
	VC2_TRANSFORM_13_7 = 2 /* Deslauriers-Dubuc (137) */,
	VC2_TRANSFORM_5_3 = 1 /* LeGall (53) */,
	VC2_TRANSFORM_9_7_I = 6 /* Daubechies (97) */,
	VC2_TRANSFORM_9_7 = 0 /* Deslauriers-Dubuc (97) */,
	VC2_TRANSFORM_FIDEL = 5 /* Fidelity filter */,
	VC2_TRANSFORM_HAAR_S = 4 /* Haar with 1 shift/lvl */,
	VC2_TRANSFORM_HAAR = 3 /* Haar without shift */
}
enum __anoneca4b2ef0103 {
	kCMVideoCodecType_HEVC = 'hvc1'
}
enum VTH264Entropy {
	VT_CABAC = 0,
	VT_CAVLC = 1,
	VT_ENTROPY_NOT_SET = 2
}
enum VT_H264Profile {
	H264_PROF_AUTO = 0,
	H264_PROF_BASELINE = 1,
	H264_PROF_COUNT = 2,
	H264_PROF_HIGH = 3,
	H264_PROF_MAIN = 4
}
enum VT_HEVCProfile {
	HEVC_PROF_AUTO = 0,
	HEVC_PROF_COUNT = 1,
	HEVC_PROF_MAIN10 = 2,
	HEVC_PROF_MAIN = 3
}
enum __anonc02d77e50103 {
	kCMVideoCodecType_HEVC = 'hvc1'
}
enum pix_fmts {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_NV12 = 1,
	AV_PIX_FMT_VIDEOTOOLBOX = 2,
	AV_PIX_FMT_YUV420P = 3
}
enum EncTypes {
	MAGIC_WMVd = 0x574D5664,
	MAGIC_WMVe = 1,
	MAGIC_WMVf = 2,
	MAGIC_WMVg = 3,
	MAGIC_WMVh = 4,
	MAGIC_WMVi = 5,
	MAGIC_WMVj = 6
}
enum HexTile_Flags {
	HT_BKG = 2 // background color is present,
	HT_CLR = 16 // each subrect has own color,
	HT_FG = 4 // foreground color is present,
	HT_RAW = 1 // tile is raw,
	HT_SUB = 8 // subrects are present
}
enum theora_pix_fmts {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_YUV420P = 1,
	AV_PIX_FMT_YUV422P = 2,
	AV_PIX_FMT_YUV444P = 3
}
enum __anondca85fe70103 {
	VP56_FRAME_CURRENT = 0,
	VP56_FRAME_GOLDEN2 = 3,
	VP56_FRAME_GOLDEN = 2,
	VP56_FRAME_NONE = -1,
	VP56_FRAME_PREVIOUS = 1
}
enum __anondca85fe70203 {
	VP56_MB_INTER_4V = 7 /**< Inter MB 4 vectors from previous frame */,
	VP56_MB_INTER_DELTA_GF = 6 /**< Inter MB above/left vector + delta from golden frame */,
	VP56_MB_INTER_DELTA_PF = 2 /**< Inter MB above/left vector + delta from previous frame */,
	VP56_MB_INTER_NOVEC_GF = 5 /**< Inter MB no vector from golden frame */,
	VP56_MB_INTER_NOVEC_PF = 0 /**< Inter MB no vector from previous frame */,
	VP56_MB_INTER_V1_GF = 8 /**< Inter MB first vector from golden frame */,
	VP56_MB_INTER_V1_PF = 3 /**< Inter MB first vector from previous frame */,
	VP56_MB_INTER_V2_GF = 9 /**< Inter MB second vector from golden frame */,
	VP56_MB_INTER_V2_PF = 4 /**< Inter MB second vector from previous frame */,
	VP56_MB_INTRA = 1 /**< Intra MB */
}
enum __anon734af78f0103 {
}
enum __anon734af78f0203 {
}
enum __anon734af78f0303 {
}
enum __anon734af78f0403 {
}
enum pix_fmts {
}
enum dct_token {
	DCT_0 = 0,
	DCT_1 = 1,
	DCT_2 = 2,
	DCT_3 = 3,
	DCT_4 = 4,
	DCT_CAT1 = 5,
	DCT_CAT2 = 6,
	DCT_CAT3 = 7,
	DCT_CAT4 = 8,
	DCT_CAT5 = 9,
	DCT_CAT6 = 10,
	DCT_EOB = 11,
	NUM_DCT_TOKENS = 12
}
enum inter_mvmode {
	VP8_MVMODE_MV = 0,
	VP8_MVMODE_SPLIT = 1,
	VP8_MVMODE_ZERO = MODE_I4x4 + 1
}
enum inter_splitmvmode {
	VP8_SPLITMVMODE_16x8 = 0 ///< 2 16x8 blocks (vertical),
	VP8_SPLITMVMODE_4x4 = 1,
	VP8_SPLITMVMODE_8x16 = 2,
	VP8_SPLITMVMODE_8x8 = 3,
	VP8_SPLITMVMODE_NONE = 4
}
enum colorspaces {
}
enum pix_fmt_for_ss {
}
enum pix_fmt_rgb {
}
enum FilterMode {
	FILTER_8TAP_REGULAR = 0,
	FILTER_8TAP_SHARP = 1,
	FILTER_8TAP_SMOOTH = 2,
	FILTER_BILINEAR = 3,
	FILTER_SWITCHABLE = N_FILTERS,
	N_FILTERS = 5
}
enum IntraPredMode {
	DC_127_PRED = 0,
	DC_128_PRED = 1,
	DC_129_PRED = 2,
	DC_PRED = 3,
	DIAG_DOWN_LEFT_PRED = 4,
	DIAG_DOWN_RIGHT_PRED = 5,
	HOR_DOWN_PRED = 6,
	HOR_PRED = 7,
	HOR_UP_PRED = 8,
	LEFT_DC_PRED = 9,
	N_INTRA_PRED_MODES = 10,
	TM_VP8_PRED = 11,
	TOP_DC_PRED = 12,
	VERT_LEFT_PRED = 13,
	VERT_PRED = 14,
	VERT_RIGHT_PRED = 15
}
enum TxfmMode {
	N_TXFM_MODES = 0,
	N_TXFM_SIZES = 1,
	TX_16X16 = 2,
	TX_32X32 = 3,
	TX_4X4 = 4,
	TX_8X8 = 5,
	TX_SWITCHABLE = N_TXFM_SIZES
}
enum TxfmType {
	ADST_ADST = 0,
	ADST_DCT = 1,
	DCT_ADST = 2,
	DCT_DCT = 3,
	N_TXFM_TYPES = 4
}
enum vp9_metadata_codec_ids {
	AV_CODEC_ID_NONE = 0,
	AV_CODEC_ID_VP9 = 1
}
enum vp9_raw_reorder_codec_ids {
	AV_CODEC_ID_NONE = 0,
	AV_CODEC_ID_VP9 = 1
}
enum codec_ids {
	AV_CODEC_ID_NONE = 0,
	AV_CODEC_ID_VP9 = 1
}
enum ff_vp9_filter_lut {
	FILTER_8TAP_REGULAR = 0,
	FILTER_8TAP_SHARP = 1,
	FILTER_8TAP_SMOOTH = 2
}
enum ff_vp9_intra_txfm_type {
}
enum MVJoint {
	MV_JOINT_HV = 0,
	MV_JOINT_H = 1,
	MV_JOINT_V = 2,
	MV_JOINT_ZERO = 3
}
enum BlockLevel {
	BL_16X16 = 0,
	BL_32X32 = 1,
	BL_64X64 = 2,
	BL_8X8 = 3
}
enum BlockPartition {
	PARTITION_H = 0,
	PARTITION_NONE = 1,
	PARTITION_SPLIT = 2,
	PARTITION_V = 3
}
enum BlockSize {
	BS_16x16 = 0,
	BS_16x32 = 1,
	BS_16x8 = 2,
	BS_32x16 = 3,
	BS_32x32 = 4,
	BS_32x64 = 5,
	BS_4x4 = 6,
	BS_4x8 = 7,
	BS_64x32 = 8,
	BS_64x64 = 9,
	BS_8x16 = 10,
	BS_8x4 = 11,
	BS_8x8 = 12,
	N_BS_SIZES = 13
}
enum CompPredMode {
	PRED_COMPREF = 0,
	PRED_SINGLEREF = 1,
	PRED_SWITCHABLE = 2
}
enum InterPredMode {
	NEARESTMV = 10,
	NEARMV = 11,
	NEWMV = 13,
	ZEROMV = 12
}
enum WP_ID_Flags {
	WP_IDF_IGNORE = 0x20,
	WP_IDF_LONG = 0x80,
	WP_IDF_MASK = 0x3F,
	WP_IDF_ODD = 0x40
}
enum WP_ID {
	WP_ID_CHANINFO = 0,
	WP_ID_CORR = 1,
	WP_ID_DATA = 2,
	WP_ID_DECSAMPLES = 3,
	WP_ID_DECTERMS = 4,
	WP_ID_DECWEIGHTS = 5,
	WP_ID_DUMMY = 0,
	WP_ID_ENCINFO = 7,
	WP_ID_ENTROPY = 8,
	WP_ID_EXTRABITS = 9,
	WP_ID_FLOATINFO = 10,
	WP_ID_HYBRID = 11,
	WP_ID_INT32INFO = 12,
	WP_ID_SAMPLE_RATE = 0x27,
	WP_ID_SHAPING = 14
}
enum AlphaCompression {
	ALPHA_COMPRESSION_NONE = 0,
	ALPHA_COMPRESSION_VP8L = 1
}
enum AlphaFilter {
	ALPHA_FILTER_GRADIENT = 0,
	ALPHA_FILTER_HORIZONTAL = 1,
	ALPHA_FILTER_NONE = 2,
	ALPHA_FILTER_VERTICAL = 3
}
enum HuffmanIndex {
	HUFF_IDX_ALPHA = 3,
	HUFF_IDX_BLUE = 2,
	HUFF_IDX_DIST = 4,
	HUFF_IDX_GREEN = 0,
	HUFF_IDX_RED = 1
}
enum ImageRole {
	IMAGE_ROLE_ARGB = 0,
	IMAGE_ROLE_COLOR_INDEXING = 1,
	IMAGE_ROLE_COLOR_TRANSFORM = 2,
	IMAGE_ROLE_ENTROPY = 3,
	IMAGE_ROLE_NB = 4,
	IMAGE_ROLE_PREDICTOR = 5
}
enum PredictionMode {
	PRED_MODE_ADD_SUBTRACT_FULL = 0,
	PRED_MODE_ADD_SUBTRACT_HALF = 1,
	PRED_MODE_AVG_AVG_L_TL_AVG_T_TR = 2,
	PRED_MODE_AVG_L_TL = 3,
	PRED_MODE_AVG_L_T = 4,
	PRED_MODE_AVG_TL_T = 5,
	PRED_MODE_AVG_T_AVG_L_TR = 6,
	PRED_MODE_AVG_T_TR = 7,
	PRED_MODE_BLACK = 8,
	PRED_MODE_L = 9,
	PRED_MODE_SELECT = 10,
	PRED_MODE_TL = 11,
	PRED_MODE_TR = 12,
	PRED_MODE_T = 13
}
enum TransformType {
	COLOR_INDEXING_TRANSFORM = 3,
	COLOR_TRANSFORM = 1,
	PREDICTOR_TRANSFORM = 0,
	SUBTRACT_GREEN = 2
}
enum __anond072674c0103 {
	ACB_TYPE_ASYMMETRIC = 1 ///< adaptive codebook with per-frame pitch which,
	ACB_TYPE_HAMMING = 2 ///< Per-block pitch with signal generation using,
	ACB_TYPE_NONE = 0 ///< no adaptive codebook (only hardcoded fixed)
}
enum __anond072674c0203 {
	FCB_TYPE_AW_PULSES = 2 ///< Pitch-adaptive window (AW) pulse signals,
	FCB_TYPE_EXC_PULSES = 3 ///< Innovation (fixed) codebook pulse sets in,
	FCB_TYPE_HARDCODED = 1 ///< hardcoded (fixed) codebook with per-block,
	FCB_TYPE_SILENCE = 0 ///< comfort noise during silence
}
enum XFaceColor {
	XFACE_COLOR_BLACK = 0 XFACE_COLOR_GREY XFACE_COLOR_WHITE,
	XFACE_COLOR_GREY = 0 XFACE_COLOR_GREY XFACE_COLOR_WHITE,
	XFACE_COLOR_WHITE = 0 XFACE_COLOR_GREY XFACE_COLOR_WHITE
}
enum ZmbvFormat {
	ZMBV_FMT_15BPP = 5,
	ZMBV_FMT_16BPP = 6,
	ZMBV_FMT_1BPP = 1,
	ZMBV_FMT_24BPP = 7,
	ZMBV_FMT_2BPP = 2,
	ZMBV_FMT_32BPP = 8,
	ZMBV_FMT_4BPP = 3,
	ZMBV_FMT_8BPP = 4,
	ZMBV_FMT_NONE = 0
}
enum AVAppToDevMessageType {
	AV_APP_TO_DEV_GET_MUTE = MKBETAG('G' 'M' 'U' 'T'),
	AV_APP_TO_DEV_GET_VOLUME = MKBETAG('G' 'V' 'O' 'L'),
	AV_APP_TO_DEV_MUTE = MKBETAG(' ' 'M' 'U' 'T'),
	AV_APP_TO_DEV_NONE = MKBETAG('N''O''N''E'),
	AV_APP_TO_DEV_PAUSE = MKBETAG('P' 'A' 'U' ' '),
	AV_APP_TO_DEV_PLAY = MKBETAG('P' 'L' 'A' 'Y'),
	AV_APP_TO_DEV_SET_VOLUME = MKBETAG('S' 'V' 'O' 'L'),
	AV_APP_TO_DEV_TOGGLE_MUTE = MKBETAG('T' 'M' 'U' 'T'),
	AV_APP_TO_DEV_TOGGLE_PAUSE = MKBETAG('P' 'A' 'U' 'T'),
	AV_APP_TO_DEV_UNMUTE = MKBETAG('U' 'M' 'U' 'T'),
	AV_APP_TO_DEV_WINDOW_REPAINT = MKBETAG('R''E''P''A'),
	AV_APP_TO_DEV_WINDOW_SIZE = MKBETAG('G''E''O''M')
}
enum AVDevToAppMessageType {
	AV_DEV_TO_APP_BUFFER_OVERFLOW = MKBETAG('B''O''F''L'),
	AV_DEV_TO_APP_BUFFER_READABLE = MKBETAG('B''R''D'' '),
	AV_DEV_TO_APP_BUFFER_UNDERFLOW = MKBETAG('B''U''F''L'),
	AV_DEV_TO_APP_BUFFER_WRITABLE = MKBETAG('B''W''R'' '),
	AV_DEV_TO_APP_CREATE_WINDOW_BUFFER = MKBETAG('B''C''R''E'),
	AV_DEV_TO_APP_DESTROY_WINDOW_BUFFER = MKBETAG('B''D''E''S'),
	AV_DEV_TO_APP_DISPLAY_WINDOW_BUFFER = MKBETAG('B''D''I''S'),
	AV_DEV_TO_APP_MUTE_STATE_CHANGED = MKBETAG('C''M''U''T'),
	AV_DEV_TO_APP_NONE = MKBETAG('N''O''N''E'),
	AV_DEV_TO_APP_PREPARE_WINDOW_BUFFER = MKBETAG('B''P''R''E'),
	AV_DEV_TO_APP_VOLUME_LEVEL_CHANGED = MKBETAG('C''V''O''L')
}
enum __anon1a848d750103 {
	DIRECTION_IN = 0,
	DIRECTION_OUT = 1
}
enum DecklinkPtsSource {
	PTS_SRC_ABS_WALLCLOCK = 5,
	PTS_SRC_AUDIO = 1,
	PTS_SRC_NB = 2,
	PTS_SRC_REFERENCE = 3,
	PTS_SRC_VIDEO = 2,
	PTS_SRC_WALLCLOCK = 4
}
enum dshowDeviceType {
	AudioDevice = 1,
	VideoDevice = 0
}
enum dshowSourceFilterType {
	AudioSourceDevice = 1,
	VideoSourceDevice = 0
}
enum sample_fmts {
}
enum PulseAudioContextState {
	PULSE_CONTEXT_FINISHED = 0,
	PULSE_CONTEXT_INITIALIZING = 1,
	PULSE_CONTEXT_READY = 2
}
enum sample_fmts {
}
enum sample_fmts {
}
enum var_name {
	VAR_CH = 0,
	VAR_NB_IN_CHANNELS = 1,
	VAR_NB_OUT_CHANNELS = 2,
	VAR_N = 3,
	VAR_S = 4,
	VAR_T = 5,
	VAR_VARS_NB = 6
}
enum sample_fmts {
}
enum sample_fmts {
}
enum sample_fmts {
}
enum sample_fmts {
}
enum sample_fmts {
}
enum derivative_sample_fmts {
}
enum integral_sample_fmts {
}
enum sample_fmts {
}
enum sample_fmts {
}
enum CurveType {
	CBR = 0,
	CUB = 1,
	DESE = 2,
	DESI = 3,
	ESIN = 4,
	EXP = 5,
	HSIN = 6,
	IHSIN = 7,
	IPAR = 8,
	IQSIN = 9,
	LOG = 10,
	LOSI = 11,
	NB_CURVES = 12,
	NONE = 13,
	PAR = 14,
	QSIN = 15,
	QUA = 16,
	SQU = 17,
	TRI = 18
}
enum sample_fmts {
}
enum NoiseType {
	CUSTOM_NOISE = 0,
	NB_NOISE = 1,
	SHELLAC_NOISE = 2,
	VINYL_NOISE = 3,
	WHITE_NOISE = 4
}
enum OutModes {
	IN_MODE = 0,
	NB_MODES = 1,
	NOISE_MODE = 2,
	OUT_MODE = 3
}
enum sample_fmts {
}
enum __anonf12df80f0103 {
	VAR_BIN = 0,
	VAR_CHANNELS = 1,
	VAR_CHANNEL = 2,
	VAR_IMAG = 3,
	VAR_NBBINS = 4,
	VAR_PTS = 5,
	VAR_REAL = 6,
	VAR_SAMPLE_RATE = 7,
	VAR_VARS_NB = 8
}
enum sample_fmts {
}
enum pix_fmts {
}
enum sample_fmts {
}
enum sample_fmts {
}
enum pix_fmts {
}
enum sample_fmts {
}
enum sample_fmts {
}
enum sample_fmts {
}
enum FilterType {
	BUTTERWORTH = 0,
	CHEBYSHEV1 = 1,
	CHEBYSHEV2 = 2,
	NB_TYPES = 3
}
enum pix_fmts {
}
enum sample_fmts {
}
enum sample_fmts {
}
enum sample_fmts {
}
enum PulsatorModes {
	NB_MODES = 0,
	SAWDOWN = 1,
	SAWUP = 2,
	SINE = 3,
	SQUARE = 4,
	TRIANGLE = 5
}
enum PulsatorTimings {
	NB_TIMINGS = 0,
	UNIT_BPM = 1,
	UNIT_HZ = 2,
	UNIT_MS = 3
}
enum sample_fmts {
}
enum __anon3fcb75e50103 {
	YAE_ADJUST_POSITION = 0,
	YAE_FLUSH_OUTPUT = 1,
	YAE_LOAD_FRAGMENT = 2,
	YAE_OUTPUT_OVERLAP_ADD = 3,
	YAE_RELOAD_FRAGMENT = 4
}
enum sample_fmts {
}
enum FilterType {
	allpass = 0,
	bandpass = 1,
	bandreject = 2,
	bass = 3,
	biquad = 4,
	equalizer = 5,
	highpass = 6,
	highshelf = 7,
	lowpass = 8,
	lowshelf = 9,
	treble = 10
}
enum WidthType {
	HERTZ = 0,
	KHERTZ = 1,
	NB_WTYPE = 2,
	NONE = 3,
	OCTAVE = 4,
	QFACTOR = 5,
	SLOPE = 6
}
enum sample_fmts {
}
enum sample_fmts {
}
enum MappingMode {
	MAP_NONE = 0,
	MAP_ONE_INT = 1,
	MAP_ONE_STR = 2,
	MAP_PAIR_INT_INT = 3,
	MAP_PAIR_INT_STR = 4,
	MAP_PAIR_STR_INT = 5,
	MAP_PAIR_STR_STR = 6
}
enum sample_fmts {
}
enum sample_fmts {
}
enum sample_fmts {
}
enum sample_fmts {
}
enum sample_fmts {
}
enum sample_fmts {
}
enum sample_fmts {
}
enum Scale {
	NB_SCALE = 0,
	SCALE_LINLIN = 1,
	SCALE_LINLOG = 2,
	SCALE_LOGLIN = 3,
	SCALE_LOGLOG = 4
}
enum VarOffset {
	VAR_CHID = 0,
	VAR_CHLAYOUT = 1,
	VAR_CHS = 2,
	VAR_CH = 3,
	VAR_F = 4,
	VAR_NB = 5,
	VAR_SR = 6
}
enum WindowFunc {
	NB_WFUNC = 0,
	WFUNC_BHARRIS = 1,
	WFUNC_BLACKMAN = 2,
	WFUNC_BNUTTALL = 3,
	WFUNC_HAMMING = 4,
	WFUNC_HANN = 5,
	WFUNC_MNUTTALL3 = 6,
	WFUNC_NUTTALL3 = 7,
	WFUNC_NUTTALL = 8,
	WFUNC_RECTANGULAR = 9,
	WFUNC_TUKEY = 10
}
enum sample_fmts {
}
enum sample_fmts {
}
enum __anonf473c7520103 {
	HDCD_PE_INTERMITTENT = 1 /**< Some valid packets have PE set to on */,
	HDCD_PE_NEVER = 0 /**< All valid packets have PE set to off */,
	HDCD_PE_PERMANENT = 2 /**< All valid packets have PE set to on */
}
enum __anonf473c7520203 {
	HDCD_EFFECTUAL = 2 /**< HDCD packets appear and change the output in some way */,
	HDCD_NONE = 0 /**< HDCD packets do not (yet) appear */,
	HDCD_NO_EFFECT = 1 /**< HDCD packets appear but all control codes are NOP */
}
enum __anonf473c7520303 {
	HDCD_PVER_A = 1 /**< Packets of type A (8-bit control) discovered */,
	HDCD_PVER_B = 2 /**< Packets of type B (8-bit control 8-bit XOR) discovered */,
	HDCD_PVER_MIX = 3 /**< Packets of type A and B discovered most likely an encoding error */,
	HDCD_PVER_NONE = 0 /**< No packets (yet) discovered */
}
enum __anonf473c7520403 {
	HDCD_ANA_CDT = 3,
	HDCD_ANA_LLE = 1,
	HDCD_ANA_OFF = 0,
	HDCD_ANA_PE = 2,
	HDCD_ANA_TGM = 4,
	HDCD_ANA_TOP = 5 /**< used in max value of AVOption */
}
enum __anonf473c7520503 {
	HDCD_OK = 0,
	HDCD_TG_MISMATCH = 1
}
enum sample_fmts_in {
}
enum sample_fmts_out {
}
enum sample_fmts {
}
enum FrameType {
	FINAL_FRAME = 0,
	FIRST_FRAME = 1,
	FRAME_NB = 2,
	INNER_FRAME = 3,
	LINEAR_MODE = 4
}
enum LimiterState {
	ATTACK = 0,
	OUT = 1,
	RELEASE = 2,
	STATE_NB = 3,
	SUSTAIN = 4
}
enum PrintFormat {
	JSON = 0,
	NONE = 1,
	PF_NB = 2,
	SUMMARY = 3
}
enum sample_fmts {
}
enum sample_fmts {
}
enum sample_fmts {
}
enum sample_fmts {
}
enum sample_fmts {
}
enum sample_fmts {
}
enum sample_fmts {
}
enum SilenceDetect {
	D_PEAK = 0,
	D_RMS = 1
}
enum SilenceMode {
	SILENCE_COPY_FLUSH = 0,
	SILENCE_COPY = 1,
	SILENCE_STOP = 2,
	SILENCE_TRIM_FLUSH = 3,
	SILENCE_TRIM = 4
}
enum ThresholdMode {
	T_ALL = 0,
	T_ANY = 1
}
enum sample_fmts {
}
enum sample_fmts {
}
enum sample_fmts {
}
enum sample_fmts {
}
enum sample_fmts {
}
enum sample_fmts {
}
enum EvalMode {
	EVAL_MODE_FRAME = 0,
	EVAL_MODE_NB = 1,
	EVAL_MODE_ONCE = 2
}
enum PrecisionType {
	PRECISION_DOUBLE = 0,
	PRECISION_FIXED = 0,
	PRECISION_FLOAT = 2
}
enum ReplayGainType {
	REPLAYGAIN_ALBUM = 0,
	REPLAYGAIN_DROP = 1,
	REPLAYGAIN_IGNORE = 2,
	REPLAYGAIN_TRACK = 3
}
enum VolumeVarName {
	VAR_NB_CHANNELS = 0,
	VAR_NB_CONSUMED_SAMPLES = 1,
	VAR_NB_SAMPLES = 2,
	VAR_N = 3,
	VAR_POS = 4,
	VAR_PTS = 5,
	VAR_SAMPLE_RATE = 6,
	VAR_STARTPTS = 7,
	VAR_STARTT = 8,
	VAR_TB = 9,
	VAR_T = 10,
	VAR_VARS_NB = 11,
	VAR_VOLUME = 12
}
enum sample_fmts {
}
enum NoiseMode {
	NM_BLUE = 0,
	NM_BROWN = 1,
	NM_NB = 2,
	NM_PINK = 3,
	NM_VIOLET = 4,
	NM_WHITE = 5
}
enum sample_fmts {
}
enum sample_fmts {
}
enum sample_fmts {
}
enum __anonc1ec79100103 {
	VAR_N = 0,
	VAR_PTS = 1,
	VAR_TB = 2,
	VAR_T = 3,
	VAR_VARS_NB = 4
}
enum sample_fmts {
}
enum ff_packed_sample_fmts_array {
	AV_SAMPLE_FMT_DBL = 0,
	AV_SAMPLE_FMT_FLT = 1,
	AV_SAMPLE_FMT_NONE = 2,
	AV_SAMPLE_FMT_S16 = 3,
	AV_SAMPLE_FMT_S32 = 4,
	AV_SAMPLE_FMT_U8 = 5
}
enum ff_planar_sample_fmts_array {
	AV_SAMPLE_FMT_DBLP = 0,
	AV_SAMPLE_FMT_FLTP = 1,
	AV_SAMPLE_FMT_NONE = 2,
	AV_SAMPLE_FMT_S16P = 3,
	AV_SAMPLE_FMT_S32P = 4,
	AV_SAMPLE_FMT_U8P = 5
}
enum pix_fmts {
}
enum sample_fmts {
}
enum AmplitudeScale {
	ALINEAR = 0,
	ALOG = 1,
	NB_ASCALES = 2
}
enum DisplayMode {
	NB_DMODES = 0,
	SEPARATE = 1,
	SINGLE = 2
}
enum DisplayScale {
	CBRT = 0,
	LINEAR = 1,
	LOG = 2,
	NB_SCALES = 3,
	RLOG = 4,
	SQRT = 5
}
enum HistogramMode {
	ACCUMULATE = 0,
	CURRENT = 1,
	NB_HMODES = 2
}
enum SlideMode {
	NB_SLIDES = 0,
	REPLACE = 1,
	SCROLL = 2
}
enum pix_fmts {
}
enum sample_fmts {
}
enum pix_fmts {
}
enum sample_fmts {
}
enum VectorScopeDraw {
	DOT = 0,
	DRAW_NB = 1,
	LINE = 2
}
enum VectorScopeMode {
	LISSAJOUS_XY = 0,
	LISSAJOUS = 1,
	MODE_NB = 2,
	POLAR = 3
}
enum VectorScopeScale {
	CBRT = 0,
	LIN = 1,
	LOG = 2,
	SCALE_NB = 3,
	SQRT = 4
}
enum pix_fmts {
}
enum sample_fmts {
}
enum pix_fmts {
}
enum sample_fmts {
}
enum AmplitudeScale {
	AS_CBRT = 0,
	AS_LINEAR = 1,
	AS_LOG = 2,
	AS_SQRT = 3,
	NB_ASCALES = 4
}
enum ChannelMode {
	COMBINED = 0,
	NB_CMODES = 1,
	SEPARATE = 2
}
enum DisplayMode {
	BAR = 0,
	DOT = 1,
	LINE = 2,
	NB_MODES = 3
}
enum FrequencyScale {
	FS_LINEAR = 0,
	FS_LOG = 1,
	FS_RLOG = 2,
	NB_FSCALES = 3
}
enum pix_fmts {
}
enum sample_fmts {
}
enum ColorMode {
	CHANNEL = 0,
	CIVIDIS = 1,
	COOL = 2,
	FIERY = 3,
	FIRE = 4,
	FRUIT = 5,
	GREEN = 6,
	INTENSITY = 7,
	MAGMA = 8,
	MORELAND = 9,
	NB_CLMODES = 10,
	NEBULAE = 11,
	PLASMA = 12,
	RAINBOW = 13,
	TERRAIN = 14,
	VIRIDIS = 15
}
enum DataMode {
	D_MAGNITUDE = 0,
	D_PHASE = 1,
	NB_DMODES = 2
}
enum DisplayMode {
	COMBINED = 0,
	NB_MODES = 1,
	SEPARATE = 2
}
enum DisplayScale {
	CBRT = 0,
	FIFTHRT = 1,
	FOURTHRT = 2,
	LINEAR = 3,
	LOG = 4,
	NB_SCALES = 5,
	SQRT = 6
}
enum Orientation {
	HORIZONTAL = 0,
	NB_ORIENTATIONS = 1,
	VERTICAL = 2
}
enum SlideMode {
	FULLFRAME = 0,
	NB_SLIDES = 1,
	REPLACE = 2,
	RSCROLL = 3,
	SCROLL = 4
}
enum pix_fmts {
}
enum sample_fmts {
}
enum DisplayScale {
	LINEAR = 0,
	LOG = 1,
	NB_DISPLAY_SCALE = 2
}
enum __anonc25a9e2e0103 {
	VAR_CHANNEL = 0,
	VAR_PEAK = 1,
	VAR_VARS_NB = 2,
	VAR_VOLUME = 3
}
enum pix_fmts {
}
enum sample_fmts {
}
enum ShowWavesDrawMode {
	DRAW_FULL = 0,
	DRAW_NB = 1,
	DRAW_SCALE = 2
}
enum ShowWavesMode {
	MODE_CENTERED_LINE = 0,
	MODE_LINE = 1,
	MODE_NB = 2,
	MODE_P2P = 3,
	MODE_POINT = 4
}
enum ShowWavesScale {
	SCALE_CBRT = 0,
	SCALE_LIN = 1,
	SCALE_LOG = 2,
	SCALE_NB = 3,
	SCALE_SQRT = 4
}
enum pix_fmts {
}
enum sample_fmts {
}
enum __anona1595d560103 {
	VAR_H = 0,
	VAR_N = 1,
	VAR_POS = 2,
	VAR_T = 3,
	VAR_VARS_NB = 4,
	VAR_W = 5
}
enum __anona1595d5b0103 {
}
enum __anona1595d5b0203 {
	AVFILTER_AUTO_CONVERT_ALL = 0 /**< all automatic conversions enabled */,
	AVFILTER_AUTO_CONVERT_NONE = -1 /**< all automatic conversions disabled */
}
enum BlendMode {
	BLEND_ADDITION = 0,
	BLEND_AND = 1,
	BLEND_AVERAGE = 2,
	BLEND_BURN = 3,
	BLEND_DARKEN = 4,
	BLEND_DIFFERENCE = 5,
	BLEND_DIVIDE = 6,
	BLEND_DODGE = 7,
	BLEND_EXCLUSION = 8,
	BLEND_EXTREMITY = 9,
	BLEND_FREEZE = 10,
	BLEND_GLOW = 11,
	BLEND_GRAINEXTRACT = 12,
	BLEND_GRAINMERGE = 13,
	BLEND_HARDLIGHT = 14,
	BLEND_HARDMIX = 15,
	BLEND_HEAT = 16,
	BLEND_LIGHTEN = 17,
	BLEND_LINEARLIGHT = 18,
	BLEND_MULTIPLY128 = 19,
	BLEND_MULTIPLY = 20,
	BLEND_NB = 21,
	BLEND_NEGATION = 22,
	BLEND_NORMAL = 23,
	BLEND_OR = 24,
	BLEND_OVERLAY = 25,
	BLEND_PHOENIX = 26,
	BLEND_PINLIGHT = 27,
	BLEND_REFLECT = 28,
	BLEND_SCREEN = 29,
	BLEND_SOFTLIGHT = 30,
	BLEND_SUBTRACT = 31,
	BLEND_UNSET = -1,
	BLEND_VIVIDLIGHT = 33,
	BLEND_XOR = 34
}
enum var_name {
	VARS_NB = 0,
	VAR_CH = 1,
	VAR_CW = 2,
	VAR_HSUB = 3,
	VAR_H = 4,
	VAR_VSUB = 5,
	VAR_W = 6
}
enum __anon6a8de5200103 {
	AV_BUFFERSRC_FLAG_KEEP_REF = 8,
	AV_BUFFERSRC_FLAG_NO_CHECK_FORMAT = 1,
	AV_BUFFERSRC_FLAG_PUSH = 4
}
enum BitDepthIndex {
	BPP_10 = 0,
	BPP_12 = 1,
	BPP_8 = 2,
	NB_BPP = 3
}
enum ChromaSubsamplingIndex {
	NB_SS = 0,
	SS_420 = 1,
	SS_422 = 2,
	SS_444 = 3
}
enum SearchMethod {
	EXHAUSTIVE = 0,
	SEARCH_COUNT = 1,
	SMART_EXHAUSTIVE = 2
}
enum __anon89df974b0103 {
	CONV = 0,
	DEPTH_TO_SPACE = 1,
	INPUT = 2
}
enum __anon89df974b0203 {
	RELU = 0,
	SIGMOID = 1,
	TANH = 2
}
enum __anon66ca722e0103 {
	DNN_ERROR = 0,
	DNN_SUCCESS = 1
}
enum __anon66ca722e0203 {
	DNN_NATIVE = 0,
	DNN_TF = 1
}
enum __anona6aeac380103 {
	ALPHA = 0 GREEN BLUE ALPHA,
	BLUE = 0 GREEN BLUE ALPHA,
	GREEN = 0 GREEN BLUE ALPHA,
	RED = 0 GREEN BLUE ALPHA
}
enum channel {
	FF_EBUR128_Bm045 = 0,
	FF_EBUR128_Bp000 = 1,
	FF_EBUR128_Bp045 = 2,
	FF_EBUR128_CENTER = 3,
	FF_EBUR128_DUAL_MONO = 4,
	FF_EBUR128_LEFT_SURROUND = 5,
	FF_EBUR128_LEFT = 6,
	FF_EBUR128_Mm030 = 2 /**< itu M-030 */,
	FF_EBUR128_Mm060 = 8,
	FF_EBUR128_Mm090 = 9,
	FF_EBUR128_Mm110 = 5 /**< itu M-110 */,
	FF_EBUR128_Mm135 = 11,
	FF_EBUR128_MmSC = 12,
	FF_EBUR128_Mp000 = 3 /**< itu M+000 */,
	FF_EBUR128_Mp030 = 1 /**< itu M+030 */,
	FF_EBUR128_Mp060 = 15,
	FF_EBUR128_Mp090 = 16,
	FF_EBUR128_Mp110 = 4 /**< itu M+110 */,
	FF_EBUR128_Mp135 = 18,
	FF_EBUR128_Mp180 = 19,
	FF_EBUR128_MpSC = 20,
	FF_EBUR128_RIGHT_SURROUND = 21,
	FF_EBUR128_RIGHT = 22,
	FF_EBUR128_Tp000 = 23,
	FF_EBUR128_UNUSED = 0 /**< unused channel (for example LFE channel) */,
	FF_EBUR128_Um030 = 25,
	FF_EBUR128_Um045 = 26,
	FF_EBUR128_Um090 = 27,
	FF_EBUR128_Um110 = 28,
	FF_EBUR128_Um135 = 29,
	FF_EBUR128_Up000 = 30,
	FF_EBUR128_Up030 = 31,
	FF_EBUR128_Up045 = 32,
	FF_EBUR128_Up090 = 33,
	FF_EBUR128_Up110 = 34,
	FF_EBUR128_Up135 = 35,
	FF_EBUR128_Up180 = 36
}
enum mode {
	FF_EBUR128_MODE_I = (1 << 2) | FF_EBUR128_MODE_M,
	FF_EBUR128_MODE_LRA = (1 << 3) | FF_EBUR128_MODE_S,
	FF_EBUR128_MODE_M = (1 << 0),
	FF_EBUR128_MODE_SAMPLE_PEAK = (1 << 4) | FF_EBUR128_MODE_M,
	FF_EBUR128_MODE_S = (1 << 1) | FF_EBUR128_MODE_M
}
enum BenchAction {
	ACTION_START = 0,
	ACTION_STOP = 1,
	NB_ACTION = 2
}
enum __anona38fc17e0103 {
	VAR_MAX = 0,
	VAR_MIN = 1,
	VAR_VAL = 2,
	VAR_VARS_NB = 3
}
enum pix_fmts {
}
enum __anoncc6a28670103 {
	PEAK_MODE_NONE = 0,
	PEAK_MODE_SAMPLES_PEAKS = 1<<1,
	PEAK_MODE_TRUE_PEAKS = 1<<2
}
enum __anoncc6a28670203 {
	GAUGE_TYPE_MOMENTARY = 0,
	GAUGE_TYPE_SHORTTERM = 1
}
enum __anoncc6a28670303 {
	SCALE_TYPE_ABSOLUTE = 0,
	SCALE_TYPE_RELATIVE = 1
}
enum pix_fmts {
}
enum sample_fmts {
}
enum __anonba12d3780103 {
	MODE_FCIN = 1 << 1,
	MODE_FCOUT = 1 << 2,
	MODE_FMT = 1 << 6,
	MODE_PTS = 1 << 3,
	MODE_QUEUE = 1 << 0,
	MODE_RATE = 1 << 8,
	MODE_SIZE = 1 << 7,
	MODE_TB = 1 << 5,
	MODE_TIME = 1 << 4
}
enum pix_fmts {
}
enum MetadataFunction {
	METADATAF_EQUAL = 0,
	METADATAF_EXPR = 1,
	METADATAF_GREATER = 2,
	METADATAF_LESS = 3,
	METADATAF_NB = 4,
	METADATAF_SAME_STR = 5,
	METADATAF_STARTS_WITH = 6
}
enum MetadataMode {
	METADATA_ADD = 0,
	METADATA_DELETE = 1,
	METADATA_MODIFY = 2,
	METADATA_NB = 3,
	METADATA_PRINT = 4,
	METADATA_SELECT = 5
}
enum var_name {
	VAR_VALUE1 = 0,
	VAR_VALUE2 = 1,
	VAR_VARS_NB = 2
}
enum mode {
	MODE_NONE = 0,
	MODE_RANDOM = 1,
	MODE_RO = 2,
	MODE_RW = 3,
	MODE_TOGGLE = 4,
	NB_MODES = 5
}
enum perm {
	RO = 0,
	RW = 1
}
enum pix_fmts {
}
enum var_name {
	VAR_BI = 0,
	VAR_B = 1,
	VAR_CONCATDEC_SELECT = 2,
	VAR_CONSUMED_SAMPLES_N = 3,
	VAR_INTERLACE_TYPE_B = 4,
	VAR_INTERLACE_TYPE_P = 5,
	VAR_INTERLACE_TYPE_T = 6,
	VAR_INTERLACE_TYPE = 7,
	VAR_I = 8,
	VAR_KEY = 9,
	VAR_N = 10,
	VAR_PICT_TYPE_BI = 11,
	VAR_PICT_TYPE_B = 12,
	VAR_PICT_TYPE_I = 13,
	VAR_PICT_TYPE_P = 14,
	VAR_PICT_TYPE_SI = 15,
	VAR_PICT_TYPE_SP = 16,
	VAR_PICT_TYPE_S = 17,
	VAR_PICT_TYPE = 18,
	VAR_POS = 19,
	VAR_PREV_PTS = 20,
	VAR_PREV_SELECTED_N = 21,
	VAR_PREV_SELECTED_PTS = 22,
	VAR_PREV_SELECTED_T = 23,
	VAR_PREV_T = 24,
	VAR_PTS = 25,
	VAR_P = 26,
	VAR_SAMPLES_N = 27,
	VAR_SAMPLE_RATE = 28,
	VAR_SCENE = 29,
	VAR_SELECTED_N = 30,
	VAR_SI = 31,
	VAR_SP = 32,
	VAR_START_PTS = 33,
	VAR_START_T = 34,
	VAR_S = 35,
	VAR_TB = 36,
	VAR_T = 37,
	VAR_VARS_NB = 38
}
enum SideDataMode {
	SIDEDATA_DELETE = 0,
	SIDEDATA_NB = 1,
	SIDEDATA_SELECT = 2
}
enum __anona5ff2e010103 {
	STATE_BOF = 0,
	STATE_EOF = 1,
	STATE_RUN = 2
}
enum EOFAction {
	EOF_ACTION_ENDALL = 0,
	EOF_ACTION_PASS = 1,
	EOF_ACTION_REPEAT = 2
}
enum FFFrameSyncExtMode {
	EXT_INFINITY = 0,
	EXT_NULL = 1,
	EXT_STOP = 2
}
enum WaveType {
	WAVE_NB = 0,
	WAVE_SIN = 1,
	WAVE_TRI = 2
}
enum pix_fmts {
}
enum var_name_scale2ref {
	VARS_S2R_NB = 0,
	VAR_S2R_MAIN_A = 1,
	VAR_S2R_MAIN_DAR = 2,
	VAR_S2R_MAIN_HSUB = 3,
	VAR_S2R_MAIN_H = 4,
	VAR_S2R_MAIN_SAR = 5,
	VAR_S2R_MAIN_VSUB = 6,
	VAR_S2R_MAIN_W = 7,
	VAR_S2R_MDAR = 8
}
enum var_name {
	VARS_NB = 0,
	VAR_A = 1,
	VAR_DAR = 2,
	VAR_E = 3,
	VAR_HSUB = 4,
	VAR_IH = 5,
	VAR_IN_H = 6,
	VAR_IN_W = 7,
	VAR_IW = 8,
	VAR_OHSUB = 9,
	VAR_OH = 10,
	VAR_OUT_H = 11,
	VAR_OUT_W = 12,
	VAR_OVSUB = 13,
	VAR_OW = 14,
	VAR_PHI = 15,
	VAR_PI = 16,
	VAR_SAR = 17,
	VAR_VSUB = 18
}
enum var_name {
	VAR_FRAME_RATE = 0,
	VAR_FR = 1,
	VAR_INTERLACED = 2,
	VAR_NB_CONSUMED_SAMPLES = 3,
	VAR_NB_SAMPLES = 4,
	VAR_N = 5,
	VAR_POS = 6,
	VAR_PREV_INPTS = 7,
	VAR_PREV_INT = 8,
	VAR_PREV_OUTPTS = 9,
	VAR_PREV_OUTT = 10,
	VAR_PTS = 11,
	VAR_RTCSTART = 12,
	VAR_RTCTIME = 13,
	VAR_SAMPLE_RATE = 14,
	VAR_SR = 15,
	VAR_STARTPTS = 16,
	VAR_STARTT = 17,
	VAR_S = 18,
	VAR_TB = 19,
	VAR_T = 20,
	VAR_VARS_NB = 21
}
enum var_name {
	VAR_AVTB = 0,
	VAR_INTB = 1,
	VAR_SR = 2,
	VAR_VARS_NB = 3
}
enum formats {
	FORMAT_BINARY = 0,
	FORMAT_XML = 1,
	NB_FORMATS = 2
}
enum lookup_mode {
	MODE_FAST = 0,
	MODE_FULL = 1,
	MODE_OFF = 2,
	NB_LOOKUP_MODE = 3
}
enum InterlaceScanMode {
	MODE_BFF = 0,
	MODE_TFF = 0
}
enum TInterlaceMode {
	MODE_DROP_EVEN = 0,
	MODE_DROP_ODD = 1,
	MODE_INTERLACEX2 = 2,
	MODE_INTERLEAVE_BOTTOM = 3,
	MODE_INTERLEAVE_TOP = 4,
	MODE_MERGEX2 = 5,
	MODE_MERGE = 0,
	MODE_NB = 7,
	MODE_PAD = 8
}
enum FillMethod {
	FILL_BLANK = 0,
	FILL_CLAMP = 1,
	FILL_COUNT = 2,
	FILL_MIRROR = 3,
	FILL_ORIGINAL = 4
}
enum InterpolateMethod {
	INTERPOLATE_BILINEAR = 0,
	INTERPOLATE_BIQUADRATIC = 1,
	INTERPOLATE_COUNT = 2,
	INTERPOLATE_NEAREST = 3
}
enum PassthroughType {
	TRANSPOSE_PT_TYPE_LANDSCAPE = 0,
	TRANSPOSE_PT_TYPE_NONE = 1,
	TRANSPOSE_PT_TYPE_PORTRAIT = 2
}
enum TransposeDir {
	TRANSPOSE_CCLOCK_FLIP = 0,
	TRANSPOSE_CCLOCK = 1,
	TRANSPOSE_CLOCK_FLIP = 2,
	TRANSPOSE_CLOCK = 3,
	TRANSPOSE_HFLIP = 4,
	TRANSPOSE_REVERSAL = 5,
	TRANSPOSE_VFLIP = 6
}
enum pix_fmts {
}
enum MagnitudeScale {
	LINEAR = 0,
	LOG = 1,
	NB_SCALES = 2
}
enum Orientation {
	HORIZONTAL = 0,
	NB_ORIENTATIONS = 1,
	VERTICAL = 2
}
enum SlideMode {
	FULLFRAME = 0,
	NB_SLIDES = 1,
	REPLACE = 2,
	RSCROLL = 3,
	SCROLL = 4
}
enum pix_fmts {
}
enum sample_fmts {
}
enum __anonb26fa50a0103 {
	A = 0,
	U = 1,
	V = 2,
	Y = 3
}
enum alpha_fmts {
}
enum main_fmts {
}
enum pixel_fmts {
}
enum var_name {
	VARS_NB = 0,
	VAR_A = 1,
	VAR_DAR = 2,
	VAR_HSUB = 3,
	VAR_H = 4,
	VAR_SAR = 5,
	VAR_VSUB = 6,
	VAR_W = 7
}
enum pixel_fmts {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pixfmts {
}
enum pix_fmts {
}
enum yuvj_formats {
	AV_PIX_FMT_NONE = 0,
	YUVJ_FORMATS = 1
}
enum pix_fmts {
}
enum __anon1cc0fdd90103 {
	VAR_A = 0,
	VAR_BOTTOM = 1,
	VAR_B = 2,
	VAR_H = 3,
	VAR_N = 4,
	VAR_SH = 5,
	VAR_SW = 6,
	VAR_TOP = 7,
	VAR_T = 8,
	VAR_VARS_NB = 9,
	VAR_W = 10,
	VAR_X = 11,
	VAR_Y = 12
}
enum pix_fmts {
}
enum FilterModes {
	BASIC = 0,
	FINAL = 1,
	NB_MODES = 2
}
enum pix_fmts {
}
enum pix_fmts {
}
enum hold_pixel_fmts {
}
enum pixel_fmts {
}
enum rgb_pix_fmts {
}
enum yuv_pix_fmts {
}
enum CieSystem {
	LUV = 0,
	NB_CIE = 1,
	UCS = 2,
	XYY = 3
}
enum ColorsSystems {
	APPLEsystem = 0,
	CIE1931system = 1,
	EBUsystem = 2,
	NB_CS = 3,
	NTSCsystem = 4,
	Rec2020system = 5,
	Rec709system = 6,
	SMPTE240Msystem = 7,
	SMPTEsystem = 8,
	wRGBsystem = 9
}
enum in_pix_fmts {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_RGB24 = 1,
	AV_PIX_FMT_RGB48 = 2,
	AV_PIX_FMT_RGBA64 = 3,
	AV_PIX_FMT_RGBA = 4,
	AV_PIX_FMT_XYZ12 = 5
}
enum out_pix_fmts {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_RGBA64 = 1
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pixel_fmts {
}
enum pix_fmts {
}
enum ColorMode {
	COLOR_MODE_BT2020 = 0,
	COLOR_MODE_BT601 = 1,
	COLOR_MODE_BT709 = 2,
	COLOR_MODE_COUNT = 3,
	COLOR_MODE_FCC = 4,
	COLOR_MODE_NONE = -1,
	COLOR_MODE_SMPTE240M = 6
}
enum pix_fmts {
}
enum Colorspace {
	CS_BT2020 = 0,
	CS_BT470BG = 1,
	CS_BT470M = 2,
	CS_BT601_6_525 = 3,
	CS_BT601_6_625 = 4,
	CS_BT709 = 5,
	CS_NB = 6,
	CS_SMPTE170M = 7,
	CS_SMPTE240M = 8,
	CS_UNSPECIFIED = 9
}
enum DitherMode {
	DITHER_FSB = 0,
	DITHER_NB = 1,
	DITHER_NONE = 2
}
enum WhitepointAdaptation {
	NB_WP_ADAPT_NON_IDENTITY = 0,
	NB_WP_ADAPT = 1,
	WP_ADAPT_BRADFORD = 2,
	WP_ADAPT_IDENTITY = NB_WP_ADAPT_NON_IDENTITY,
	WP_ADAPT_VON_KRIES = 4
}
enum Whitepoint {
	WP_C = 0,
	WP_D65 = 1,
	WP_DCI = 2,
	WP_E = 3,
	WP_NB = 4
}
enum default_csp {
}
enum default_prm {
}
enum default_trc {
}
enum pix_fmts {
}
enum MatrixMode {
	MATRIX_COLUMN = 0,
	MATRIX_NBMODES = 1,
	MATRIX_ROW = 2,
	MATRIX_SQUARE = 3
}
enum pix_fmts {
}
enum pixel_fmts_fftfilt {
}
enum mode {
	MODE_BLUR = 0,
	MODE_COVER = 1,
	NB_MODES = 2
}
enum pix_fmts {
}
enum var_name {
	VAR_A = 0,
	VAR_DAR = 1,
	VAR_HSUB = 2,
	VAR_IH = 3,
	VAR_IN_H = 4,
	VAR_IN_W = 5,
	VAR_IW = 6,
	VAR_N = 7,
	VAR_OH = 8,
	VAR_OUT_H = 9,
	VAR_OUT_W = 10,
	VAR_OW = 11,
	VAR_POS = 12,
	VAR_SAR = 13,
	VAR_T = 14,
	VAR_VARS_NB = 15,
	VAR_VSUB = 16,
	VAR_X = 17,
	VAR_Y = 18
}
enum pix_fmts {
}
enum pix_fmts {
}
enum preset {
	NB_PRESETS = 0,
	PRESET_COLOR_NEGATIVE = 1,
	PRESET_CROSS_PROCESS = 2,
	PRESET_DARKER = 3,
	PRESET_INCREASE_CONTRAST = 4,
	PRESET_LIGHTER = 5,
	PRESET_LINEAR_CONTRAST = 6,
	PRESET_MEDIUM_CONTRAST = 7,
	PRESET_NEGATIVE = 8,
	PRESET_NONE = 9,
	PRESET_STRONG_CONTRAST = 10,
	PRESET_VINTAGE = 11
}
enum __anon51ae44b30103 {
	VAR_C = 0,
	VAR_VARS_NB = 1
}
enum pix_fmts {
}
enum cpix_fmts {
}
enum pix_fmts {
}
enum FilterType {
	NB_FILTER = 0,
	STRONG = 1,
	WEAK = 2
}
enum pixel_fmts {
}
enum pix_fmts {
}
enum pixel_fmts {
}
enum pixel_fmts {
}
enum smooth_mode {
	ARITHMETIC_MEAN = 0,
	CUBIC_MEAN = 1,
	GEOMETRIC_MEAN = 2,
	HARMONIC_MEAN = 3,
	MEDIAN = 4,
	NB_SMOOTH_MODE = 5,
	POWER_MEAN = 6,
	QUADRATIC_MEAN = 7
}
enum __anond91fe0ad0103 {
	QSVDEINT_MORE_INPUT = 0,
	QSVDEINT_MORE_OUTPUT = 1
}
enum pixel_formats {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pixel_fmts {
}
enum EdgeMode {
	EDGE_BLANK = 0,
	EDGE_MIRROR = 1,
	EDGE_NB = 2,
	EDGE_SMEAR = 3,
	EDGE_WRAP = 4
}
enum pix_fmts {
}
enum __anona491054b0103 {
	A = 0,
	U = 1,
	V = 2,
	Y = 3
}
enum pix_fmts {
}
enum var_name {
	VARS_NB = 0,
	VAR_DAR = 1,
	VAR_HSUB = 2,
	VAR_H = 3,
	VAR_IH = 4,
	VAR_IN_H = 5,
	VAR_IN_W = 6,
	VAR_IW = 7,
	VAR_MAX = 8,
	VAR_SAR = 9,
	VAR_T = 10,
	VAR_VSUB = 11,
	VAR_W = 12,
	VAR_X = 13,
	VAR_Y = 14
}
enum expansion_mode {
	EXP_NONE = 0,
	EXP_NORMAL = 1,
	EXP_STRFTIME = 2
}
enum var_name {
	VAR_ASCENT = 0,
	VAR_DAR = 1,
	VAR_DESCENT = 2,
	VAR_HSUB = 3,
	VAR_H = 4,
	VAR_LH = 5,
	VAR_LINE_H = 6,
	VAR_MAIN_H = 7,
	VAR_MAIN_W = 8,
	VAR_MAX_GLYPH_A = 9,
	VAR_MAX_GLYPH_D = 10,
	VAR_MAX_GLYPH_H = 11,
	VAR_MAX_GLYPH_W = 12,
	VAR_N = 13,
	VAR_PICT_TYPE = 14,
	VAR_SAR = 15,
	VAR_TEXT_H = 16,
	VAR_TEXT_W = 17,
	VAR_TH = 18,
	VAR_TW = 19,
	VAR_T = 20,
	VAR_VARS_NB = 21,
	VAR_VSUB = 22,
	VAR_W = 23,
	VAR_X = 24,
	VAR_Y = 25,
	VAR_h = 26,
	VAR_w = 27
}
enum FilterMode {
	MODE_CANNY = 0,
	MODE_COLORMIX = 1,
	MODE_WIRES = 2,
	NB_MODE = 3
}
enum __anon4886cd220103 {
	DIRECTION_45DOWN = 0,
	DIRECTION_45UP = 1,
	DIRECTION_HORIZONTAL = 2,
	DIRECTION_VERTICAL = 3
}
enum canny_pix_fmts {
}
enum colormix_pix_fmts {
}
enum wires_pix_fmts {
}
enum pal8_fmt {
}
enum pix_fmts {
}
enum pixfmts {
}
enum pixel_fmts_eq {
}
enum EvalMode {
}
enum var_name {
	VAR_NB = 0,
	VAR_N = 1,
	VAR_POS = 2,
	VAR_R = 3,
	VAR_T = 4
}
enum in_pixfmts_be {
}
enum in_pixfmts_le {
}
enum out10be_pixfmts {
}
enum out10le_pixfmts {
}
enum out12be_pixfmts {
}
enum out12le_pixfmts {
}
enum out14be_pixfmts {
}
enum out14le_pixfmts {
}
enum out16be_pixfmts {
}
enum out16le_pixfmts {
}
enum out8_pixfmts {
}
enum out9be_pixfmts {
}
enum out9le_pixfmts {
}
enum __anon7dc902440103 {
}
enum pix_fmts_alpha {
}
enum pix_fmts_rgba {
}
enum pix_fmts_rgb {
}
enum pix_fmts {
}
enum studio_level_pix_fmts {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_YUV410P = 1,
	AV_PIX_FMT_YUV411P = 2,
	AV_PIX_FMT_YUV420P = 3,
	AV_PIX_FMT_YUV422P = 4,
	AV_PIX_FMT_YUV440P = 5,
	AV_PIX_FMT_YUV444P = 6
}
enum BufferTypes {
	BSIZE = 0,
	CURRENT = 1,
	NEXT = 2,
	PREV = 3
}
enum pix_fmts {
}
enum EvalMode {
	EVAL_MODE_FRAME = 0,
	EVAL_MODE_INIT = 1,
	EVAL_MODE_NB = 2
}
enum __anon09dbb1c30103 {
	VAR_H = 0,
	VAR_N = 1,
	VAR_VARS_NB = 2,
	VAR_W = 3,
	VAR_X = 4,
	VAR_Y = 5
}
enum __anon09dbb1c30203 {
	U = 0 U V,
	V = 0 U V,
	Y = 0 U V
}
enum pixel_fmts_fftfilt {
}
enum FieldType {
	FIELD_TYPE_BOTTOM = 0 FIELD_TYPE_BOTTOM,
	FIELD_TYPE_TOP = 0 FIELD_TYPE_BOTTOM
}
enum __anon782ac8250103 {
	mB = 0,
	mC = 1,
	mN = 2,
	mP = 3,
	mU = 4
}
enum comb_dbg {
	COMBDBG_NONE = 0,
	COMBDBG_PCNUB = 1,
	COMBDBG_PCN = 2,
	NB_COMBDBG = 3
}
enum comb_matching_mode {
	COMBMATCH_FULL = 0,
	COMBMATCH_NONE = 1,
	COMBMATCH_SC = 2,
	NB_COMBMATCH = 3
}
enum fieldmatch_parity {
	FM_PARITY_AUTO = -1,
	FM_PARITY_BOTTOM = 0,
	FM_PARITY_TOP = 1
}
enum matching_mode {
	MODE_PCN_UB = 0,
	MODE_PCN = 1,
	MODE_PC_N_UB = 2,
	MODE_PC_N = 3,
	MODE_PC_U = 4,
	MODE_PC = 5,
	NB_MODE = 6
}
enum pix_fmts {
}
enum unproc_pix_fmts {
}
enum FillMode {
	FM_FIXED = 0,
	FM_MIRROR = 1,
	FM_NB_MODES = 2,
	FM_SMEAR = 3
}
enum __anon0a0dd3ec0103 {
	A = 0,
	U = 1,
	V = 2,
	Y = 3
}
enum __anon0a0dd3ec0203 {
	B = 0,
	G = 1,
	R = 2
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pixel_fmts {
}
enum EOFAction {
	EOF_ACTION_NB = 0,
	EOF_ACTION_PASS = 1,
	EOF_ACTION_ROUND = 2
}
enum formats_supported {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_YUV410P = 1,
	AV_PIX_FMT_YUV420P = 2,
	AV_PIX_FMT_YUV422P = 3,
	AV_PIX_FMT_YUV444P = 4,
	AV_PIX_FMT_YUVA420P = 5,
	AV_PIX_FMT_YUVJ420P = 6,
	AV_PIX_FMT_YUVJ422P = 7,
	AV_PIX_FMT_YUVJ440P = 8,
	AV_PIX_FMT_YUVJ444P = 9
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum __anon03e444310103 {
	VAR_H = 0,
	VAR_N = 1,
	VAR_SH = 2,
	VAR_SW = 3,
	VAR_T = 4,
	VAR_VARS_NB = 5,
	VAR_W = 6,
	VAR_X = 7,
	VAR_Y = 8
}
enum __anon03e444310203 {
	A = 0 U V A G B R,
	B = 0 U V A G B R,
	G = 0 U V A G B R,
	R = 0 U V A G B R,
	U = 0 U V A G B R,
	V = 0 U V A G B R,
	Y = 0 U V A G B R
}
enum rgb_pix_fmts {
}
enum yuv_pix_fmts {
}
enum pix_fmts {
}
enum HisteqAntibanding {
	HISTEQ_ANTIBANDING_NB = 0,
	HISTEQ_ANTIBANDING_NONE = 0,
	HISTEQ_ANTIBANDING_STRONG = 2,
	HISTEQ_ANTIBANDING_WEAK = 1
}
enum pix_fmts {
}
enum levels_in_pix_fmts {
	AV_PIX_FMT_GBRAP10 = 0,
	AV_PIX_FMT_GBRAP12 = 1,
	AV_PIX_FMT_GBRAP = 2,
	AV_PIX_FMT_GBRP10 = 3,
	AV_PIX_FMT_GBRP12 = 4,
	AV_PIX_FMT_GBRP9 = 5,
	AV_PIX_FMT_GBRP = 6,
	AV_PIX_FMT_GRAY8 = 7,
	AV_PIX_FMT_NONE = 8,
	AV_PIX_FMT_YUV410P = 9,
	AV_PIX_FMT_YUV411P = 10,
	AV_PIX_FMT_YUV420P10 = 11,
	AV_PIX_FMT_YUV420P12 = 12,
	AV_PIX_FMT_YUV420P9 = 13,
	AV_PIX_FMT_YUV420P = 14,
	AV_PIX_FMT_YUV422P10 = 15,
	AV_PIX_FMT_YUV422P12 = 16,
	AV_PIX_FMT_YUV422P9 = 17,
	AV_PIX_FMT_YUV422P = 18,
	AV_PIX_FMT_YUV440P12 = 19,
	AV_PIX_FMT_YUV440P = 20,
	AV_PIX_FMT_YUV444P10 = 21,
	AV_PIX_FMT_YUV444P12 = 22,
	AV_PIX_FMT_YUV444P9 = 23,
	AV_PIX_FMT_YUV444P = 24,
	AV_PIX_FMT_YUVA420P10 = 25,
	AV_PIX_FMT_YUVA420P9 = 26,
	AV_PIX_FMT_YUVA420P = 27,
	AV_PIX_FMT_YUVA422P10 = 28,
	AV_PIX_FMT_YUVA422P9 = 29,
	AV_PIX_FMT_YUVA422P = 30,
	AV_PIX_FMT_YUVA444P10 = 31,
	AV_PIX_FMT_YUVA444P9 = 32,
	AV_PIX_FMT_YUVA444P = 33,
	AV_PIX_FMT_YUVJ411P = 34,
	AV_PIX_FMT_YUVJ420P = 35,
	AV_PIX_FMT_YUVJ422P = 36,
	AV_PIX_FMT_YUVJ444P = 37
}
enum levels_out_rgb10_pix_fmts {
	AV_PIX_FMT_GBRAP10 = 0,
	AV_PIX_FMT_GBRP10 = 1,
	AV_PIX_FMT_NONE = 2
}
enum levels_out_rgb12_pix_fmts {
	AV_PIX_FMT_GBRAP12 = 0,
	AV_PIX_FMT_GBRP12 = 1,
	AV_PIX_FMT_NONE = 2
}
enum levels_out_rgb8_pix_fmts {
	AV_PIX_FMT_GBRAP = 0,
	AV_PIX_FMT_GBRP = 1,
	AV_PIX_FMT_NONE = 2
}
enum levels_out_rgb9_pix_fmts {
	AV_PIX_FMT_GBRP9 = 0,
	AV_PIX_FMT_NONE = 1
}
enum levels_out_yuv10_pix_fmts {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_YUV444P10 = 1,
	AV_PIX_FMT_YUVA444P10 = 2
}
enum levels_out_yuv12_pix_fmts {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_YUV444P12 = 1
}
enum levels_out_yuv8_pix_fmts {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_YUV444P = 1,
	AV_PIX_FMT_YUVA444P = 2
}
enum levels_out_yuv9_pix_fmts {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_YUV444P9 = 1,
	AV_PIX_FMT_YUVA444P9 = 2
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum var_name {
	VAR_NB = 0,
	VAR_N = 1,
	VAR_PTS = 2,
	VAR_R = 3,
	VAR_TB = 4,
	VAR_T = 5
}
enum input_pix_fmts {
}
enum output_pix_fmts {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum __anon84ff91df0103 {
	BFF = 0,
	PROGRESSIVE = 1,
	TFF = 2,
	UNDETERMINED = 3
}
enum __anon84ff91df0203 {
	REPEAT_BOTTOM = 0,
	REPEAT_NONE = 1,
	REPEAT_TOP = 2
}
enum FilterMode {
	MODE_DEINTERLEAVE = 0,
	MODE_INTERLEAVE = 1,
	MODE_NONE = 2
}
enum pix_fmts {
}
enum pix_fmts {
}
enum InterpolationType {
	LANCZOS = 0,
	LINEAR = 1,
	NEAREST = 2
}
enum Mode {
	GEOMETRY_DISTORTION = 0x2,
	SUBPIXEL_DISTORTION = 0x4,
	VIGNETTING = 0x1
}
enum fmts {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pixel_fmts {
}
enum all_pix_fmts {
	AV_PIX_FMT_NONE = { RGB_FORMATS YUV_FORMATS GRAY_FORMATS AV_PIX_FMT_NONE,
	GRAY_FORMATS = { RGB_FORMATS YUV_FORMATS GRAY_FORMATS AV_PIX_FMT_NONE,
	RGB_FORMATS = { RGB_FORMATS YUV_FORMATS GRAY_FORMATS AV_PIX_FMT_NONE,
	YUV_FORMATS = { RGB_FORMATS YUV_FORMATS GRAY_FORMATS AV_PIX_FMT_NONE
}
enum rgb_pix_fmts {
	AV_PIX_FMT_NONE = { RGB_FORMATS AV_PIX_FMT_NONE,
	RGB_FORMATS = { RGB_FORMATS AV_PIX_FMT_NONE
}
enum var_name {
	VAR_CLIPVAL = 0,
	VAR_H = 1,
	VAR_MAXVAL = 2,
	VAR_MINVAL = 3,
	VAR_NEGVAL = 4,
	VAR_VAL = 5,
	VAR_VARS_NB = 6,
	VAR_W = 7
}
enum yuv_pix_fmts {
	AV_PIX_FMT_NONE = { YUV_FORMATS AV_PIX_FMT_NONE,
	YUV_FORMATS = { YUV_FORMATS AV_PIX_FMT_NONE
}
enum all_pix_fmts {
}
enum bit10_pix_fmts {
}
enum bit12_pix_fmts {
}
enum bit14_pix_fmts {
}
enum bit16_pix_fmts {
}
enum bit8_pix_fmts {
}
enum bit9_pix_fmts {
}
enum var_name {
	VAR_BITDEPTHX = 0,
	VAR_BITDEPTHY = 1,
	VAR_H = 2,
	VAR_VARS_NB = 3,
	VAR_W = 4,
	VAR_X = 5,
	VAR_Y = 6
}
enum interp_1d_mode {
	INTERPOLATE_1D_COSINE = 0,
	INTERPOLATE_1D_CUBIC = 1,
	INTERPOLATE_1D_LINEAR = 2,
	INTERPOLATE_1D_NEAREST = 3,
	INTERPOLATE_1D_SPLINE = 4,
	NB_INTERP_1D_MODE = 5
}
enum interp_mode {
	INTERPOLATE_NEAREST = 0,
	INTERPOLATE_TETRAHEDRAL = 1,
	INTERPOLATE_TRILINEAR = 2,
	NB_INTERP_MODE = 3
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum MCDeintMode {
	MODE_EXTRA_SLOW = 0,
	MODE_FAST = 0,
	MODE_MEDIUM = 2,
	MODE_NB = 3,
	MODE_SLOW = 4
}
enum MCDeintParity {
	PARITY_BFF = 1 ///< bottom field first,
	PARITY_TFF = 0 ///< top field first
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum MIMode {
	MI_MODE_BLEND = 1,
	MI_MODE_DUP = 0,
	MI_MODE_MCI = 2
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pixel_fmts {
}
enum pix_fmts {
}
enum EvalMode {
	EVAL_MODE_FRAME = 0,
	EVAL_MODE_INIT = 1,
	EVAL_MODE_NB = 2
}
enum alpha_pix_fmts {
	AV_PIX_FMT_ABGR = 0,
	AV_PIX_FMT_ARGB = 1,
	AV_PIX_FMT_BGRA = 2,
	AV_PIX_FMT_GBRAP = 3,
	AV_PIX_FMT_NONE = 4,
	AV_PIX_FMT_RGBA = 5,
	AV_PIX_FMT_YUVA420P = 6,
	AV_PIX_FMT_YUVA422P = 7,
	AV_PIX_FMT_YUVA444P = 8
}
enum main_pix_fmts_gbrp {
}
enum main_pix_fmts_rgb {
}
enum main_pix_fmts_yuv420 {
}
enum main_pix_fmts_yuv422 {
}
enum main_pix_fmts_yuv444 {
}
enum overlay_pix_fmts_gbrp {
}
enum overlay_pix_fmts_rgb {
}
enum overlay_pix_fmts_yuv420 {
}
enum overlay_pix_fmts_yuv422 {
}
enum overlay_pix_fmts_yuv444 {
}
enum OverlayFormat {
	OVERLAY_FORMAT_AUTO = 0,
	OVERLAY_FORMAT_GBRP = 1,
	OVERLAY_FORMAT_NB = 2,
	OVERLAY_FORMAT_RGB = 3,
	OVERLAY_FORMAT_YUV420 = 4,
	OVERLAY_FORMAT_YUV422 = 5,
	OVERLAY_FORMAT_YUV444 = 6
}
enum var_name {
	VAR_HSUB = 0,
	VAR_MAIN_H = 1,
	VAR_MAIN_W = 2,
	VAR_MH = 3,
	VAR_MW = 4,
	VAR_N = 5,
	VAR_OH = 6,
	VAR_OVERLAY_H = 7,
	VAR_OVERLAY_W = 8,
	VAR_OW = 9,
	VAR_POS = 10,
	VAR_T = 11,
	VAR_VARS_NB = 12,
	VAR_VSUB = 13,
	VAR_X = 14,
	VAR_Y = 15
}
enum main_in_fmts {
}
enum out_pix_fmts {
}
enum var_name {
	VAR_MAIN_iH = 0,
	VAR_MAIN_iW = 1,
	VAR_MH = 2,
	VAR_MW = 3,
	VAR_OH = 4,
	VAR_OVERLAY_H = 5,
	VAR_OVERLAY_W = 6,
	VAR_OVERLAY_X = 7,
	VAR_OVERLAY_Y = 8,
	VAR_OVERLAY_iH = 9,
	VAR_OVERLAY_iW = 10,
	VAR_OW = 11,
	VAR_OX = 12,
	VAR_OY = 13,
	VAR_VARS_NB = 14
}
enum pix_fmts {
}
enum EvalMode {
	EVAL_MODE_FRAME = 0,
	EVAL_MODE_INIT = 1,
	EVAL_MODE_NB = 2
}
enum var_name {
	VARS_NB = 0,
	VAR_A = 1,
	VAR_DAR = 2,
	VAR_HSUB = 3,
	VAR_IH = 4,
	VAR_IN_H = 5,
	VAR_IN_W = 6,
	VAR_IW = 7,
	VAR_OH = 8,
	VAR_OUT_H = 9,
	VAR_OUT_W = 10,
	VAR_OW = 11,
	VAR_SAR = 12,
	VAR_VSUB = 13,
	VAR_X = 14,
	VAR_Y = 15
}
enum __anon0b09325d0103 {
	NB_STATS_MODE = 0,
	STATS_MODE_ALL_FRAMES = 1,
	STATS_MODE_DIFF_FRAMES = 2,
	STATS_MODE_SINGLE_FRAMES = 3
}
enum in_fmts {
}
enum out_fmts {
}
enum color_search_method {
	COLOR_SEARCH_BRUTEFORCE = 0,
	COLOR_SEARCH_NNS_ITERATIVE = 1,
	COLOR_SEARCH_NNS_RECURSIVE = 2,
	NB_COLOR_SEARCHES = 3
}
enum diff_mode {
	DIFF_MODE_NONE = 0,
	DIFF_MODE_RECTANGLE = 1,
	NB_DIFF_MODE = 2
}
enum dithering_mode {
	DITHERING_BAYER = 0,
	DITHERING_FLOYD_STEINBERG = 1,
	DITHERING_HECKBERT = 2,
	DITHERING_NONE = 3,
	DITHERING_SIERRA2_4A = 4,
	DITHERING_SIERRA2 = 5,
	NB_DITHERING = 6
}
enum in_fmts {
}
enum inpal_fmts {
}
enum out_fmts {
}
enum EvalMode {
	EVAL_MODE_FRAME = 0,
	EVAL_MODE_INIT = 1,
	EVAL_MODE_NB = 2
}
enum PERSPECTIVESense {
	PERSPECTIVE_SENSE_DESTINATION = 1 ///< coordinates give locations in destination of corners of source.,
	PERSPECTIVE_SENSE_SOURCE = 0 ///< coordinates give locations in source of corners of destination.
}
enum __anon639c24de0103 {
	VAR_H = 0,
	VAR_IN = 1,
	VAR_ON = 2,
	VAR_VARS_NB = 3,
	VAR_W = 4
}
enum pix_fmts {
}
enum PhaseMode {
	ANALYZE = 0,
	AUTO_ANALYZE = 1,
	AUTO = 2,
	BOTTOM_FIRST_ANALYZE = 3,
	BOTTOM_FIRST = 4,
	FULL_ANALYZE = 5,
	PROGRESSIVE = 6,
	TOP_FIRST_ANALYZE = 7,
	TOP_FIRST = 8
}
enum pix_fmts {
}
enum pix_fmts {
}
enum mode {
	MODE_HARD = 0,
	MODE_MEDIUM = 1,
	MODE_SOFT = 2
}
enum pix_fmts {
}
enum alpha_pix_fmts {
}
enum no_alpha_pix_fmts {
}
enum pix_fmts {
	AV_PIX_FMT_GBRAP10 = 0,
	AV_PIX_FMT_GBRAP12 = 1,
	AV_PIX_FMT_GBRAP16 = 2,
	AV_PIX_FMT_GBRAP = 3,
	AV_PIX_FMT_GBRP10 = 4,
	AV_PIX_FMT_GBRP12 = 5,
	AV_PIX_FMT_GBRP14 = 6,
	AV_PIX_FMT_GBRP16 = 7,
	AV_PIX_FMT_GBRP9 = 8,
	AV_PIX_FMT_GBRP = 9,
	AV_PIX_FMT_GRAY10 = 10,
	AV_PIX_FMT_GRAY12 = 11,
	AV_PIX_FMT_GRAY14 = 12,
	AV_PIX_FMT_GRAY16 = 13,
	AV_PIX_FMT_GRAY8 = 14,
	AV_PIX_FMT_GRAY9 = 15,
	AV_PIX_FMT_NONE = 16,
	AV_PIX_FMT_YUV420P10 = 17,
	AV_PIX_FMT_YUV420P12 = 18,
	AV_PIX_FMT_YUV420P14 = 19,
	AV_PIX_FMT_YUV420P16 = 20,
	AV_PIX_FMT_YUV420P9 = 21,
	AV_PIX_FMT_YUV420P = 22,
	AV_PIX_FMT_YUV422P10 = 23,
	AV_PIX_FMT_YUV422P12 = 24,
	AV_PIX_FMT_YUV422P14 = 25,
	AV_PIX_FMT_YUV422P16 = 26,
	AV_PIX_FMT_YUV422P9 = 27,
	AV_PIX_FMT_YUV422P = 28,
	AV_PIX_FMT_YUV444P10 = 29,
	AV_PIX_FMT_YUV444P12 = 30,
	AV_PIX_FMT_YUV444P14 = 31,
	AV_PIX_FMT_YUV444P16 = 32,
	AV_PIX_FMT_YUV444P9 = 33,
	AV_PIX_FMT_YUV444P = 34,
	AV_PIX_FMT_YUVA420P10 = 35,
	AV_PIX_FMT_YUVA420P16 = 36,
	AV_PIX_FMT_YUVA420P9 = 37,
	AV_PIX_FMT_YUVA420P = 38,
	AV_PIX_FMT_YUVA422P10 = 39,
	AV_PIX_FMT_YUVA422P16 = 40,
	AV_PIX_FMT_YUVA422P9 = 41,
	AV_PIX_FMT_YUVA422P = 42,
	AV_PIX_FMT_YUVA444P10 = 43,
	AV_PIX_FMT_YUVA444P16 = 44,
	AV_PIX_FMT_YUVA444P9 = 45,
	AV_PIX_FMT_YUVA444P = 46
}
enum var_name {
	VAR_AMAX = 0,
	VAR_AMIN = 1,
	VAR_H = 2,
	VAR_UMAX = 3,
	VAR_UMIN = 4,
	VAR_VAL = 5,
	VAR_VARS_NB = 6,
	VAR_VMAX = 7,
	VAR_VMIN = 8,
	VAR_W = 9,
	VAR_YMAX = 10,
	VAR_YMIN = 11
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pixel_fmts {
}
enum pixel_fmts {
}
enum map_fmts {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pixel_fmts_eq {
}
enum pix_fmts {
}
enum var_name {
	VAR_HSUB = 0,
	VAR_IH = 1,
	VAR_IN_H = 2,
	VAR_IN_W = 3,
	VAR_IW = 4,
	VAR_N = 5,
	VAR_OH = 6,
	VAR_OUT_H = 7,
	VAR_OUT_W = 8,
	VAR_OW = 9,
	VAR_T = 10,
	VAR_VARS_NB = 11,
	VAR_VSUB = 12
}
enum pix_fmts {
}
enum EvalMode {
	EVAL_MODE_FRAME = 0,
	EVAL_MODE_INIT = 1,
	EVAL_MODE_NB = 2
}
enum pixel_formats {
}
enum supported_formats {
	AV_PIX_FMT_NV12 = 0,
	AV_PIX_FMT_P010 = 1,
	AV_PIX_FMT_P016 = 2,
	AV_PIX_FMT_YUV420P = 3,
	AV_PIX_FMT_YUV444P = 4
}
enum ScaleStage {
	STAGE_DEINTERLEAVE = 0,
	STAGE_INTERLEAVE = 1,
	STAGE_NB = 2,
	STAGE_RESIZE = 3
}
enum deinterleaved_formats {
}
enum pixel_formats {
}
enum supported_formats {
	AV_PIX_FMT_NV12 = 0,
	AV_PIX_FMT_YUV420P = 1,
	AV_PIX_FMT_YUV444P = 2
}
enum pixel_formats {
}
enum var_name {
	VARS_NB = 0,
	VAR_A = 1,
	VAR_DAR = 2,
	VAR_E = 3,
	VAR_IH = 4,
	VAR_IN_H = 5,
	VAR_IN_W = 6,
	VAR_IW = 7,
	VAR_OH = 8,
	VAR_OUT_H = 9,
	VAR_OUT_W = 10,
	VAR_OW = 11,
	VAR_PHI = 12,
	VAR_PI = 13,
	VAR_SAR = 14
}
enum color_range {
	NB_RANGES = 0,
	RANGE_BLACKS = 1,
	RANGE_BLUES = 2,
	RANGE_CYANS = 3,
	RANGE_GREENS = 4,
	RANGE_MAGENTAS = 5,
	RANGE_NEUTRALS = 6,
	RANGE_REDS = 7,
	RANGE_WHITES = 8,
	RANGE_YELLOWS = 9
}
enum correction_method {
	CORRECTION_METHOD_ABSOLUTE = 0,
	CORRECTION_METHOD_RELATIVE = 1,
	NB_CORRECTION_METHODS = 2
}
enum pix_fmts {
}
enum SetFieldMode {
	MODE_AUTO = -1,
	MODE_BFF = 1,
	MODE_PROG = 2,
	MODE_TFF = 3
}
enum in_fmts {
}
enum out_fmts {
}
enum FilterMode {
	FILTER_BRNG = 0,
	FILTER_NONE = -1,
	FILTER_TOUT = 2,
	FILTER_VREP = 3,
	FILT_NUMB = 4
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum mode {
	MODE_HARD = 0,
	MODE_SOFT = 1,
	NB_MODES = 2
}
enum pix_fmts {
}
enum pixel_formats {
}
enum pix_fmts {
}
enum StereoCode {
	ABOVE_BELOW_2_LR = 0,
	ABOVE_BELOW_2_RL = 1,
	ABOVE_BELOW_LR = 2,
	ABOVE_BELOW_RL = 3,
	ALTERNATING_LR = 4,
	ALTERNATING_RL = 5,
	ANAGLYPH_GM_COLOR = 6,
	ANAGLYPH_GM_DUBOIS = 7,
	ANAGLYPH_GM_GRAY = 8,
	ANAGLYPH_GM_HALF = 9,
	ANAGLYPH_RB_GRAY = 10,
	ANAGLYPH_RC_COLOR = 11,
	ANAGLYPH_RC_DUBOIS = 12,
	ANAGLYPH_RC_GRAY = 13,
	ANAGLYPH_RC_HALF = 14,
	ANAGLYPH_RG_GRAY = 15,
	ANAGLYPH_YB_COLOR = 16,
	ANAGLYPH_YB_DUBOIS = 17,
	ANAGLYPH_YB_GRAY = 18,
	ANAGLYPH_YB_HALF = 19,
	CHECKERBOARD_LR = 20,
	CHECKERBOARD_RL = 21,
	HDMI = 22,
	INTERLEAVE_COLS_LR = 23,
	INTERLEAVE_COLS_RL = 24,
	INTERLEAVE_ROWS_LR = 25,
	INTERLEAVE_ROWS_RL = 26,
	MONO_L = 27,
	MONO_R = 28,
	SIDE_BY_SIDE_2_LR = 29,
	SIDE_BY_SIDE_2_RL = 30,
	SIDE_BY_SIDE_LR = 31,
	SIDE_BY_SIDE_RL = 32,
	STEREO_CODE_COUNT = 33
}
enum anaglyph_pix_fmts {
	AV_PIX_FMT_BGR24 = 0,
	AV_PIX_FMT_NONE = 1,
	AV_PIX_FMT_RGB24 = 2
}
enum other_pix_fmts {
	AV_PIX_FMT_0BGR = 0,
	AV_PIX_FMT_0RGB = 1,
	AV_PIX_FMT_ABGR = 2,
	AV_PIX_FMT_ARGB = 3,
	AV_PIX_FMT_BGR0 = 4,
	AV_PIX_FMT_BGR24 = 5,
	AV_PIX_FMT_BGR48BE = 6,
	AV_PIX_FMT_BGR48LE = 7,
	AV_PIX_FMT_BGRA64BE = 8,
	AV_PIX_FMT_BGRA64LE = 9,
	AV_PIX_FMT_BGRA = 10,
	AV_PIX_FMT_GBRP10BE = 11,
	AV_PIX_FMT_GBRP10LE = 12,
	AV_PIX_FMT_GBRP12BE = 13,
	AV_PIX_FMT_GBRP12LE = 14,
	AV_PIX_FMT_GBRP14BE = 15,
	AV_PIX_FMT_GBRP14LE = 16,
	AV_PIX_FMT_GBRP16BE = 17,
	AV_PIX_FMT_GBRP16LE = 18,
	AV_PIX_FMT_GBRP9BE = 19,
	AV_PIX_FMT_GBRP9LE = 20,
	AV_PIX_FMT_GBRP = 21,
	AV_PIX_FMT_NONE = 22,
	AV_PIX_FMT_RGB0 = 23,
	AV_PIX_FMT_RGB24 = 24,
	AV_PIX_FMT_RGB48BE = 25,
	AV_PIX_FMT_RGB48LE = 26,
	AV_PIX_FMT_RGBA64BE = 27,
	AV_PIX_FMT_RGBA64LE = 28,
	AV_PIX_FMT_RGBA = 29,
	AV_PIX_FMT_YUV410P = 30,
	AV_PIX_FMT_YUV411P = 31,
	AV_PIX_FMT_YUV420P10BE = 32,
	AV_PIX_FMT_YUV420P10LE = 33,
	AV_PIX_FMT_YUV420P12BE = 34,
	AV_PIX_FMT_YUV420P12LE = 35,
	AV_PIX_FMT_YUV420P14BE = 36,
	AV_PIX_FMT_YUV420P14LE = 37,
	AV_PIX_FMT_YUV420P16BE = 38,
	AV_PIX_FMT_YUV420P16LE = 39,
	AV_PIX_FMT_YUV420P9BE = 40,
	AV_PIX_FMT_YUV420P9LE = 41,
	AV_PIX_FMT_YUV420P = 42,
	AV_PIX_FMT_YUV422P10BE = 43,
	AV_PIX_FMT_YUV422P10LE = 44,
	AV_PIX_FMT_YUV422P12BE = 45,
	AV_PIX_FMT_YUV422P12LE = 46,
	AV_PIX_FMT_YUV422P14BE = 47,
	AV_PIX_FMT_YUV422P14LE = 48,
	AV_PIX_FMT_YUV422P16BE = 49,
	AV_PIX_FMT_YUV422P16LE = 50,
	AV_PIX_FMT_YUV422P9BE = 51,
	AV_PIX_FMT_YUV422P9LE = 52,
	AV_PIX_FMT_YUV422P = 53,
	AV_PIX_FMT_YUV440P = 54,
	AV_PIX_FMT_YUV444P10BE = 55,
	AV_PIX_FMT_YUV444P10LE = 56,
	AV_PIX_FMT_YUV444P12BE = 57,
	AV_PIX_FMT_YUV444P12LE = 58,
	AV_PIX_FMT_YUV444P14BE = 59,
	AV_PIX_FMT_YUV444P14LE = 60,
	AV_PIX_FMT_YUV444P16BE = 61,
	AV_PIX_FMT_YUV444P16LE = 62,
	AV_PIX_FMT_YUV444P9BE = 63,
	AV_PIX_FMT_YUV444P9LE = 64,
	AV_PIX_FMT_YUV444P = 65,
	AV_PIX_FMT_YUVA420P10BE = 66,
	AV_PIX_FMT_YUVA420P10LE = 67,
	AV_PIX_FMT_YUVA420P16BE = 68,
	AV_PIX_FMT_YUVA420P16LE = 69,
	AV_PIX_FMT_YUVA420P9BE = 70,
	AV_PIX_FMT_YUVA420P9LE = 71,
	AV_PIX_FMT_YUVA420P = 72,
	AV_PIX_FMT_YUVA422P10BE = 73,
	AV_PIX_FMT_YUVA422P10LE = 74,
	AV_PIX_FMT_YUVA422P16BE = 75,
	AV_PIX_FMT_YUVA422P16LE = 76,
	AV_PIX_FMT_YUVA422P9BE = 77,
	AV_PIX_FMT_YUVA422P9LE = 78,
	AV_PIX_FMT_YUVA422P = 79,
	AV_PIX_FMT_YUVA444P10BE = 80,
	AV_PIX_FMT_YUVA444P10LE = 81,
	AV_PIX_FMT_YUVA444P16BE = 82,
	AV_PIX_FMT_YUVA444P16LE = 83,
	AV_PIX_FMT_YUVA444P9BE = 84,
	AV_PIX_FMT_YUVA444P9LE = 85,
	AV_PIX_FMT_YUVA444P = 86,
	AV_PIX_FMT_YUVJ411P = 87,
	AV_PIX_FMT_YUVJ420P = 88,
	AV_PIX_FMT_YUVJ422P = 89,
	AV_PIX_FMT_YUVJ440P = 90,
	AV_PIX_FMT_YUVJ444P = 91
}
enum pix_fmts {
}
enum __anonc379efbd0103 {
	VAR_A = 0,
	VAR_DAR = 1,
	VAR_H = 2,
	VAR_N = 3,
	VAR_POS = 4,
	VAR_SAR = 5,
	VAR_T = 6,
	VAR_VARS_NB = 7,
	VAR_W = 8
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum supported_formats {
	AV_PIX_FMT_NV12 = 0,
	AV_PIX_FMT_P010 = 1,
	AV_PIX_FMT_P016 = 2,
	AV_PIX_FMT_YUV420P = 3,
	AV_PIX_FMT_YUV444P16 = 4,
	AV_PIX_FMT_YUV444P = 5
}
enum full_scale_yuvj_pix_fmts {
	AV_PIX_FMT_NONE = 0,
	FULL_SCALE_YUVJ_FORMATS = 1
}
enum pix_fmts {
}
enum TonemapAlgorithm {
	TONEMAP_CLIP = 0,
	TONEMAP_GAMMA = 1,
	TONEMAP_HABLE = 2,
	TONEMAP_LINEAR = 3,
	TONEMAP_MAX = 4,
	TONEMAP_MOBIUS = 5,
	TONEMAP_NONE = 6,
	TONEMAP_REINHARD = 7
}
enum pix_fmts {
	AV_PIX_FMT_GBRAPF32 = 0,
	AV_PIX_FMT_GBRPF32 = 1,
	AV_PIX_FMT_NONE = 2
}
enum TonemapAlgorithm {
	TONEMAP_CLIP = 0,
	TONEMAP_GAMMA = 1,
	TONEMAP_HABLE = 2,
	TONEMAP_LINEAR = 3,
	TONEMAP_MAX = 4,
	TONEMAP_MOBIUS = 5,
	TONEMAP_NONE = 6,
	TONEMAP_REINHARD = 7
}
enum Passthrough {
	NPP_TRANSPOSE_PT_TYPE_LANDSCAPE = 0,
	NPP_TRANSPOSE_PT_TYPE_NONE = 0,
	NPP_TRANSPOSE_PT_TYPE_PORTRAIT = 2
}
enum TransposeStage {
	STAGE_NB = 0,
	STAGE_ROTATE = 1,
	STAGE_TRANSPOSE = 2
}
enum Transpose {
	NPP_TRANSPOSE_CCLOCK_FLIP = 0,
	NPP_TRANSPOSE_CCLOCK = 2,
	NPP_TRANSPOSE_CLOCK_FLIP = 3,
	NPP_TRANSPOSE_CLOCK = 1
}
enum pixel_formats {
}
enum supported_formats {
	AV_PIX_FMT_YUV420P = 0,
	AV_PIX_FMT_YUV444P = 1
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum VectorscopeMode {
	COLOR2 = 0,
	COLOR3 = 1,
	COLOR4 = 2,
	COLOR5 = 3,
	COLOR = 4,
	GRAY = 5,
	MODE_NB = 6
}
enum in1_pix_fmts {
	AV_PIX_FMT_GBRAP10 = 0,
	AV_PIX_FMT_GBRAP12 = 1,
	AV_PIX_FMT_GBRAP = 2,
	AV_PIX_FMT_GBRP10 = 3,
	AV_PIX_FMT_GBRP12 = 4,
	AV_PIX_FMT_GBRP9 = 5,
	AV_PIX_FMT_GBRP = 6,
	AV_PIX_FMT_NONE = 7,
	AV_PIX_FMT_YUV444P10 = 8,
	AV_PIX_FMT_YUV444P12 = 9,
	AV_PIX_FMT_YUV444P9 = 10,
	AV_PIX_FMT_YUV444P = 11,
	AV_PIX_FMT_YUVA444P10 = 12,
	AV_PIX_FMT_YUVA444P9 = 13,
	AV_PIX_FMT_YUVA444P = 14,
	AV_PIX_FMT_YUVJ444P = 15
}
enum in2_pix_fmts {
	AV_PIX_FMT_GBRAP10 = 0,
	AV_PIX_FMT_GBRAP12 = 1,
	AV_PIX_FMT_GBRAP = 2,
	AV_PIX_FMT_GBRP10 = 3,
	AV_PIX_FMT_GBRP12 = 4,
	AV_PIX_FMT_GBRP9 = 5,
	AV_PIX_FMT_GBRP = 6,
	AV_PIX_FMT_NONE = 7,
	AV_PIX_FMT_YUV410P = 8,
	AV_PIX_FMT_YUV411P = 9,
	AV_PIX_FMT_YUV420P10 = 10,
	AV_PIX_FMT_YUV420P12 = 11,
	AV_PIX_FMT_YUV420P9 = 12,
	AV_PIX_FMT_YUV420P = 13,
	AV_PIX_FMT_YUV422P10 = 14,
	AV_PIX_FMT_YUV422P12 = 15,
	AV_PIX_FMT_YUV422P9 = 16,
	AV_PIX_FMT_YUV422P = 17,
	AV_PIX_FMT_YUV440P12 = 18,
	AV_PIX_FMT_YUV440P = 19,
	AV_PIX_FMT_YUV444P10 = 20,
	AV_PIX_FMT_YUV444P12 = 21,
	AV_PIX_FMT_YUV444P9 = 22,
	AV_PIX_FMT_YUV444P = 23,
	AV_PIX_FMT_YUVA420P10 = 24,
	AV_PIX_FMT_YUVA420P9 = 25,
	AV_PIX_FMT_YUVA420P = 26,
	AV_PIX_FMT_YUVA422P10 = 27,
	AV_PIX_FMT_YUVA422P9 = 28,
	AV_PIX_FMT_YUVA422P = 29,
	AV_PIX_FMT_YUVA444P10 = 30,
	AV_PIX_FMT_YUVA444P9 = 31,
	AV_PIX_FMT_YUVA444P = 32,
	AV_PIX_FMT_YUVJ411P = 33,
	AV_PIX_FMT_YUVJ420P = 34,
	AV_PIX_FMT_YUVJ422P = 35,
	AV_PIX_FMT_YUVJ444P = 36
}
enum out_rgb10_pix_fmts {
	AV_PIX_FMT_GBRAP10 = 0,
	AV_PIX_FMT_GBRP10 = 1,
	AV_PIX_FMT_NONE = 2
}
enum out_rgb12_pix_fmts {
	AV_PIX_FMT_GBRAP12 = 0,
	AV_PIX_FMT_GBRP12 = 1,
	AV_PIX_FMT_NONE = 2
}
enum out_rgb8_pix_fmts {
	AV_PIX_FMT_GBRAP = 0,
	AV_PIX_FMT_GBRP = 1,
	AV_PIX_FMT_NONE = 2
}
enum out_rgb9_pix_fmts {
	AV_PIX_FMT_GBRP9 = 0,
	AV_PIX_FMT_NONE = 1
}
enum out_yuv10_pix_fmts {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_YUV444P10 = 1,
	AV_PIX_FMT_YUVA444P10 = 2
}
enum out_yuv12_pix_fmts {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_YUV444P12 = 1
}
enum out_yuv8_pix_fmts {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_YUV444P = 1,
	AV_PIX_FMT_YUVA444P = 2
}
enum out_yuv9_pix_fmts {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_YUV444P9 = 1,
	AV_PIX_FMT_YUVA444P9 = 2
}
enum pixel_fmts {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum EvalMode {
	EVAL_MODE_FRAME = 0,
	EVAL_MODE_INIT = 1,
	EVAL_MODE_NB = 2
}
enum pix_fmts {
}
enum var_name {
	VAR_H = 0,
	VAR_NB = 1,
	VAR_N = 2,
	VAR_PTS = 3,
	VAR_R = 4,
	VAR_TB = 5,
	VAR_T = 6,
	VAR_W = 7
}
enum in_pix_fmts {
}
enum out_pix_fmts {
}
enum var_name {
	CH = 0,
	CW = 1,
	CX = 2,
	CY = 3,
	VAR_H = 4,
	VAR_IN_H = 5,
	VAR_IN_W = 6,
	VAR_OUT_H = 7,
	VAR_OUT_W = 8,
	VAR_VARS_NB = 9,
	VAR_W = 10,
	VAR_iH = 11,
	VAR_iW = 12,
	VAR_oH = 13,
	VAR_oW = 14
}
enum pix_fmts {
}
enum DisplayType {
	NB_DISPLAYS = 0,
	OVERLAY = 1,
	PARADE = 2,
	STACK = 3
}
enum FilterType {
	ACOLOR = 0,
	AFLAT = 1,
	CHROMA = 2,
	COLOR = 3,
	FLAT = 4,
	LOWPASS = 5,
	NB_FILTERS = 6,
	XFLAT = 7
}
enum ScaleType {
	DIGITAL = 0,
	IRE = 1,
	MILLIVOLTS = 2,
	NB_SCALES = 3
}
enum flat_pix_fmts {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_YUV444P10 = 1,
	AV_PIX_FMT_YUV444P12 = 2,
	AV_PIX_FMT_YUV444P9 = 3,
	AV_PIX_FMT_YUV444P = 4,
	AV_PIX_FMT_YUVJ444P = 5
}
enum in_color_pix_fmts {
	AV_PIX_FMT_GBRAP = 0,
	AV_PIX_FMT_GBRP10 = 1,
	AV_PIX_FMT_GBRP12 = 2,
	AV_PIX_FMT_GBRP9 = 3,
	AV_PIX_FMT_GBRP = 4,
	AV_PIX_FMT_NONE = 5,
	AV_PIX_FMT_YUV411P = 6,
	AV_PIX_FMT_YUV420P10 = 7,
	AV_PIX_FMT_YUV420P12 = 8,
	AV_PIX_FMT_YUV420P9 = 9,
	AV_PIX_FMT_YUV420P = 10,
	AV_PIX_FMT_YUV422P10 = 11,
	AV_PIX_FMT_YUV422P12 = 12,
	AV_PIX_FMT_YUV422P9 = 13,
	AV_PIX_FMT_YUV422P = 14,
	AV_PIX_FMT_YUV440P12 = 15,
	AV_PIX_FMT_YUV440P = 16,
	AV_PIX_FMT_YUV444P10 = 17,
	AV_PIX_FMT_YUV444P12 = 18,
	AV_PIX_FMT_YUV444P9 = 19,
	AV_PIX_FMT_YUV444P = 20,
	AV_PIX_FMT_YUVA420P10 = 21,
	AV_PIX_FMT_YUVA420P9 = 22,
	AV_PIX_FMT_YUVA420P = 23,
	AV_PIX_FMT_YUVA422P10 = 24,
	AV_PIX_FMT_YUVA422P9 = 25,
	AV_PIX_FMT_YUVA422P = 26,
	AV_PIX_FMT_YUVA444P10 = 27,
	AV_PIX_FMT_YUVA444P9 = 28,
	AV_PIX_FMT_YUVA444P = 29,
	AV_PIX_FMT_YUVJ411P = 30,
	AV_PIX_FMT_YUVJ420P = 31,
	AV_PIX_FMT_YUVJ422P = 32,
	AV_PIX_FMT_YUVJ440P = 33,
	AV_PIX_FMT_YUVJ444P = 34
}
enum in_flat_pix_fmts {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_YUV411P = 1,
	AV_PIX_FMT_YUV420P10 = 2,
	AV_PIX_FMT_YUV420P12 = 3,
	AV_PIX_FMT_YUV420P9 = 4,
	AV_PIX_FMT_YUV420P = 5,
	AV_PIX_FMT_YUV422P10 = 6,
	AV_PIX_FMT_YUV422P12 = 7,
	AV_PIX_FMT_YUV422P9 = 8,
	AV_PIX_FMT_YUV422P = 9,
	AV_PIX_FMT_YUV440P12 = 10,
	AV_PIX_FMT_YUV440P = 11,
	AV_PIX_FMT_YUV444P10 = 12,
	AV_PIX_FMT_YUV444P12 = 13,
	AV_PIX_FMT_YUV444P9 = 14,
	AV_PIX_FMT_YUV444P = 15,
	AV_PIX_FMT_YUVA420P10 = 16,
	AV_PIX_FMT_YUVA420P9 = 17,
	AV_PIX_FMT_YUVA420P = 18,
	AV_PIX_FMT_YUVA422P10 = 19,
	AV_PIX_FMT_YUVA422P9 = 20,
	AV_PIX_FMT_YUVA422P = 21,
	AV_PIX_FMT_YUVA444P10 = 22,
	AV_PIX_FMT_YUVA444P9 = 23,
	AV_PIX_FMT_YUVA444P = 24,
	AV_PIX_FMT_YUVJ411P = 25,
	AV_PIX_FMT_YUVJ420P = 26,
	AV_PIX_FMT_YUVJ422P = 27,
	AV_PIX_FMT_YUVJ440P = 28,
	AV_PIX_FMT_YUVJ444P = 29
}
enum in_lowpass_pix_fmts {
	AV_PIX_FMT_GBRAP = 0,
	AV_PIX_FMT_GBRP10 = 1,
	AV_PIX_FMT_GBRP12 = 2,
	AV_PIX_FMT_GBRP9 = 3,
	AV_PIX_FMT_GBRP = 4,
	AV_PIX_FMT_GRAY10 = 5,
	AV_PIX_FMT_GRAY12 = 6,
	AV_PIX_FMT_GRAY8 = 7,
	AV_PIX_FMT_GRAY9 = 8,
	AV_PIX_FMT_NONE = 9,
	AV_PIX_FMT_YUV410P = 10,
	AV_PIX_FMT_YUV411P = 11,
	AV_PIX_FMT_YUV420P10 = 12,
	AV_PIX_FMT_YUV420P12 = 13,
	AV_PIX_FMT_YUV420P9 = 14,
	AV_PIX_FMT_YUV420P = 15,
	AV_PIX_FMT_YUV422P10 = 16,
	AV_PIX_FMT_YUV422P12 = 17,
	AV_PIX_FMT_YUV422P9 = 18,
	AV_PIX_FMT_YUV422P = 19,
	AV_PIX_FMT_YUV440P12 = 20,
	AV_PIX_FMT_YUV440P = 21,
	AV_PIX_FMT_YUV444P10 = 22,
	AV_PIX_FMT_YUV444P12 = 23,
	AV_PIX_FMT_YUV444P9 = 24,
	AV_PIX_FMT_YUV444P = 25,
	AV_PIX_FMT_YUVA420P10 = 26,
	AV_PIX_FMT_YUVA420P9 = 27,
	AV_PIX_FMT_YUVA420P = 28,
	AV_PIX_FMT_YUVA422P10 = 29,
	AV_PIX_FMT_YUVA422P9 = 30,
	AV_PIX_FMT_YUVA422P = 31,
	AV_PIX_FMT_YUVA444P10 = 32,
	AV_PIX_FMT_YUVA444P9 = 33,
	AV_PIX_FMT_YUVA444P = 34,
	AV_PIX_FMT_YUVJ411P = 35,
	AV_PIX_FMT_YUVJ420P = 36,
	AV_PIX_FMT_YUVJ422P = 37,
	AV_PIX_FMT_YUVJ440P = 38,
	AV_PIX_FMT_YUVJ444P = 39
}
enum out_gray10_lowpass_pix_fmts {
	AV_PIX_FMT_GRAY10 = 0,
	AV_PIX_FMT_NONE = 1
}
enum out_gray12_lowpass_pix_fmts {
	AV_PIX_FMT_GRAY12 = 0,
	AV_PIX_FMT_NONE = 1
}
enum out_gray8_lowpass_pix_fmts {
	AV_PIX_FMT_GRAY8 = 0,
	AV_PIX_FMT_NONE = 1
}
enum out_gray9_lowpass_pix_fmts {
	AV_PIX_FMT_GRAY9 = 0,
	AV_PIX_FMT_NONE = 1
}
enum out_rgb10_lowpass_pix_fmts {
	AV_PIX_FMT_GBRAP10 = 0,
	AV_PIX_FMT_GBRP10 = 1,
	AV_PIX_FMT_NONE = 2
}
enum out_rgb12_lowpass_pix_fmts {
	AV_PIX_FMT_GBRAP12 = 0,
	AV_PIX_FMT_GBRP12 = 1,
	AV_PIX_FMT_NONE = 2
}
enum out_rgb8_lowpass_pix_fmts {
	AV_PIX_FMT_GBRAP = 0,
	AV_PIX_FMT_GBRP = 1,
	AV_PIX_FMT_NONE = 2
}
enum out_rgb9_lowpass_pix_fmts {
	AV_PIX_FMT_GBRP9 = 0,
	AV_PIX_FMT_NONE = 1
}
enum out_yuv10_lowpass_pix_fmts {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_YUV444P10 = 1,
	AV_PIX_FMT_YUVA444P10 = 2
}
enum out_yuv12_lowpass_pix_fmts {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_YUV444P12 = 1
}
enum out_yuv8_lowpass_pix_fmts {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_YUV444P = 1,
	AV_PIX_FMT_YUVA444P = 2,
	AV_PIX_FMT_YUVJ444P = 3
}
enum out_yuv9_lowpass_pix_fmts {
	AV_PIX_FMT_NONE = 0,
	AV_PIX_FMT_YUV444P9 = 1,
	AV_PIX_FMT_YUVA444P9 = 2
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum var_name {
	VARS_NB = 0,
	VAR_A = 1,
	VAR_DAR = 2,
	VAR_DURATION = 3,
	VAR_FRAME = 4,
	VAR_HSUB = 5,
	VAR_IH = 6,
	VAR_IN_H = 7,
	VAR_IN_W = 8,
	VAR_IN = 9,
	VAR_IW = 10,
	VAR_OH = 11,
	VAR_ON = 12,
	VAR_OUT_H = 13,
	VAR_OUT_W = 14,
	VAR_OW = 15,
	VAR_PDURATION = 16,
	VAR_PX = 17,
	VAR_PY = 18,
	VAR_PZOOM = 19,
	VAR_SAR = 20,
	VAR_TIME = 21,
	VAR_VSUB = 22,
	VAR_X = 23,
	VAR_Y = 24,
	VAR_ZOOM = 25
}
enum pixel_fmts {
}
enum var_name {
	VARS_NB = 0,
	VAR_A = 1,
	VAR_DAR = 2,
	VAR_HSUB = 3,
	VAR_IH = 4,
	VAR_IN_H = 5,
	VAR_IN_W = 6,
	VAR_IW = 7,
	VAR_OHSUB = 8,
	VAR_OH = 9,
	VAR_OUT_H = 10,
	VAR_OUT_W = 11,
	VAR_OVSUB = 12,
	VAR_OW = 13,
	VAR_SAR = 14,
	VAR_VSUB = 15
}
enum __anon73b5f6ef0103 {
}
enum pix_fmts {
}
enum __anona22ed7f60103 {
}
enum pix_fmts {
}
enum Inner {
	BLACK = 0,
	CONVTIME = 1,
	MINCOL = 2,
	PERIOD = 3
}
enum Outer {
	ITERATION_COUNT = 0,
	NORMALIZED_ITERATION_COUNT = 1,
	OUTZ = 2,
	WHITE = 3
}
enum pix_fmts {
}
enum pix_fmts {
}
enum test_type {
	TEST_ALL = 0,
	TEST_AMP_CHROMA = 1,
	TEST_AMP_LUMA = 2,
	TEST_CBP = 3,
	TEST_DC_CHROMA = 4,
	TEST_DC_LUMA = 5,
	TEST_FREQ_CHROMA = 6,
	TEST_FREQ_LUMA = 7,
	TEST_MV = 8,
	TEST_NB = 9,
	TEST_RING1 = 10,
	TEST_RING2 = 11
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum pix_fmts {
}
enum WindowFunc {
	NB_WFUNC = 0,
	WFUNC_BARTLETT = 1,
	WFUNC_BHANN = 2,
	WFUNC_BHARRIS = 3,
	WFUNC_BLACKMAN = 4,
	WFUNC_BNUTTALL = 5,
	WFUNC_BOHMAN = 6,
	WFUNC_CAUCHY = 7,
	WFUNC_DOLPH = 8,
	WFUNC_FLATTOP = 9,
	WFUNC_GAUSS = 10,
	WFUNC_HAMMING = 11,
	WFUNC_HANNING = 12,
	WFUNC_LANCZOS = 13,
	WFUNC_NUTTALL = 14,
	WFUNC_PARZEN = 15,
	WFUNC_POISSON = 16,
	WFUNC_RECT = 17,
	WFUNC_SINE = 18,
	WFUNC_TUKEY = 19,
	WFUNC_WELCH = 20
}
enum YADIFCurrentField {
	YADIF_FIELD_BACK_END = -1 ///< The last frame in a sequence,
	YADIF_FIELD_END = 0 ///< The first or last field in a sequence,
	YADIF_FIELD_NORMAL = 1 ///< A normal field in the middle of a sequence
}
enum YADIFDeint {
	YADIF_DEINT_ALL = 0 ///< deinterlace all frames,
	YADIF_DEINT_INTERLACED = 1 ///< only deinterlace frames marked as interlaced
}
enum YADIFMode {
	YADIF_MODE_SEND_FIELD_NOSPATIAL = 3 ///< send 1 frame for each field but skips spatial interlacing check,
	YADIF_MODE_SEND_FIELD = 1 ///< send 1 frame for each field,
	YADIF_MODE_SEND_FRAME_NOSPATIAL = 2 ///< send 1 frame for each frame but skips spatial interlacing check,
	YADIF_MODE_SEND_FRAME = 0 ///< send 1 frame for each frame
}
enum YADIFParity {
	YADIF_PARITY_AUTO = -1 ///< auto detection,
	YADIF_PARITY_BFF = 1 ///< bottom field first,
	YADIF_PARITY_TFF = 0 ///< top field first
}
enum ASFDataType {
	ASF_BOOL = 2,
	ASF_BYTE_ARRAY = 1,
	ASF_DWORD = 3,
	ASF_GUID = 6,
	ASF_QWORD = 4,
	ASF_UNICODE = 0,
	ASF_WORD = 5
}
enum __anon540a3db00103 {
}
enum __anonc63164520103 {
}
enum AVDurationEstimationMethod {
	AVFMT_DURATION_FROM_BITRATE = 0,
	AVFMT_DURATION_FROM_PTS = 1,
	AVFMT_DURATION_FROM_STREAM = 2
}
enum AVStreamParseType {
	AVSTREAM_PARSE_FULL_ONCE = 0,
	AVSTREAM_PARSE_FULL_RAW = 1,
	AVSTREAM_PARSE_FULL = 2,
	AVSTREAM_PARSE_HEADERS = 3,
	AVSTREAM_PARSE_NONE = 4,
	AVSTREAM_PARSE_TIMESTAMPS = 5
}
enum AVTimebaseSource {
	AVFMT_TBCF_AUTO = -1,
	AVFMT_TBCF_DECODER = 1,
	AVFMT_TBCF_DEMUXER = 2,
	AVFMT_TBCF_R_FRAMERATE = 3
}
enum AVIODataMarkerType {
	AVIO_DATA_MARKER_BOUNDARY_POINT = 0,
	AVIO_DATA_MARKER_FLUSH_POINT = 1,
	AVIO_DATA_MARKER_HEADER = 2,
	AVIO_DATA_MARKER_SYNC_POINT = 3,
	AVIO_DATA_MARKER_TRAILER = 4,
	AVIO_DATA_MARKER_UNKNOWN = 5
}
enum AVIODirEntryType {
	AVIO_ENTRY_BLOCK_DEVICE = 0,
	AVIO_ENTRY_CHARACTER_DEVICE = 1,
	AVIO_ENTRY_DIRECTORY = 2,
	AVIO_ENTRY_FILE = 3,
	AVIO_ENTRY_NAMED_PIPE = 4,
	AVIO_ENTRY_SERVER = 5,
	AVIO_ENTRY_SHARE = 6,
	AVIO_ENTRY_SOCKET = 7,
	AVIO_ENTRY_SYMBOLIC_LINK = 8,
	AVIO_ENTRY_UNKNOWN = 9,
	AVIO_ENTRY_WORKGROUP = 10
}
enum AVLangCodespace {
	AV_LANG_ISO639_1 = 0,
	AV_LANG_ISO639_2_BIBL = 1,
	AV_LANG_ISO639_2_TERM = 2
}
enum avs_block_type {
	AVS_AUDIO = 0x02,
	AVS_GAME_DATA = 0x04,
	AVS_NONE = 0x00,
	AVS_PALETTE = 0x03,
	AVS_VIDEO = 0x01
}
enum BinkAudFlags {
	BINK_AUD_16BITS = 0x4000 ///< prefer 16-bit output,
	BINK_AUD_STEREO = 0x2000,
	BINK_AUD_USEDCT = 0x1000
}
enum BMVFlags {
	BMV_AUDIO = 0x20,
	BMV_DELTA = 1,
	BMV_END = 2,
	BMV_INTRA = 3,
	BMV_NOP = 0
}
enum FingerprintFormat {
	FINGERPRINT_BASE64 = 0,
	FINGERPRINT_COMPRESSED = 1,
	FINGERPRINT_RAW = 2
}
enum __anon705df0a70203 {
	CC_LEAD = 1 /**< LEAD (M)JPEG */,
	CC_RGB = 0 /**< Gray */,
	CC_UNINT = 2 /**< Uninterpolated color image (CFA field indicates color ordering) */
}
enum __anon705df0a70303 {
	CFA_BAYERFLIP = 4 /**< RG/GB */,
	CFA_BAYER = 3 /**< GB/RG */,
	CFA_NONE = 0 /**< GRAY */,
	CFA_VRIV6 = 2 /**< BGGR/GRBG */,
	CFA_VRI = 1 /**< GBRG/RGGB */
}
enum ConcatMatchMode {
	MATCH_EXACT_ID = 0,
	MATCH_ONE_TO_ONE = 1
}
enum __anon1dd742610103 {
	DASH_TMPL_ID_BANDWIDTH = 0,
	DASH_TMPL_ID_ESCAPE = 1,
	DASH_TMPL_ID_NUMBER = 2,
	DASH_TMPL_ID_REP_ID = 3,
	DASH_TMPL_ID_TIME = 4,
	DASH_TMPL_ID_UNDEFINED = -1
}
enum __anon0ac56c320103 {
	SEGMENT_TYPE_AUTO = 0,
	SEGMENT_TYPE_MP4 = 1,
	SEGMENT_TYPE_NB = 2,
	SEGMENT_TYPE_WEBM = 3
}
enum __anon0ac56c320203 {
}
enum FifoMessageType {
	FIFO_FLUSH_OUTPUT = 0,
	FIFO_WRITE_HEADER = 1,
	FIFO_WRITE_PACKET = 2
}
enum FlvTagType {
	FLV_TAG_TYPE_AUDIO = 0x08,
	FLV_TAG_TYPE_META = 0x12,
	FLV_TAG_TYPE_VIDEO = 0x09
}
enum __anon8cb4a5890103 {
	FLV_HEADER_FLAG_HASAUDIO = 4,
	FLV_HEADER_FLAG_HASVIDEO = 1
}
enum __anon8cb4a5890203 {
	FLV_STREAM_TYPE_AUDIO = 0,
	FLV_STREAM_TYPE_DATA = 1,
	FLV_STREAM_TYPE_NB = 2,
	FLV_STREAM_TYPE_SUBTITLE = 3,
	FLV_STREAM_TYPE_VIDEO = 4
}
enum __anon8cb4a5890303 {
	FLV_MONO = 0,
	FLV_STEREO = 1
}
enum __anon8cb4a5890403 {
	FLV_SAMPLESSIZE_16BIT = 1 << FLV_AUDIO_SAMPLESSIZE_OFFSET,
	FLV_SAMPLESSIZE_8BIT = 0
}
enum __anon8cb4a5890503 {
	FLV_SAMPLERATE_11025HZ = 1 << FLV_AUDIO_SAMPLERATE_OFFSET,
	FLV_SAMPLERATE_22050HZ = 2 << FLV_AUDIO_SAMPLERATE_OFFSET,
	FLV_SAMPLERATE_44100HZ = 3 << FLV_AUDIO_SAMPLERATE_OFFSET,
	FLV_SAMPLERATE_SPECIAL = 0 /**< signifies 5512Hz and 8000Hz in the case of NELLYMOSER */
}
enum __anon8cb4a5890603 {
	FLV_CODECID_AAC = 10<< FLV_AUDIO_CODECID_OFFSET,
	FLV_CODECID_ADPCM = 1 << FLV_AUDIO_CODECID_OFFSET,
	FLV_CODECID_MP3 = 2 << FLV_AUDIO_CODECID_OFFSET,
	FLV_CODECID_NELLYMOSER_16KHZ_MONO = 4 << FLV_AUDIO_CODECID_OFFSET,
	FLV_CODECID_NELLYMOSER_8KHZ_MONO = 5 << FLV_AUDIO_CODECID_OFFSET,
	FLV_CODECID_NELLYMOSER = 6 << FLV_AUDIO_CODECID_OFFSET,
	FLV_CODECID_PCM_ALAW = 7 << FLV_AUDIO_CODECID_OFFSET,
	FLV_CODECID_PCM_LE = 3 << FLV_AUDIO_CODECID_OFFSET,
	FLV_CODECID_PCM_MULAW = 8 << FLV_AUDIO_CODECID_OFFSET,
	FLV_CODECID_PCM = 0,
	FLV_CODECID_SPEEX = 11<< FLV_AUDIO_CODECID_OFFSET
}
enum __anon8cb4a5890703 {
	FLV_CODECID_H263 = 2,
	FLV_CODECID_H264 = 7,
	FLV_CODECID_MPEG4 = 9,
	FLV_CODECID_REALH263 = 8,
	FLV_CODECID_SCREEN2 = 6,
	FLV_CODECID_SCREEN = 3,
	FLV_CODECID_VP6A = 5,
	FLV_CODECID_VP6 = 4
}
enum __anon8cb4a5890803 {
	FLV_FRAME_DISP_INTER = 3 << FLV_VIDEO_FRAMETYPE_OFFSET ///< disposable inter frame (H.263 only),
	FLV_FRAME_GENERATED_KEY = 4 << FLV_VIDEO_FRAMETYPE_OFFSET ///< generated key frame (reserved for server use only),
	FLV_FRAME_INTER = 2 << FLV_VIDEO_FRAMETYPE_OFFSET ///< inter frame (for AVC a non-seekable frame),
	FLV_FRAME_KEY = 1 << FLV_VIDEO_FRAMETYPE_OFFSET ///< key frame (for AVC a seekable frame),
	FLV_FRAME_VIDEO_INFO_CMD = 5 << FLV_VIDEO_FRAMETYPE_OFFSET ///< video info/command frame
}
enum __anon8cb4a5890903 {
	AMF_DATA_TYPE_ARRAY = 0x0a,
	AMF_DATA_TYPE_BOOL = 0x01,
	AMF_DATA_TYPE_DATE = 0x0b,
	AMF_DATA_TYPE_LONG_STRING = 0x0c,
	AMF_DATA_TYPE_MIXEDARRAY = 0x08,
	AMF_DATA_TYPE_NULL = 0x05,
	AMF_DATA_TYPE_NUMBER = 0x00,
	AMF_DATA_TYPE_OBJECT_END = 0x09,
	AMF_DATA_TYPE_OBJECT = 0x03,
	AMF_DATA_TYPE_REFERENCE = 0x07,
	AMF_DATA_TYPE_STRING = 0x02,
	AMF_DATA_TYPE_UNDEFINED = 0x06,
	AMF_DATA_TYPE_UNSUPPORTED = 0x0d
}
enum stream_types {
}
enum __anon1ee1de5a0103 {
	FLV_AAC_SEQ_HEADER_DETECT = (1 << 0),
	FLV_ADD_KEYFRAME_INDEX = (1 << 2),
	FLV_NO_DURATION_FILESIZE = (1 << 4),
	FLV_NO_METADATA = (1 << 3),
	FLV_NO_SEQUENCE_END = (1 << 1)
}
enum nodat {
}
enum __anon8cb8ef060103 {
	DISCONNECTED = 0,
	DOWNLOADING = 1,
	LISTING_DIR = 2,
	READY = 3,
	UNKNOWN = 4,
	UPLOADING = 5
}
enum __anon8cb8ef060203 {
	MLSD = 0,
	NLST = 1,
	UNKNOWN_METHOD = 2
}
enum __anon8ccd0e860103 {
	PKT_EOS = 0xfb,
	PKT_FLT = 0xfc,
	PKT_MAP = 0xbc,
	PKT_MEDIA = 0xbf,
	PKT_UMF = 0xfd
}
enum __anon8ccd0e860203 {
	MAT_FIRST_FIELD = 0x41,
	MAT_LAST_FIELD = 0x42,
	MAT_MARK_IN = 0x43,
	MAT_MARK_OUT = 0x44,
	MAT_NAME = 0x40,
	MAT_SIZE = 0x45
}
enum __anon8ccd0e860303 {
	TRACK_AUX = 0x4d,
	TRACK_FPF = 0x52,
	TRACK_FPS = 0x50,
	TRACK_LINES = 0x51,
	TRACK_MPG_AUX = 0x4f,
	TRACK_NAME = 0x4c,
	TRACK_VER = 0x4e
}
enum KeyType {
	KEY_AES_128 = 0,
	KEY_NONE = 1,
	KEY_SAMPLE_AES = 2
}
enum PlaylistType {
	PLS_TYPE_EVENT = 0,
	PLS_TYPE_UNSPECIFIED = 1,
	PLS_TYPE_VOD = 2
}
enum HLSFlags {
	HLS_APPEND_LIST = (1 << 6),
	HLS_DELETE_SEGMENTS = (1 << 1),
	HLS_DISCONT_START = (1 << 3),
	HLS_INDEPENDENT_SEGMENTS = (1 << 13),
	HLS_OMIT_ENDLIST = (1 << 4),
	HLS_PERIODIC_REKEY = (1 << 12),
	HLS_PROGRAM_DATE_TIME = (1 << 7),
	HLS_ROUND_DURATIONS = (1 << 2),
	HLS_SECOND_LEVEL_SEGMENT_DURATION = (1 << 9) // include segment duration (microsec) in segment filenames when use_localtime e.g.: %%09t,
	HLS_SECOND_LEVEL_SEGMENT_INDEX = (1 << 8) // include segment index in segment filenames when use_localtime e.g.: %%03d,
	HLS_SECOND_LEVEL_SEGMENT_SIZE = (1 << 10) // include segment size (bytes) in segment filenames when use_localtime e.g.: %%014s,
	HLS_SINGLE_FILE = (1 << 0),
	HLS_SPLIT_BY_TIME = (1 << 5),
	HLS_TEMP_FILE = (1 << 11)
}
enum __anonf0660e390103 {
	HLS_START_SEQUENCE_AS_FORMATTED_DATETIME = 2 // YYYYMMDDhhmmss,
	HLS_START_SEQUENCE_AS_SECONDS_SINCE_EPOCH = 1,
	HLS_START_SEQUENCE_AS_START_NUMBER = 0
}
enum __anonf0660e390203 {
	CODEC_ATTRIBUTE_WILL_NOT_BE_WRITTEN = 0,
	CODEC_ATTRIBUTE_WRITTEN = 0
}
enum __anonf0660e390303 {
	SEGMENT_TYPE_FMP4 = 0,
	SEGMENT_TYPE_MPEGTS = 1
}
enum __anon6247d4fa0103 {
	PLAYLIST_TYPE_EVENT = 0,
	PLAYLIST_TYPE_NB = 1,
	PLAYLIST_TYPE_NONE = 2,
	PLAYLIST_TYPE_VOD = 3
}
enum __anon288464dc0103 {
	FINISH = 0,
	LOWER_PROTO = 1,
	READ_HEADERS = 2,
	WRITE_REPLY_HEADERS = 3
}
enum HTTPAuthType {
	HTTP_AUTH_BASIC = 0,
	HTTP_AUTH_DIGEST = 1,
	HTTP_AUTH_NONE = 0 /**< No authentication specified */
}
enum ID3v2Encoding {
	ID3v2_ENCODING_ISO8859 = 0,
	ID3v2_ENCODING_UTF16BE = 2,
	ID3v2_ENCODING_UTF16BOM = 1,
	ID3v2_ENCODING_UTF8 = 3
}
enum __anon8ce760b10103 {
	COMP_EXP = 0,
	COMP_FIB = 1,
	COMP_NONE = 2
}
enum PatternType {
	PT_DEFAULT = 0,
	PT_GLOB_SEQUENCE = 1,
	PT_GLOB = 2,
	PT_NONE = 3,
	PT_SEQUENCE = 4
}
enum AVWriteUncodedFrameFlags {
	AV_WRITE_UNCODED_FRAME_QUERY = 0x0001
}
enum __anond68915e80103 {
}
enum var_name {
	VAR_H = 0,
	VAR_ORDER = 1,
	VAR_PATTERN = 2,
	VAR_ROW = 3,
	VAR_SPEED = 4,
	VAR_TEMPO = 5,
	VAR_TIME = 6,
	VAR_VARS_NB = 7,
	VAR_W = 8,
	VAR_X = 9,
	VAR_Y = 10
}
enum SRTMode {
	SRT_MODE_CALLER = 0,
	SRT_MODE_LISTENER = 1,
	SRT_MODE_RENDEZVOUS = 2
}
enum __anon8d8d87630103 {
	MATROSKA_TRACK_TYPE_AUDIO = 0x2,
	MATROSKA_TRACK_TYPE_COMPLEX = 0x3,
	MATROSKA_TRACK_TYPE_CONTROL = 0x20,
	MATROSKA_TRACK_TYPE_LOGO = 0x10,
	MATROSKA_TRACK_TYPE_METADATA = 0x21,
	MATROSKA_TRACK_TYPE_NONE = 0x0,
	MATROSKA_TRACK_TYPE_SUBTITLE = 0x11,
	MATROSKA_TRACK_TYPE_VIDEO = 0x1
}
enum __anon8d8d87630203 {
	MATROSKA_TRACK_ENCODING_COMP_BZLIB = 1,
	MATROSKA_TRACK_ENCODING_COMP_HEADERSTRIP = 3,
	MATROSKA_TRACK_ENCODING_COMP_LZO = 2,
	MATROSKA_TRACK_ENCODING_COMP_ZLIB = 0
}
enum __anon8d8d87630303 {
	MATROSKA_VIDEO_INTERLACE_FLAG_INTERLACED = 1,
	MATROSKA_VIDEO_INTERLACE_FLAG_PROGRESSIVE = 2,
	MATROSKA_VIDEO_INTERLACE_FLAG_UNDETERMINED = 0
}
enum __anon8d8d87630403 {
	MATROSKA_VIDEO_FIELDORDER_BB = 6,
	MATROSKA_VIDEO_FIELDORDER_BT = 14,
	MATROSKA_VIDEO_FIELDORDER_PROGRESSIVE = 0,
	MATROSKA_VIDEO_FIELDORDER_TB = 9,
	MATROSKA_VIDEO_FIELDORDER_TT = 1,
	MATROSKA_VIDEO_FIELDORDER_UNDETERMINED = 2
}
enum __anon8d8d87630503 {
	MATROSKA_VIDEO_STEREOMODE_TYPE_ANAGLYPH_CYAN_RED = 10,
	MATROSKA_VIDEO_STEREOMODE_TYPE_ANAGLYPH_GREEN_MAG = 12,
	MATROSKA_VIDEO_STEREOMODE_TYPE_BOTH_EYES_BLOCK_LR = 13,
	MATROSKA_VIDEO_STEREOMODE_TYPE_BOTH_EYES_BLOCK_RL = 14,
	MATROSKA_VIDEO_STEREOMODE_TYPE_BOTTOM_TOP = 2,
	MATROSKA_VIDEO_STEREOMODE_TYPE_CHECKERBOARD_LR = 5,
	MATROSKA_VIDEO_STEREOMODE_TYPE_CHECKERBOARD_RL = 4,
	MATROSKA_VIDEO_STEREOMODE_TYPE_COL_INTERLEAVED_LR = 9,
	MATROSKA_VIDEO_STEREOMODE_TYPE_COL_INTERLEAVED_RL = 8,
	MATROSKA_VIDEO_STEREOMODE_TYPE_LEFT_RIGHT = 1,
	MATROSKA_VIDEO_STEREOMODE_TYPE_MONO = 0,
	MATROSKA_VIDEO_STEREOMODE_TYPE_NB = 11,
	MATROSKA_VIDEO_STEREOMODE_TYPE_RIGHT_LEFT = 11,
	MATROSKA_VIDEO_STEREOMODE_TYPE_ROW_INTERLEAVED_LR = 7,
	MATROSKA_VIDEO_STEREOMODE_TYPE_ROW_INTERLEAVED_RL = 6,
	MATROSKA_VIDEO_STEREOMODE_TYPE_TOP_BOTTOM = 3
}
enum __anon8d8d87630603 {
	MATROSKA_VIDEO_DISPLAYUNIT_CENTIMETERS = 1,
	MATROSKA_VIDEO_DISPLAYUNIT_DAR = 3,
	MATROSKA_VIDEO_DISPLAYUNIT_INCHES = 2,
	MATROSKA_VIDEO_DISPLAYUNIT_PIXELS = 0,
	MATROSKA_VIDEO_DISPLAYUNIT_UNKNOWN = 4
}
enum __anon8d8d87630703 {
	MATROSKA_COLOUR_CHROMASITINGHORZ_HALF = 2,
	MATROSKA_COLOUR_CHROMASITINGHORZ_LEFT = 1,
	MATROSKA_COLOUR_CHROMASITINGHORZ_NB = 2,
	MATROSKA_COLOUR_CHROMASITINGHORZ_UNDETERMINED = 0
}
enum __anon8d8d87630803 {
	MATROSKA_COLOUR_CHROMASITINGVERT_HALF = 2,
	MATROSKA_COLOUR_CHROMASITINGVERT_NB = 1,
	MATROSKA_COLOUR_CHROMASITINGVERT_TOP = 1,
	MATROSKA_COLOUR_CHROMASITINGVERT_UNDETERMINED = 0
}
enum __anon8d8d87630903 {
	MATROSKA_VIDEO_PROJECTION_TYPE_CUBEMAP = 2,
	MATROSKA_VIDEO_PROJECTION_TYPE_EQUIRECTANGULAR = 1,
	MATROSKA_VIDEO_PROJECTION_TYPE_MESH = 3,
	MATROSKA_VIDEO_PROJECTION_TYPE_RECTANGULAR = 0
}
enum __anon0c7ba20a0103 {
	EBML_BIN = 0,
	EBML_FLOAT = 1,
	EBML_LEVEL1 = 2,
	EBML_NEST = 3,
	EBML_NONE = 4,
	EBML_PASS = 5,
	EBML_SINT = 6,
	EBML_STOP = 7,
	EBML_STR = 8,
	EBML_TYPE_COUNT = 9,
	EBML_UINT = 10,
	EBML_UTF8 = 11
}
enum __anon33aed6110103 {
	CHUNK_TYPE_ASF_HEADER = 0x4824,
	CHUNK_TYPE_DATA = 0x4424,
	CHUNK_TYPE_END = 0x4524,
	CHUNK_TYPE_STREAM_CHANGE = 0x4324
}
enum __anon33af091d0103 {
	CS_PKT_INITIAL = 0x01,
	CS_PKT_KEEPALIVE = 0x1b,
	CS_PKT_MEDIA_FILE_REQUEST = 0x05,
	CS_PKT_MEDIA_HEADER_REQUEST = 0x15,
	CS_PKT_PROTOCOL_SELECT = 0x02,
	CS_PKT_START_FROM_PKT_ID = 0x07,
	CS_PKT_STREAM_CLOSE = 0x0d,
	CS_PKT_STREAM_ID_REQUEST = 0x33,
	CS_PKT_STREAM_PAUSE = 0x09,
	CS_PKT_TIMING_DATA_REQUEST = 0x18,
	CS_PKT_USER_PASSWORD = 0x1a
}
enum __anon33af091d0203 {
	SC_PKT_ASF_HEADER = 0x010000// make it bigger than 0xFF in case of,
	SC_PKT_ASF_MEDIA = 0x010001// receiving false data packets.,
	SC_PKT_CANCEL = -1,
	SC_PKT_CLIENT_ACCEPTED = 0x01,
	SC_PKT_HEADER_REQUEST_ACCEPTED = 0x11,
	SC_PKT_KEEPALIVE = 0x1b,
	SC_PKT_MEDIA_FILE_DETAILS = 0x06,
	SC_PKT_MEDIA_PKT_FOLLOWS = 0x05,
	SC_PKT_NO_DATA = -2,
	SC_PKT_PASSWORD_REQUIRED = 0x1a,
	SC_PKT_PROTOCOL_ACCEPTED = 0x02,
	SC_PKT_PROTOCOL_FAILED = 0x03,
	SC_PKT_STREAM_CHANGING = 0x20,
	SC_PKT_STREAM_ID_ACCEPTED = 0x21,
	SC_PKT_STREAM_STOPPED = 0x1e,
	SC_PKT_TIMING_TEST_REPLY = 0x15
}
enum MovChannelLayoutTag {
	MOV_CH_LAYOUT_AAC_6_0 = (141 << 16) | 6,
	MOV_CH_LAYOUT_AAC_6_1 = (142 << 16) | 7,
	MOV_CH_LAYOUT_AAC_7_0 = (143 << 16) | 7,
	MOV_CH_LAYOUT_AAC_OCTAGONAL = (144 << 16) | 8,
	MOV_CH_LAYOUT_AC3_1_0_1 = (149 << 16) | 2,
	MOV_CH_LAYOUT_AC3_2_1_1 = (153 << 16) | 4,
	MOV_CH_LAYOUT_AC3_3_0_1 = (152 << 16) | 4,
	MOV_CH_LAYOUT_AC3_3_0 = (150 << 16) | 3,
	MOV_CH_LAYOUT_AC3_3_1_1 = (154 << 16) | 5,
	MOV_CH_LAYOUT_AC3_3_1 = (151 << 16) | 4,
	MOV_CH_LAYOUT_AMBISONIC_B_FORMAT = (107 << 16) | 4,
	MOV_CH_LAYOUT_AUDIOUNIT_6_0 = (139 << 16) | 6,
	MOV_CH_LAYOUT_AUDIOUNIT_7_0_FRONT = (148 << 16) | 7,
	MOV_CH_LAYOUT_AUDIOUNIT_7_0 = (140 << 16) | 7,
	MOV_CH_LAYOUT_BINAURAL = (106 << 16) | 2,
	MOV_CH_LAYOUT_CUBE = (112 << 16) | 8,
	MOV_CH_LAYOUT_DISCRETEINORDER = (147 << 16) | 0,
	MOV_CH_LAYOUT_DTS_3_1 = (168 << 16) | 4,
	MOV_CH_LAYOUT_DTS_4_1 = (169 << 16) | 5,
	MOV_CH_LAYOUT_DTS_6_0_A = (170 << 16) | 6,
	MOV_CH_LAYOUT_DTS_6_0_B = (171 << 16) | 6,
	MOV_CH_LAYOUT_DTS_6_0_C = (172 << 16) | 6,
	MOV_CH_LAYOUT_DTS_6_1_A = (173 << 16) | 7,
	MOV_CH_LAYOUT_DTS_6_1_B = (174 << 16) | 7,
	MOV_CH_LAYOUT_DTS_6_1_C = (175 << 16) | 7,
	MOV_CH_LAYOUT_DTS_6_1_D = (182 << 16) | 7,
	MOV_CH_LAYOUT_DTS_7_0 = (176 << 16) | 7,
	MOV_CH_LAYOUT_DTS_7_1 = (177 << 16) | 8,
	MOV_CH_LAYOUT_DTS_8_0_A = (178 << 16) | 8,
	MOV_CH_LAYOUT_DTS_8_0_B = (179 << 16) | 8,
	MOV_CH_LAYOUT_DTS_8_1_A = (180 << 16) | 9,
	MOV_CH_LAYOUT_DTS_8_1_B = (181 << 16) | 9,
	MOV_CH_LAYOUT_DVD_10 = (136 << 16) | 4,
	MOV_CH_LAYOUT_DVD_11 = (137 << 16) | 5,
	MOV_CH_LAYOUT_DVD_18 = (138 << 16) | 5,
	MOV_CH_LAYOUT_DVD_4 = (133 << 16) | 3,
	MOV_CH_LAYOUT_DVD_5 = (134 << 16) | 4,
	MOV_CH_LAYOUT_DVD_6 = (135 << 16) | 5,
	MOV_CH_LAYOUT_EAC3_6_0_A = (155 << 16) | 6,
	MOV_CH_LAYOUT_EAC3_6_1_A = (157 << 16) | 7,
	MOV_CH_LAYOUT_EAC3_6_1_B = (158 << 16) | 7,
	MOV_CH_LAYOUT_EAC3_6_1_C = (159 << 16) | 7,
	MOV_CH_LAYOUT_EAC3_7_0_A = (156 << 16) | 7,
	MOV_CH_LAYOUT_EAC3_7_1_A = (160 << 16) | 8,
	MOV_CH_LAYOUT_EAC3_7_1_B = (161 << 16) | 8,
	MOV_CH_LAYOUT_EAC3_7_1_C = (162 << 16) | 8,
	MOV_CH_LAYOUT_EAC3_7_1_D = (163 << 16) | 8,
	MOV_CH_LAYOUT_EAC3_7_1_E = (164 << 16) | 8,
	MOV_CH_LAYOUT_EAC3_7_1_F = (165 << 16) | 8,
	MOV_CH_LAYOUT_EAC3_7_1_G = (166 << 16) | 8,
	MOV_CH_LAYOUT_EAC3_7_1_H = (167 << 16) | 8,
	MOV_CH_LAYOUT_EMAGIC_DEFAULT_7_1 = (129 << 16) | 8,
	MOV_CH_LAYOUT_HEXAGONAL = (110 << 16) | 6,
	MOV_CH_LAYOUT_ITU_2_1 = (131 << 16) | 3,
	MOV_CH_LAYOUT_ITU_2_2 = (132 << 16) | 4,
	MOV_CH_LAYOUT_MATRIXSTEREO = (103 << 16) | 2,
	MOV_CH_LAYOUT_MIDSIDE = (104 << 16) | 2,
	MOV_CH_LAYOUT_MONO = (100 << 16) | 1,
	MOV_CH_LAYOUT_MPEG_3_0_A = (113 << 16) | 3,
	MOV_CH_LAYOUT_MPEG_3_0_B = (114 << 16) | 3,
	MOV_CH_LAYOUT_MPEG_4_0_A = (115 << 16) | 4,
	MOV_CH_LAYOUT_MPEG_4_0_B = (116 << 16) | 4,
	MOV_CH_LAYOUT_MPEG_5_0_A = (117 << 16) | 5,
	MOV_CH_LAYOUT_MPEG_5_0_B = (118 << 16) | 5,
	MOV_CH_LAYOUT_MPEG_5_0_C = (119 << 16) | 5,
	MOV_CH_LAYOUT_MPEG_5_0_D = (120 << 16) | 5,
	MOV_CH_LAYOUT_MPEG_5_1_A = (121 << 16) | 6,
	MOV_CH_LAYOUT_MPEG_5_1_B = (122 << 16) | 6,
	MOV_CH_LAYOUT_MPEG_5_1_C = (123 << 16) | 6,
	MOV_CH_LAYOUT_MPEG_5_1_D = (124 << 16) | 6,
	MOV_CH_LAYOUT_MPEG_6_1_A = (125 << 16) | 7,
	MOV_CH_LAYOUT_MPEG_7_1_A = (126 << 16) | 8,
	MOV_CH_LAYOUT_MPEG_7_1_B = (127 << 16) | 8,
	MOV_CH_LAYOUT_MPEG_7_1_C = (128 << 16) | 8,
	MOV_CH_LAYOUT_OCTAGONAL = (111 << 16) | 8,
	MOV_CH_LAYOUT_PENTAGONAL = (109 << 16) | 5,
	MOV_CH_LAYOUT_QUADRAPHONIC = (108 << 16) | 4,
	MOV_CH_LAYOUT_SMPTE_DTV = (130 << 16) | 8,
	MOV_CH_LAYOUT_STEREOHEADPHONES = (102 << 16) | 2,
	MOV_CH_LAYOUT_STEREO = (101 << 16) | 2,
	MOV_CH_LAYOUT_TMH_10_2_FULL = (146 << 16) | 21,
	MOV_CH_LAYOUT_TMH_10_2_STD = (145 << 16) | 16,
	MOV_CH_LAYOUT_USE_BITMAP = ( 1 << 16) | 0,
	MOV_CH_LAYOUT_USE_DESCRIPTIONS = ( 0 << 16) | 0,
	MOV_CH_LAYOUT_XY = (105 << 16) | 2
}
enum mov_ch_layouts_aac {
	MOV_CH_LAYOUT_AAC_6_0 = 0,
	MOV_CH_LAYOUT_AAC_6_1 = 1,
	MOV_CH_LAYOUT_AAC_7_0 = 2,
	MOV_CH_LAYOUT_AAC_OCTAGONAL = 3,
	MOV_CH_LAYOUT_AC3_1_0_1 = 4,
	MOV_CH_LAYOUT_AC3_2_1_1 = 5,
	MOV_CH_LAYOUT_DTS_3_1 = 6,
	MOV_CH_LAYOUT_DTS_4_1 = 7,
	MOV_CH_LAYOUT_DTS_6_0_A = 8,
	MOV_CH_LAYOUT_DTS_6_1_A = 9,
	MOV_CH_LAYOUT_DTS_8_0_A = 10,
	MOV_CH_LAYOUT_DVD_18 = 11,
	MOV_CH_LAYOUT_DVD_4 = 12,
	MOV_CH_LAYOUT_ITU_2_1 = 13,
	MOV_CH_LAYOUT_ITU_2_2 = 14,
	MOV_CH_LAYOUT_MONO = 15,
	MOV_CH_LAYOUT_MPEG_3_0_B = 16,
	MOV_CH_LAYOUT_MPEG_4_0_B = 17,
	MOV_CH_LAYOUT_MPEG_5_0_D = 18,
	MOV_CH_LAYOUT_MPEG_5_1_D = 19,
	MOV_CH_LAYOUT_MPEG_7_1_B = 20,
	MOV_CH_LAYOUT_QUADRAPHONIC = 21,
	MOV_CH_LAYOUT_STEREO = 22
}
enum mov_ch_layouts_ac3 {
	MOV_CH_LAYOUT_AC3_1_0_1 = 0,
	MOV_CH_LAYOUT_AC3_2_1_1 = 1,
	MOV_CH_LAYOUT_AC3_3_0_1 = 2,
	MOV_CH_LAYOUT_AC3_3_0 = 3,
	MOV_CH_LAYOUT_AC3_3_1_1 = 4,
	MOV_CH_LAYOUT_AC3_3_1 = 5,
	MOV_CH_LAYOUT_DVD_18 = 6,
	MOV_CH_LAYOUT_DVD_4 = 7,
	MOV_CH_LAYOUT_ITU_2_1 = 8,
	MOV_CH_LAYOUT_ITU_2_2 = 9,
	MOV_CH_LAYOUT_MONO = 10,
	MOV_CH_LAYOUT_MPEG_5_0_C = 11,
	MOV_CH_LAYOUT_MPEG_5_1_C = 12,
	MOV_CH_LAYOUT_STEREO = 13
}
enum mov_ch_layouts_alac {
	MOV_CH_LAYOUT_AAC_6_1 = 0,
	MOV_CH_LAYOUT_MONO = 1,
	MOV_CH_LAYOUT_MPEG_3_0_B = 2,
	MOV_CH_LAYOUT_MPEG_4_0_B = 3,
	MOV_CH_LAYOUT_MPEG_5_0_D = 4,
	MOV_CH_LAYOUT_MPEG_5_1_D = 5,
	MOV_CH_LAYOUT_MPEG_7_1_B = 6,
	MOV_CH_LAYOUT_STEREO = 7
}
enum mov_ch_layouts_wav {
	MOV_CH_LAYOUT_MATRIXSTEREO = 0,
	MOV_CH_LAYOUT_MONO = 1,
	MOV_CH_LAYOUT_MPEG_3_0_A = 2,
	MOV_CH_LAYOUT_MPEG_5_0_A = 3,
	MOV_CH_LAYOUT_MPEG_5_1_A = 4,
	MOV_CH_LAYOUT_MPEG_6_1_A = 5,
	MOV_CH_LAYOUT_MPEG_7_1_A = 6,
	MOV_CH_LAYOUT_MPEG_7_1_C = 7,
	MOV_CH_LAYOUT_QUADRAPHONIC = 8,
	MOV_CH_LAYOUT_SMPTE_DTV = 9,
	MOV_CH_LAYOUT_STEREO = 10
}
enum __anon7b9d66c90203 {
	MOV_ENC_CENC_AES_CTR = 0,
	MOV_ENC_NONE = 0
}
enum __anon7b9d66c90303 {
	MOV_PRFT_NB = 0,
	MOV_PRFT_NONE = 0,
	MOV_PRFT_SRC_PTS = 2,
	MOV_PRFT_SRC_WALLCLOCK = 3
}
enum CheckRet {
	CHECK_SEEK_FAILED = -2,
	CHECK_WRONG_HEADER = -1
}
enum MPCPacketTags {
	TAG_AUDIOPACKET = MKMPCTAG('A''P'),
	TAG_ENCINFO = MKMPCTAG('E''I'),
	TAG_REPLAYGAIN = MKMPCTAG('R''G'),
	TAG_SEEKTABLE = MKMPCTAG('S''T'),
	TAG_SEEKTBLOFF = MKMPCTAG('S''O'),
	TAG_STREAMEND = MKMPCTAG('S''E'),
	TAG_STREAMHDR = MKMPCTAG('S''H')
}
enum MpegTSFilterType {
	MPEGTS_PCR = 0,
	MPEGTS_PES = 1,
	MPEGTS_SECTION = 2
}
enum MpegTSState {
	MPEGTS_HEADER = 0,
	MPEGTS_PAYLOAD = 1,
	MPEGTS_PESHEADER_FILL = 2,
	MPEGTS_PESHEADER = 3,
	MPEGTS_SKIP = 4
}
enum __anon023cc8020103 {
	MPEGTS_SERVICE_TYPE_ADVANCED_CODEC_DIGITAL_HDTV = 0x19,
	MPEGTS_SERVICE_TYPE_ADVANCED_CODEC_DIGITAL_RADIO = 0x0A,
	MPEGTS_SERVICE_TYPE_ADVANCED_CODEC_DIGITAL_SDTV = 0x16,
	MPEGTS_SERVICE_TYPE_DIGITAL_RADIO = 0x02,
	MPEGTS_SERVICE_TYPE_DIGITAL_TV = 0x01,
	MPEGTS_SERVICE_TYPE_HEVC_DIGITAL_HDTV = 0x1F,
	MPEGTS_SERVICE_TYPE_MPEG2_DIGITAL_HDTV = 0x11,
	MPEGTS_SERVICE_TYPE_TELETEXT = 0x03
}
enum MXFFrameLayout {
	FullFrame = 0,
	MixedFields = 1,
	OneField = 2,
	SegmentedFrame = 3,
	SeparateFields = 4
}
enum MXFMetadataSetType {
	AnyType = 0,
	ContentStorage = 1,
	CryptoContext = 2,
	Descriptor = 3,
	EssenceContainerData = 4,
	EssenceGroup = 5,
	Identification = 6,
	IndexTableSegment = 7,
	MaterialPackage = 8,
	MultipleDescriptor = 9,
	Preface = 10,
	PulldownComponent = 11,
	Sequence = 12,
	SourceClip = 13,
	SourcePackage = 14,
	SubDescriptor = 15,
	TaggedValue = 16,
	TapeDescriptor = 17,
	TimecodeComponent = 18,
	Track = 19
}
enum __anon8d39a18c0103 {
	D10D11Wrap = 0,
	NormalWrap = 0,
	RawAWrap = 2,
	RawVWrap = 3
}
enum __anon0afff7930103 {
	BodyPartition = 0,
	Footer = 1,
	Header = 2
}
enum __anon0afff7930203 {
	OP1a = 1,
	OP1b = 1,
	OP1c = 2,
	OP2a = 3,
	OP2b = 4,
	OP2c = 5,
	OP3a = 6,
	OP3b = 7,
	OP3c = 8,
	OPAtom = 9,
	OPSONYOpt = 10
}
enum __anon0afff7930303 {
	ClipWrapped = 0,
	FrameWrapped = 1,
	UnknownWrapped = 0
}
enum ULIndex {
	INDEX_AES3 = 0,
	INDEX_D10_525_60_30_AUDIO = 1,
	INDEX_D10_525_60_30_VIDEO = 2,
	INDEX_D10_525_60_40_AUDIO = 3,
	INDEX_D10_525_60_40_VIDEO = 4,
	INDEX_D10_525_60_50_AUDIO = 5,
	INDEX_D10_525_60_50_VIDEO = 6,
	INDEX_D10_625_50_30_AUDIO = 7,
	INDEX_D10_625_50_30_VIDEO = 8,
	INDEX_D10_625_50_40_AUDIO = 9,
	INDEX_D10_625_50_40_VIDEO = 10,
	INDEX_D10_625_50_50_AUDIO = 11,
	INDEX_D10_625_50_50_VIDEO = 12,
	INDEX_DNXHD = 13,
	INDEX_DV100_1080_50 = 14,
	INDEX_DV100_1080_60 = 15,
	INDEX_DV100_720_50 = 16,
	INDEX_DV100_720_60 = 17,
	INDEX_DV25_525_60_IEC = 18,
	INDEX_DV25_525_60 = 19,
	INDEX_DV25_625_50_IEC = 20,
	INDEX_DV25_625_50 = 21,
	INDEX_DV50_525_60 = 22,
	INDEX_DV50_625_50 = 23,
	INDEX_DV = 24,
	INDEX_H264 = 25,
	INDEX_JPEG2000 = 26,
	INDEX_MPEG2 = 0,
	INDEX_PRORES = 28,
	INDEX_S436M = 29,
	INDEX_WAV = 30
}
enum NSVStatus {
	NSV_FOUND_BEEF = 0,
	NSV_FOUND_NSVF = 1,
	NSV_FOUND_NSVS = 2,
	NSV_GOT_AUDIO = 3,
	NSV_GOT_VIDEO = 4,
	NSV_HAS_READ_NSVF = 5,
	NSV_HAS_READ_NSVS = 6,
	NSV_UNSYNC = 7
}
enum __anon8d4a50780103 {
	FLAG_CHECKSUM = 64 // if set the frame header contains a checksum,
	FLAG_CODED_PTS = 8 // if set coded_pts is in the frame header,
	FLAG_CODED = 4096 // if set coded_flags are stored in the frame header,
	FLAG_EOR = 2 // if set stream has no relevance on presentation. (EOR),
	FLAG_HEADER_IDX = 1024 // If set header_idx is coded in the frame header.,
	FLAG_INVALID = 8192 // if set frame_code is invalid,
	FLAG_KEY = 1 // if set frame is keyframe,
	FLAG_MATCH_TIME = 2048 // If set match_time_delta is coded in the frame header,
	FLAG_RESERVED = 128 // if set reserved_count is coded in the frame header,
	FLAG_SIZE_MSB = 32 // if set data_size_msb is at frame header otherwise data_size_msb is 0,
	FLAG_SM_DATA = 256 // if set side / meta data is stored in the frame header.,
	FLAG_STREAM_ID = 16 // if set stream_id is coded in the frame header
}
enum __anon8d4a58f50103 {
	NUV_AUDIO = 'A',
	NUV_EXTRADATA = 'D',
	NUV_MYTHEXT = 'X',
	NUV_SEEKP = 'R',
	NUV_VIDEO = 'V'
}
enum __anon8d57b51e0103 {
	OMA_CODECID_ATRAC3AL = 34,
	OMA_CODECID_ATRAC3PAL = 33,
	OMA_CODECID_ATRAC3P = 1,
	OMA_CODECID_ATRAC3 = 0,
	OMA_CODECID_LPCM = 4,
	OMA_CODECID_MP3 = 3,
	OMA_CODECID_WMA = 5
}
enum RTMPChannel {
	RTMP_AUDIO_CHANNEL = 0,
	RTMP_NETWORK_CHANNEL = 2 ///< channel for network-related messages (bandwidth report ping etc),
	RTMP_SOURCE_CHANNEL = 8 ///< channel for a/v invokes,
	RTMP_SYSTEM_CHANNEL = 3,
	RTMP_VIDEO_CHANNEL = 6 ///< channel for video data
}
enum RTMPPacketSize {
	RTMP_PS_EIGHTBYTES = 0,
	RTMP_PS_FOURBYTES = 1,
	RTMP_PS_ONEBYTE = 2,
	RTMP_PS_TWELVEBYTES = 0 ///< packet has 12-byte header
}
enum RTMPPacketType {
	RTMP_PT_AUDIO = 8 ///< audio packet,
	RTMP_PT_BYTES_READ = 3 ///< number of bytes read,
	RTMP_PT_CHUNK_SIZE = 1 ///< chunk size change,
	RTMP_PT_FLEX_MESSAGE = 3,
	RTMP_PT_FLEX_OBJECT = 4,
	RTMP_PT_FLEX_STREAM = 15 ///< Flex shared stream,
	RTMP_PT_INVOKE = 6,
	RTMP_PT_METADATA = 22 ///< FLV metadata,
	RTMP_PT_NOTIFY = 8,
	RTMP_PT_SET_PEER_BW = 9,
	RTMP_PT_SHARED_OBJ = 10,
	RTMP_PT_USER_CONTROL = 11,
	RTMP_PT_VIDEO = 12,
	RTMP_PT_WINDOW_ACK_SIZE = 13
}
enum __anon69e4f1730103 {
	STATE_FCPUBLISH = 0,
	STATE_HANDSHAKED = 1,
	STATE_PLAYING = 2,
	STATE_PUBLISHING = 3,
	STATE_RECEIVING = 4,
	STATE_SEEKING = 5,
	STATE_SENDING = 6,
	STATE_START = 7,
	STATE_STOPPED = 8
}
enum RTCPType {
	RTCP_APP = 0,
	RTCP_AVB = 1,
	RTCP_BYE = 2,
	RTCP_FIR = 192,
	RTCP_IJ = 4,
	RTCP_NACK = 5,
	RTCP_PSFB = 6,
	RTCP_RR = 7,
	RTCP_RSI = 8,
	RTCP_RTPFB = 9,
	RTCP_SDES = 10,
	RTCP_SMPTETC = 11,
	RTCP_SR = 200,
	RTCP_TOKEN = 13,
	RTCP_XR = 14
}
enum RTSPClientState {
	RTSP_STATE_IDLE = 0,
	RTSP_STATE_PAUSED = 1,
	RTSP_STATE_SEEKING = 2,
	RTSP_STATE_STREAMING = 3
}
enum RTSPControlTransport {
	RTSP_MODE_PLAIN = 0,
	RTSP_MODE_TUNNEL = 1
}
enum RTSPLowerTransport {
	RTSP_LOWER_TRANSPORT_CUSTOM = 16 /**< Custom IO - not a public,
	RTSP_LOWER_TRANSPORT_HTTP = 8 /**< HTTP tunneled - not a proper,
	RTSP_LOWER_TRANSPORT_NB = 2,
	RTSP_LOWER_TRANSPORT_TCP = 1 /**< TCP interleaved in RTSP */,
	RTSP_LOWER_TRANSPORT_UDP_MULTICAST = 2 /**< UDP/multicast */,
	RTSP_LOWER_TRANSPORT_UDP = 0 /**< UDP/unicast */
}
enum RTSPServerType {
	RTSP_SERVER_NB = 0,
	RTSP_SERVER_REAL = 1,
	RTSP_SERVER_RTP = 2,
	RTSP_SERVER_WMS = 3
}
enum RTSPTransport {
	RTSP_TRANSPORT_NB = 0,
	RTSP_TRANSPORT_RAW = 1,
	RTSP_TRANSPORT_RDT = 2,
	RTSP_TRANSPORT_RTP = 3
}
enum RTSPMethod {
	ANNOUNCE = 0,
	DESCRIBE = 1,
	GET_PARAMETER = 2,
	OPTIONS = 3,
	PAUSE = 4,
	PLAY = 5,
	RECORD = 6,
	REDIRECT = 7,
	SETUP = 8,
	SET_PARAMETER = 9,
	TEARDOWN = 10,
	UNKNOWN = -1
}
enum RTSPStatusCode {
	RTSP_STATUS_AGGREGATE = 459,
	RTSP_STATUS_BAD_GATEWAY = 502,
	RTSP_STATUS_BAD_REQUEST = 400,
	RTSP_STATUS_BANDWIDTH = 453,
	RTSP_STATUS_CONFERENCE_NOT_FOUND = 452,
	RTSP_STATUS_CONTINUE = 100,
	RTSP_STATUS_CREATED = 201,
	RTSP_STATUS_FORBIDDEN = 403,
	RTSP_STATUS_GATEWAY_TIME_OUT = 504,
	RTSP_STATUS_GONE = 410,
	RTSP_STATUS_INTERNAL = 500,
	RTSP_STATUS_INVALID_HEADER_FIELD = 456,
	RTSP_STATUS_INVALID_RANGE = 457,
	RTSP_STATUS_LENGTH_REQUIRED = 411,
	RTSP_STATUS_LOW_ON_STORAGE_SPACE = 250,
	RTSP_STATUS_METHOD = 405,
	RTSP_STATUS_MOVED_PERMANENTLY = 301,
	RTSP_STATUS_MOVED_TEMPORARILY = 302,
	RTSP_STATUS_MULTIPLE_CHOICES = 300,
	RTSP_STATUS_NOT_ACCEPTABLE = 406,
	RTSP_STATUS_NOT_FOUND = 404,
	RTSP_STATUS_NOT_IMPLEMENTED = 501,
	RTSP_STATUS_NOT_MODIFIED = 304,
	RTSP_STATUS_OK = 200,
	RTSP_STATUS_ONLY_AGGREGATE = 460,
	RTSP_STATUS_PARAM_NOT_UNDERSTOOD = 451,
	RTSP_STATUS_PAYMENT_REQUIRED = 402,
	RTSP_STATUS_PRECONDITION_FAILED = 412,
	RTSP_STATUS_PROXY_AUTH_REQUIRED = 407,
	RTSP_STATUS_REQ_ENTITY_2LARGE = 413,
	RTSP_STATUS_REQ_TIME_OUT = 408,
	RTSP_STATUS_REQ_URI_2LARGE = 414,
	RTSP_STATUS_RONLY_PARAMETER = 458,
	RTSP_STATUS_SEE_OTHER = 303,
	RTSP_STATUS_SERVICE = 503,
	RTSP_STATUS_SESSION = 454,
	RTSP_STATUS_STATE = 455,
	RTSP_STATUS_TRANSPORT = 461,
	RTSP_STATUS_UNAUTHORIZED = 401,
	RTSP_STATUS_UNREACHABLE = 462,
	RTSP_STATUS_UNSUPPORTED_MTYPE = 415,
	RTSP_STATUS_UNSUPPORTED_OPTION = 551,
	RTSP_STATUS_USE_PROXY = 305,
	RTSP_STATUS_VERSION = 505
}
enum sbg_fade_type {
	SBG_FADE_ADAPT = 3,
	SBG_FADE_SAME = 1,
	SBG_FADE_SILENCE = 0
}
enum sbg_synth_type {
	SBG_TYPE_BELL = 0,
	SBG_TYPE_MIX = 1,
	SBG_TYPE_NOISE = 2,
	SBG_TYPE_NONE = 3,
	SBG_TYPE_SINE = 4,
	SBG_TYPE_SPIN = 5
}
enum ws_interval_type {
	WS_NOISE = MKTAG('N''O''I''S'),
	WS_SINE = MKTAG('S''I''N''E')
}
enum __anonff06992f0103 {
	LIST_TYPE_CSV = 0,
	LIST_TYPE_EXT = 1,
	LIST_TYPE_FFCONCAT = 2,
	LIST_TYPE_FLAT = 0,
	LIST_TYPE_M3U8 = 4,
	LIST_TYPE_NB = 5,
	LIST_TYPE_UNDEFINED = -1
}
enum type_priority_list {
}
enum SIFFTags {
	TAG_BODY = MKTAG('B' 'O' 'D' 'Y'),
	TAG_SHDR = MKTAG('S' 'H' 'D' 'R'),
	TAG_SIFF = MKTAG('S' 'I' 'F' 'F'),
	TAG_SOUN = MKTAG('S' 'O' 'U' 'N'),
	TAG_VBHD = MKTAG('V' 'B' 'H' 'D'),
	TAG_VBV1 = MKTAG('V' 'B' 'V' '1')
}
enum VBFlags {
	VB_HAS_AUDIO = 0x04,
	VB_HAS_GMC = 0x01,
	VB_HAS_LENGTH = 0x20,
	VB_HAS_PALETTE = 0x10,
	VB_HAS_VIDEO = 0x08
}
enum SAudFlags {
	SMK_AUD_16BITS = 0x20,
	SMK_AUD_BINKAUD = 0x08,
	SMK_AUD_PACKED = 0x80,
	SMK_AUD_STEREO = 0x10,
	SMK_AUD_USEDCT = 0x04
}
enum IEC61937DataType {
	IEC61937_AC3 = 0x01 ///< AC-3 data,
	IEC61937_ATRAC3 = 0x0F ///< ATRAC3 data,
	IEC61937_ATRACX = 0x10 ///< ATRAC3+ data,
	IEC61937_ATRAC = 0x0E ///< ATRAC data,
	IEC61937_DTS1 = 0x0B ///< DTS type I (512 samples),
	IEC61937_DTS2 = 0x0C ///< DTS type II (1024 samples),
	IEC61937_DTS3 = 0x0D ///< DTS type III (2048 samples),
	IEC61937_DTSHD = 0x11 ///< DTS HD data,
	IEC61937_EAC3 = 0x15 ///< E-AC-3 data,
	IEC61937_MPEG1_LAYER1 = 0x04 ///< MPEG-1 layer 1,
	IEC61937_MPEG1_LAYER23 = 0x05 ///< MPEG-1 layer 2 or 3 data or MPEG-2 without extension,
	IEC61937_MPEG2_AAC_LSF_2048 = 0x13 ///< MPEG-2 AAC ADTS half-rate low sampling frequency,
	IEC61937_MPEG2_AAC_LSF_4096 = 0x13 | 0x20 ///< MPEG-2 AAC ADTS quarter-rate low sampling frequency,
	IEC61937_MPEG2_AAC = 0x07 ///< MPEG-2 AAC ADTS,
	IEC61937_MPEG2_EXT = 0x06 ///< MPEG-2 data with extension,
	IEC61937_MPEG2_LAYER1_LSF = 0x08 ///< MPEG-2 layer-1 low sampling frequency,
	IEC61937_MPEG2_LAYER2_LSF = 0x09 ///< MPEG-2 layer-2 low sampling frequency,
	IEC61937_MPEG2_LAYER3_LSF = 0x0A ///< MPEG-2 layer-3 low sampling frequency,
	IEC61937_TRUEHD = 0x16 ///< TrueHD data,
	IEC61937_WMAPRO = 0x12 ///< WMA 9 Professional data
}
enum mpeg_data_type {
}
enum ff_utf_type {
	FF_UTF16BE = 0,
	FF_UTF16LE = 1,
	FF_UTF_8 = 2
}
enum sub_sort {
	SUB_SORT_POS_TS = 0,
	SUB_SORT_TS_POS = 0 ///< sort by timestamps then position
}
enum __anon8da5a8310103 {
	TAG_CSMTEXTSETTINGS = 74,
	TAG_DEFINEBINARYDATA = 87,
	TAG_DEFINEBITSJPEG3 = 35,
	TAG_DEFINEBITSJPEG4 = 90,
	TAG_DEFINEBITSLOSSLESS2 = 36,
	TAG_DEFINEBITSLOSSLESS = 20,
	TAG_DEFINEBITS = 6,
	TAG_DEFINEBUTTON2 = 34,
	TAG_DEFINEBUTTONCXFORM = 23,
	TAG_DEFINEBUTTONSOUND = 17,
	TAG_DEFINEBUTTON = 7,
	TAG_DEFINEEDITTEXT = 37,
	TAG_DEFINEFONT2 = 48,
	TAG_DEFINEFONT3 = 75,
	TAG_DEFINEFONT4 = 91,
	TAG_DEFINEFONTALIGNZONES = 73,
	TAG_DEFINEFONTINFO2 = 62,
	TAG_DEFINEFONTINFO = 13,
	TAG_DEFINEFONTNAME = 88,
	TAG_DEFINEFONT = 10,
	TAG_DEFINEMORPHSHAPE2 = 84,
	TAG_DEFINEMORPHSHAPE = 46,
	TAG_DEFINESCALINGGRID = 78,
	TAG_DEFINESCENEANDFRAMELABELDATA = 86,
	TAG_DEFINESHAPE2 = 22,
	TAG_DEFINESHAPE3 = 32,
	TAG_DEFINESHAPE4 = 83,
	TAG_DEFINESHAPE = 2,
	TAG_DEFINESOUND = 14,
	TAG_DEFINESPRITE = 39,
	TAG_DEFINETEXT2 = 33,
	TAG_DEFINETEXT = 11,
	TAG_DOABC = 82,
	TAG_DOACTION = 12,
	TAG_DOINITACTION = 59,
	TAG_ENABLEDEBUGGER2 = 64,
	TAG_ENABLEDEBUGGER = 58,
	TAG_END = 0,
	TAG_EXPORTASSETS = 56,
	TAG_FILEATTRIBUTES = 69,
	TAG_FRAMELABEL = 43,
	TAG_FREECHARACTER = 3,
	TAG_IMPORTASSETS2 = 71,
	TAG_IMPORTASSETS = 57,
	TAG_JPEG2 = 21,
	TAG_JPEGTABLES = 8,
	TAG_METADATA = 77,
	TAG_PLACEOBJECT2 = 26,
	TAG_PLACEOBJECT3 = 70,
	TAG_PLACEOBJECT = 4,
	TAG_PROTECT = 24,
	TAG_REMOVEOBJECT2 = 28,
	TAG_REMOVEOBJECT = 5,
	TAG_SCRIPTLIMITS = 65,
	TAG_SETBACKGROUNDCOLOR = 9,
	TAG_SETTABINDEX = 66,
	TAG_SHOWFRAME = 1,
	TAG_STARTSOUND2 = 89,
	TAG_STARTSOUND = 15,
	TAG_STREAMBLOCK = 19,
	TAG_STREAMHEAD2 = 45,
	TAG_STREAMHEAD = 18,
	TAG_SYMBOLCLASS = 76,
	TAG_VIDEOFRAME = 61,
	TAG_VIDEOSTREAM = 60
}
enum __anon8daddd9a0103 {
	ON_SLAVE_FAILURE_ABORT = 1,
	ON_SLAVE_FAILURE_IGNORE = 2
}
enum __anon8db288f30103 {
	TMV_PADDING = 0x01,
	TMV_STEREO = 0x02
}
enum __anonc63be0890103 {
	TIVO_TYPE_DTIVO = 0,
	TIVO_TYPE_SA = 1,
	TIVO_TYPE_UNKNOWN = 2
}
enum __anonc63be0890203 {
	TIVO_SERIES1 = 0,
	TIVO_SERIES2 = 1,
	TIVO_SERIES_UNKNOWN = 2
}
enum __anonc63be0890303 {
	TIVO_AUDIO_AC3 = 0,
	TIVO_AUDIO_MPEG = 1,
	TIVO_AUDIO_UNKNOWN = 2
}
enum voc_type {
	VOC_TYPE_ASCII = 0x05,
	VOC_TYPE_EOF = 0x00,
	VOC_TYPE_EXTENDED = 0x08,
	VOC_TYPE_MARKER = 0x04,
	VOC_TYPE_NEW_VOICE_DATA = 0x09,
	VOC_TYPE_REPETITION_END = 0x07,
	VOC_TYPE_REPETITION_START = 0x06,
	VOC_TYPE_SILENCE = 0x03,
	VOC_TYPE_VOICE_DATA_CONT = 0x02,
	VOC_TYPE_VOICE_DATA = 0x01
}
enum VPX_CHROMA_SUBSAMPLING {
	VPX_SUBSAMPLING_420_COLLOCATED_WITH_LUMA = 1,
	VPX_SUBSAMPLING_420_VERTICAL = 0,
	VPX_SUBSAMPLING_422 = 2,
	VPX_SUBSAMPLING_444 = 3
}
enum __anon808065000103 {
	PEAK_OFF = 0,
	PEAK_ONLY = 1,
	PEAK_ON = 2
}
enum __anon808065000203 {
	PEAK_FORMAT_UINT16 = 0,
	PEAK_FORMAT_UINT8 = 1
}
enum __anon4f8919dd0103 {
}
enum __anon36fbdf690103 {
	SEEK_TO_DATA = 0,
	SEEK_TO_PTS = 1
}
enum WtvFileIndex {
	WTV_FILES = 0,
	WTV_TABLE_0_ENTRIES_LEGACY_ATTRIB = 1,
	WTV_TABLE_0_ENTRIES_TIME = 2,
	WTV_TABLE_0_HEADER_LEGACY_ATTRIB = 3,
	WTV_TABLE_0_HEADER_TIME = 4,
	WTV_TABLE_0_REDIRECTOR_LEGACY_ATTRIB = 5,
	WTV_TIMELINE_TABLE_0_ENTRIES_EVENTS = 6,
	WTV_TIMELINE_TABLE_0_HEADER_EVENTS = 0,
	WTV_TIMELINE = 8
}
enum WV_FLAGS {
	WV_CROSSD = 0x0020,
	WV_DSD = 0x80000000,
	WV_FLOAT = 0x0080,
	WV_HBAL = 0x0400,
	WV_HBR = 0x0200,
	WV_HSHAPE = 0x0040,
	WV_HYBRID = 0x0008,
	WV_INT32 = 0x0100,
	WV_JOINT = 0x0010,
	WV_MCEND = 0x1000,
	WV_MCINIT = 0x0800,
	WV_MONO = 0x0004
}
enum ConvFuncType {
	CONV_FUNC_TYPE_DEINTERLEAVE = 0,
	CONV_FUNC_TYPE_FLAT = 1,
	CONV_FUNC_TYPE_INTERLEAVE = 2
}
enum AVMixCoeffType {
	AV_MIX_COEFF_TYPE_FLT = 0,
	AV_MIX_COEFF_TYPE_NB = 1,
	AV_MIX_COEFF_TYPE_Q15 = 2,
	AV_MIX_COEFF_TYPE_Q8 = 3
}
enum AVResampleDitherMethod {
	AV_RESAMPLE_DITHER_NB = 0,
	AV_RESAMPLE_DITHER_NONE = 1,
	AV_RESAMPLE_DITHER_RECTANGULAR = 2,
	AV_RESAMPLE_DITHER_TRIANGULAR_HP = 3,
	AV_RESAMPLE_DITHER_TRIANGULAR_NS = 4,
	AV_RESAMPLE_DITHER_TRIANGULAR = 5
}
enum AVResampleFilterType {
	AV_RESAMPLE_FILTER_TYPE_BLACKMAN_NUTTALL = 0,
	AV_RESAMPLE_FILTER_TYPE_CUBIC = 1,
	AV_RESAMPLE_FILTER_TYPE_KAISER = 2
}
enum RemapPoint {
	REMAP_IN_CONVERT = 0,
	REMAP_IN_COPY = 1,
	REMAP_NONE = 2,
	REMAP_OUT_CONVERT = 3,
	REMAP_OUT_COPY = 4
}
enum formats {
	AV_SAMPLE_FMT_DBLP = 0,
	AV_SAMPLE_FMT_DBL = 1,
	AV_SAMPLE_FMT_FLTP = 2,
	AV_SAMPLE_FMT_FLT = 3,
	AV_SAMPLE_FMT_S16P = 4,
	AV_SAMPLE_FMT_S16 = 5,
	AV_SAMPLE_FMT_S32P = 6,
	AV_SAMPLE_FMT_S32 = 7,
	AV_SAMPLE_FMT_U8P = 8,
	AV_SAMPLE_FMT_U8 = 9
}
enum AVEscapeMode {
	AV_ESCAPE_MODE_AUTO = 0,
	AV_ESCAPE_MODE_BACKSLASH = 1,
	AV_ESCAPE_MODE_QUOTE = 2
}
enum AVMediaType {
	AVMEDIA_TYPE_ATTACHMENT = 0,
	AVMEDIA_TYPE_AUDIO = 1,
	AVMEDIA_TYPE_DATA = 2,
	AVMEDIA_TYPE_NB = 3,
	AVMEDIA_TYPE_SUBTITLE = 4,
	AVMEDIA_TYPE_UNKNOWN = -1 ///< Usually treated as AVMEDIA_TYPE_DATA,
	AVMEDIA_TYPE_VIDEO = 6
}
enum AVPictureType {
	AV_PICTURE_TYPE_BI = 0,
	AV_PICTURE_TYPE_B = 1,
	AV_PICTURE_TYPE_I = 2,
	AV_PICTURE_TYPE_NONE = 0 ///< Undefined,
	AV_PICTURE_TYPE_P = 4,
	AV_PICTURE_TYPE_SI = 5,
	AV_PICTURE_TYPE_SP = 6,
	AV_PICTURE_TYPE_S = 7
}
enum AVMatrixEncoding {
	AV_MATRIX_ENCODING_DOLBYEX = 0,
	AV_MATRIX_ENCODING_DOLBYHEADPHONE = 1,
	AV_MATRIX_ENCODING_DOLBY = 2,
	AV_MATRIX_ENCODING_DPLIIX = 3,
	AV_MATRIX_ENCODING_DPLIIZ = 4,
	AV_MATRIX_ENCODING_DPLII = 5,
	AV_MATRIX_ENCODING_NB = 6,
	AV_MATRIX_ENCODING_NONE = 7
}
enum __anona69e4c4e0103 {
	AV_CRC_16_ANSI_LE = 0,
	AV_CRC_16_ANSI = 1,
	AV_CRC_16_CCITT = 2,
	AV_CRC_24_IEEE = 3,
	AV_CRC_32_IEEE_LE = 4,
	AV_CRC_32_IEEE = 5,
	AV_CRC_8_ATM = 6,
	AV_CRC_8_EBU = 7,
	AV_CRC_MAX = 8
}
enum AVDownmixType {
	AV_DOWNMIX_TYPE_DPLII = 0,
	AV_DOWNMIX_TYPE_LORO = 1,
	AV_DOWNMIX_TYPE_LTRT = 2,
	AV_DOWNMIX_TYPE_NB = 3,
	AV_DOWNMIX_TYPE_UNKNOWN = 4
}
enum __anon7f5a71390303 {
}
enum AVActiveFormatDescription {
	AV_AFD_14_9 = 11,
	AV_AFD_16_9_SP_14_9 = 14,
	AV_AFD_16_9 = 10,
	AV_AFD_4_3_SP_14_9 = 13,
	AV_AFD_4_3 = 9,
	AV_AFD_SAME = 8,
	AV_AFD_SP_4_3 = 15
}
enum AVFrameSideDataType {
	AV_FRAME_DATA_A53_CC = 0,
	AV_FRAME_DATA_AFD = 1,
	AV_FRAME_DATA_AUDIO_SERVICE_TYPE = 2,
	AV_FRAME_DATA_CONTENT_LIGHT_LEVEL = 3,
	AV_FRAME_DATA_DISPLAYMATRIX = 4,
	AV_FRAME_DATA_DOWNMIX_INFO = 5,
	AV_FRAME_DATA_DYNAMIC_HDR_PLUS = 6,
	AV_FRAME_DATA_GOP_TIMECODE = 7,
	AV_FRAME_DATA_ICC_PROFILE = 8,
	AV_FRAME_DATA_MASTERING_DISPLAY_METADATA = 9,
	AV_FRAME_DATA_MATRIXENCODING = 10,
	AV_FRAME_DATA_MOTION_VECTORS = 11,
	AV_FRAME_DATA_PANSCAN = 12,
	AV_FRAME_DATA_QP_TABLE_DATA = 13,
	AV_FRAME_DATA_QP_TABLE_PROPERTIES = 14,
	AV_FRAME_DATA_REGIONS_OF_INTEREST = 15,
	AV_FRAME_DATA_REPLAYGAIN = 16,
	AV_FRAME_DATA_S12M_TIMECODE = 17,
	AV_FRAME_DATA_SKIP_SAMPLES = 18,
	AV_FRAME_DATA_SPHERICAL = 19,
	AV_FRAME_DATA_STEREO3D = 20
}
enum __anonae4fa2810103 {
	AV_FRAME_CROP_UNALIGNED = 1 << 0
}
enum hashtype {
	ADLER32 = 0,
	CRC32 = 1,
	MD5 = 2,
	MURMUR3 = 3,
	NUM_HASHES = 4,
	RIPEMD128 = 5,
	RIPEMD160 = 6,
	RIPEMD256 = 7,
	RIPEMD320 = 8,
	SHA160 = 9,
	SHA224 = 10,
	SHA256 = 11,
	SHA384 = 12,
	SHA512_224 = 13,
	SHA512_256 = 14,
	SHA512 = 15
}
enum AVHDRPlusOverlapProcessOption {
	AV_HDR_PLUS_OVERLAP_PROCESS_LAYERING = 1,
	AV_HDR_PLUS_OVERLAP_PROCESS_WEIGHTED_AVERAGING = 0
}
enum AVHMACType {
	AV_HMAC_MD5 = 0,
	AV_HMAC_SHA1 = 1,
	AV_HMAC_SHA224 = 2,
	AV_HMAC_SHA256 = 3,
	AV_HMAC_SHA384 = 4,
	AV_HMAC_SHA512 = 5
}
enum AVHWDeviceType {
	AV_HWDEVICE_TYPE_CUDA = 0,
	AV_HWDEVICE_TYPE_D3D11VA = 1,
	AV_HWDEVICE_TYPE_DRM = 2,
	AV_HWDEVICE_TYPE_DXVA2 = 3,
	AV_HWDEVICE_TYPE_MEDIACODEC = 4,
	AV_HWDEVICE_TYPE_NONE = 5,
	AV_HWDEVICE_TYPE_OPENCL = 6,
	AV_HWDEVICE_TYPE_QSV = 7,
	AV_HWDEVICE_TYPE_VAAPI = 8,
	AV_HWDEVICE_TYPE_VDPAU = 9,
	AV_HWDEVICE_TYPE_VIDEOTOOLBOX = 10
}
enum AVHWFrameTransferDirection {
	AV_HWFRAME_TRANSFER_DIRECTION_FROM = 0,
	AV_HWFRAME_TRANSFER_DIRECTION_TO = 1
}
enum __anonf2fc7d7a0103 {
	AV_HWFRAME_MAP_DIRECT = 1 << 3,
	AV_HWFRAME_MAP_OVERWRITE = 1 << 2,
	AV_HWFRAME_MAP_READ = 1 << 0,
	AV_HWFRAME_MAP_WRITE = 1 << 1
}
enum supported_formats {
	AV_PIX_FMT_0BGR32 = 0,
	AV_PIX_FMT_0RGB32 = 1,
	AV_PIX_FMT_NV12 = 2,
	AV_PIX_FMT_P010 = 3,
	AV_PIX_FMT_P016 = 4,
	AV_PIX_FMT_YUV420P = 5,
	AV_PIX_FMT_YUV444P16 = 6,
	AV_PIX_FMT_YUV444P = 7
}
enum __anon61d7687c0103 {
	AV_DRM_MAX_PLANES = 4
}
enum __anon768f1fea0103 {
	AV_VAAPI_DRIVER_QUIRK_ATTRIB_MEMTYPE = (1 << 2),
	AV_VAAPI_DRIVER_QUIRK_RENDER_PARAM_BUFFERS = (1 << 1),
	AV_VAAPI_DRIVER_QUIRK_SURFACE_ATTRIBUTES = (1 << 3),
	AV_VAAPI_DRIVER_QUIRK_USER_SET = (1 << 0)
}
enum __anona73f94b80103 {
	AV_CLASS_CATEGORY_BITSTREAM_FILTER = 0,
	AV_CLASS_CATEGORY_DECODER = 1,
	AV_CLASS_CATEGORY_DEMUXER = 2,
	AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT = 3,
	AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT = 4,
	AV_CLASS_CATEGORY_DEVICE_INPUT = 5,
	AV_CLASS_CATEGORY_DEVICE_OUTPUT = 6,
	AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT = 7,
	AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT = 40,
	AV_CLASS_CATEGORY_ENCODER = 9,
	AV_CLASS_CATEGORY_FILTER = 10,
	AV_CLASS_CATEGORY_INPUT = 11,
	AV_CLASS_CATEGORY_MUXER = 12,
	AV_CLASS_CATEGORY_NA = 0,
	AV_CLASS_CATEGORY_NB = 14,
	AV_CLASS_CATEGORY_OUTPUT = 15,
	AV_CLASS_CATEGORY_SWRESAMPLER = 16,
	AV_CLASS_CATEGORY_SWSCALER = 17
}
enum AVRounding {
	AV_ROUND_DOWN = 2 ///< Round toward -infinity.,
	AV_ROUND_INF = 1 ///< Round away from zero.,
	AV_ROUND_NEAR_INF = 5 ///< Round to nearest and halfway cases away from zero.,
	AV_ROUND_PASS_MINMAX = 8192,
	AV_ROUND_UP = 3 ///< Round toward +infinity.,
	AV_ROUND_ZERO = 0 ///< Round toward zero.
}
enum AVOptionType {
	AV_OPT_TYPE_BINARY = 0,
	AV_OPT_TYPE_BOOL = 1,
	AV_OPT_TYPE_CHANNEL_LAYOUT = 2,
	AV_OPT_TYPE_COLOR = 3,
	AV_OPT_TYPE_CONST = 4,
	AV_OPT_TYPE_DICT = 5,
	AV_OPT_TYPE_DOUBLE = 6,
	AV_OPT_TYPE_DURATION = 7,
	AV_OPT_TYPE_FLAGS = 8,
	AV_OPT_TYPE_FLOAT = 9,
	AV_OPT_TYPE_IMAGE_SIZE = 10,
	AV_OPT_TYPE_INT64 = 11,
	AV_OPT_TYPE_INT = 12,
	AV_OPT_TYPE_PIXEL_FMT = 13,
	AV_OPT_TYPE_RATIONAL = 14,
	AV_OPT_TYPE_SAMPLE_FMT = 15,
	AV_OPT_TYPE_STRING = 16,
	AV_OPT_TYPE_UINT64 = 17,
	AV_OPT_TYPE_VIDEO_RATE = 18
}
enum __anona776a1e90203 {
	AV_OPT_FLAG_IMPLICIT_KEY = 1
}
enum AVChromaLocation {
	AVCHROMA_LOC_BOTTOMLEFT = 5,
	AVCHROMA_LOC_BOTTOM = 6,
	AVCHROMA_LOC_CENTER = 2 ///< MPEG-1 4:2:0 JPEG 4:2:0 H.263 4:2:0,
	AVCHROMA_LOC_LEFT = 1 ///< MPEG-2/4 4:2:0 H.264 default for 4:2:0,
	AVCHROMA_LOC_NB = 4,
	AVCHROMA_LOC_TOPLEFT = 3 ///< ITU-R 601 SMPTE 274M 296M S314M(DV 4:1:1) mpeg2 4:2:2,
	AVCHROMA_LOC_TOP = 4,
	AVCHROMA_LOC_UNSPECIFIED = 0
}
enum AVColorPrimaries {
	AVCOL_PRI_BT2020 = 9 ///< ITU-R BT2020,
	AVCOL_PRI_BT470BG = 5 ///< also ITU-R BT601-6 625 / ITU-R BT1358 625 / ITU-R BT1700 625 PAL & SECAM,
	AVCOL_PRI_BT470M = 4 ///< also FCC Title 47 Code of Federal Regulations 73.682 (a)(20),
	AVCOL_PRI_BT709 = 1 ///< also ITU-R BT1361 / IEC 61966-2-4 / SMPTE RP177 Annex B,
	AVCOL_PRI_FILM = 8 ///< colour filters using Illuminant C,
	AVCOL_PRI_JEDEC_P22 = 22 ///< JEDEC P22 phosphors,
	AVCOL_PRI_NB = 6,
	AVCOL_PRI_RESERVED0 = 0,
	AVCOL_PRI_RESERVED = 3,
	AVCOL_PRI_SMPTE170M = 6 ///< also ITU-R BT601-6 525 / ITU-R BT1358 525 / ITU-R BT1700 NTSC,
	AVCOL_PRI_SMPTE240M = 7 ///< functionally identical to above,
	AVCOL_PRI_SMPTE428 = 10 ///< SMPTE ST 428-1 (CIE 1931 XYZ),
	AVCOL_PRI_SMPTE431 = 11 ///< SMPTE ST 431-2 (2011) / DCI P3,
	AVCOL_PRI_SMPTE432 = 12 ///< SMPTE ST 432-1 (2010) / P3 D65 / Display P3,
	AVCOL_PRI_SMPTEST428_1 = AVCOL_PRI_SMPTE428,
	AVCOL_PRI_UNSPECIFIED = 2
}
enum AVColorRange {
	AVCOL_RANGE_JPEG = 2 ///< the normal 2^n-1 JPEG YUV ranges,
	AVCOL_RANGE_MPEG = 1 ///< the normal 219*2^(n-8) MPEG YUV ranges,
	AVCOL_RANGE_NB = 2,
	AVCOL_RANGE_UNSPECIFIED = 0
}
enum AVColorSpace {
	AVCOL_SPC_BT2020_CL = 10 ///< ITU-R BT2020 constant luminance system,
	AVCOL_SPC_BT2020_NCL = 9 ///< ITU-R BT2020 non-constant luminance system,
	AVCOL_SPC_BT470BG = 5 ///< also ITU-R BT601-6 625 / ITU-R BT1358 625 / ITU-R BT1700 625 PAL & SECAM / IEC 61966-2-4 xvYCC601,
	AVCOL_SPC_BT709 = 1 ///< also ITU-R BT1361 / IEC 61966-2-4 xvYCC709 / SMPTE RP177 Annex B,
	AVCOL_SPC_CHROMA_DERIVED_CL = 13 ///< Chromaticity-derived constant luminance system,
	AVCOL_SPC_CHROMA_DERIVED_NCL = 12 ///< Chromaticity-derived non-constant luminance system,
	AVCOL_SPC_FCC = 4 ///< FCC Title 47 Code of Federal Regulations 73.682 (a)(20),
	AVCOL_SPC_ICTCP = 14 ///< ITU-R BT.2100-0 ICtCp,
	AVCOL_SPC_NB = 8,
	AVCOL_SPC_RESERVED = 3,
	AVCOL_SPC_RGB = 0 ///< order of coefficients is actually GBR also IEC 61966-2-1 (sRGB),
	AVCOL_SPC_SMPTE170M = 6 ///< also ITU-R BT601-6 525 / ITU-R BT1358 525 / ITU-R BT1700 NTSC,
	AVCOL_SPC_SMPTE2085 = 11 ///< SMPTE 2085 Y'D'zD'x,
	AVCOL_SPC_SMPTE240M = 7 ///< functionally identical to above,
	AVCOL_SPC_UNSPECIFIED = 2,
	AVCOL_SPC_YCGCO = 8 ///< Used by Dirac / VC-2 and H.264 FRext see ITU-T SG16,
	AVCOL_SPC_YCOCG = AVCOL_SPC_YCGCO
}
enum AVColorTransferCharacteristic {
	AVCOL_TRC_ARIB_STD_B67 = 18 ///< ARIB STD-B67 known as Hybrid log-gamma,
	AVCOL_TRC_BT1361_ECG = 12 ///< ITU-R BT1361 Extended Colour Gamut,
	AVCOL_TRC_BT2020_10 = 14 ///< ITU-R BT2020 for 10-bit system,
	AVCOL_TRC_BT2020_12 = 15 ///< ITU-R BT2020 for 12-bit system,
	AVCOL_TRC_BT709 = 1 ///< also ITU-R BT1361,
	AVCOL_TRC_GAMMA22 = 4 ///< also ITU-R BT470M / ITU-R BT1700 625 PAL & SECAM,
	AVCOL_TRC_GAMMA28 = 5 ///< also ITU-R BT470BG,
	AVCOL_TRC_IEC61966_2_1 = 13 ///< IEC 61966-2-1 (sRGB or sYCC),
	AVCOL_TRC_IEC61966_2_4 = 11 ///< IEC 61966-2-4,
	AVCOL_TRC_LINEAR = 8 ///< Linear transfer characteristics,
	AVCOL_TRC_LOG_SQRT = 10 ///< Logarithmic transfer characteristic (100 * Sqrt(10) : 1 range),
	AVCOL_TRC_LOG = 9 ///< Logarithmic transfer characteristic (100:1 range),
	AVCOL_TRC_NB = 12,
	AVCOL_TRC_RESERVED0 = 0,
	AVCOL_TRC_RESERVED = 3,
	AVCOL_TRC_SMPTE170M = 6 ///< also ITU-R BT601-6 525 or 625 / ITU-R BT1358 525 or 625 / ITU-R BT1700 NTSC,
	AVCOL_TRC_SMPTE2084 = 16 ///< SMPTE ST 2084 for 10- 12- 14- and 16-bit systems,
	AVCOL_TRC_SMPTE240M = 7,
	AVCOL_TRC_SMPTE428 = 17 ///< SMPTE ST 428-1,
	AVCOL_TRC_SMPTEST2084 = AVCOL_TRC_SMPTE2084,
	AVCOL_TRC_SMPTEST428_1 = AVCOL_TRC_SMPTE428,
	AVCOL_TRC_UNSPECIFIED = 2
}
enum AVPixelFormat {
	AV_PIX_FMT_0BGR = unused/undefined,
	AV_PIX_FMT_0RGB = unused/undefined,
	AV_PIX_FMT_ABGR = 2,
	AV_PIX_FMT_ARGB = 3,
	AV_PIX_FMT_AYUV64BE = 4,
	AV_PIX_FMT_AYUV64LE = 5,
	AV_PIX_FMT_BAYER_BGGR16BE = 6,
	AV_PIX_FMT_BAYER_BGGR16LE = 7,
	AV_PIX_FMT_BAYER_BGGR8 = 8,
	AV_PIX_FMT_BAYER_GBRG16BE = 9,
	AV_PIX_FMT_BAYER_GBRG16LE = 10,
	AV_PIX_FMT_BAYER_GBRG8 = 11,
	AV_PIX_FMT_BAYER_GRBG16BE = 12,
	AV_PIX_FMT_BAYER_GRBG16LE = 13,
	AV_PIX_FMT_BAYER_GRBG8 = 14,
	AV_PIX_FMT_BAYER_RGGB16BE = 15,
	AV_PIX_FMT_BAYER_RGGB16LE = 16,
	AV_PIX_FMT_BAYER_RGGB8 = 17,
	AV_PIX_FMT_BGR0 = unused/undefined,
	AV_PIX_FMT_BGR24 = 19,
	AV_PIX_FMT_BGR444BE = unused/undefined,
	AV_PIX_FMT_BGR444LE = unused/undefined,
	AV_PIX_FMT_BGR48BE = 22,
	AV_PIX_FMT_BGR48LE = 23,
	AV_PIX_FMT_BGR4_BYTE = 24,
	AV_PIX_FMT_BGR4 = 25,
	AV_PIX_FMT_BGR555BE = unused/undefined,
	AV_PIX_FMT_BGR555LE = unused/undefined,
	AV_PIX_FMT_BGR565BE = 28,
	AV_PIX_FMT_BGR565LE = 29,
	AV_PIX_FMT_BGR8 = 30,
	AV_PIX_FMT_BGRA64BE = 31,
	AV_PIX_FMT_BGRA64LE = 32,
	AV_PIX_FMT_BGRA = 33,
	AV_PIX_FMT_CUDA = 34,
	AV_PIX_FMT_D3D11VA_VLD = 35,
	AV_PIX_FMT_D3D11 = 36,
	AV_PIX_FMT_DRM_PRIME = 37,
	AV_PIX_FMT_DXVA2_VLD = 38,
	AV_PIX_FMT_GBR24P = AV_PIX_FMT_GBRP // alias for #AV_PIX_FMT_GBRP,
	AV_PIX_FMT_GBRAP10BE = 40,
	AV_PIX_FMT_GBRAP10LE = 41,
	AV_PIX_FMT_GBRAP12BE = 42,
	AV_PIX_FMT_GBRAP12LE = 43,
	AV_PIX_FMT_GBRAP16BE = 44,
	AV_PIX_FMT_GBRAP16LE = 45,
	AV_PIX_FMT_GBRAPF32BE = 46,
	AV_PIX_FMT_GBRAPF32LE = 47,
	AV_PIX_FMT_GBRAP = 48,
	AV_PIX_FMT_GBRP10BE = 49,
	AV_PIX_FMT_GBRP10LE = 50,
	AV_PIX_FMT_GBRP12BE = 51,
	AV_PIX_FMT_GBRP12LE = 52,
	AV_PIX_FMT_GBRP14BE = 53,
	AV_PIX_FMT_GBRP14LE = 54,
	AV_PIX_FMT_GBRP16BE = 55,
	AV_PIX_FMT_GBRP16LE = 56,
	AV_PIX_FMT_GBRP9BE = 57,
	AV_PIX_FMT_GBRP9LE = 58,
	AV_PIX_FMT_GBRPF32BE = 59,
	AV_PIX_FMT_GBRPF32LE = 60,
	AV_PIX_FMT_GBRP = 61,
	AV_PIX_FMT_GRAY10BE = 62,
	AV_PIX_FMT_GRAY10LE = 63,
	AV_PIX_FMT_GRAY12BE = 64,
	AV_PIX_FMT_GRAY12LE = 65,
	AV_PIX_FMT_GRAY14BE = 66,
	AV_PIX_FMT_GRAY14LE = 67,
	AV_PIX_FMT_GRAY16BE = 68,
	AV_PIX_FMT_GRAY16LE = 69,
	AV_PIX_FMT_GRAY8A = AV_PIX_FMT_YA8 ///< alias for AV_PIX_FMT_YA8,
	AV_PIX_FMT_GRAY8 = 71,
	AV_PIX_FMT_GRAY9BE = 72,
	AV_PIX_FMT_GRAY9LE = 73,
	AV_PIX_FMT_GRAYF32BE = 74,
	AV_PIX_FMT_GRAYF32LE = 75,
	AV_PIX_FMT_MEDIACODEC = 76,
	AV_PIX_FMT_MMAL = 77,
	AV_PIX_FMT_MONOBLACK = 78,
	AV_PIX_FMT_MONOWHITE = 79,
	AV_PIX_FMT_NB = 80,
	AV_PIX_FMT_NONE = -1,
	AV_PIX_FMT_NV12 = 82,
	AV_PIX_FMT_NV16 = 83,
	AV_PIX_FMT_NV20BE = 84,
	AV_PIX_FMT_NV20LE = 85,
	AV_PIX_FMT_NV21 = 86,
	AV_PIX_FMT_OPENCL = 87,
	AV_PIX_FMT_P010BE = 88,
	AV_PIX_FMT_P010LE = 89,
	AV_PIX_FMT_P016BE = 90,
	AV_PIX_FMT_P016LE = 91,
	AV_PIX_FMT_PAL8 = 92,
	AV_PIX_FMT_QSV = 93,
	AV_PIX_FMT_RGB0 = unused/undefined,
	AV_PIX_FMT_RGB24 = 95,
	AV_PIX_FMT_RGB444BE = unused/undefined,
	AV_PIX_FMT_RGB444LE = unused/undefined,
	AV_PIX_FMT_RGB48BE = 98,
	AV_PIX_FMT_RGB48LE = 99,
	AV_PIX_FMT_RGB4_BYTE = 100,
	AV_PIX_FMT_RGB4 = 101,
	AV_PIX_FMT_RGB555BE = unused/undefined,
	AV_PIX_FMT_RGB555LE = unused/undefined,
	AV_PIX_FMT_RGB565BE = 104,
	AV_PIX_FMT_RGB565LE = 105,
	AV_PIX_FMT_RGB8 = 106,
	AV_PIX_FMT_RGBA64BE = 107,
	AV_PIX_FMT_RGBA64LE = 108,
	AV_PIX_FMT_RGBA = 109,
	AV_PIX_FMT_UYVY422 = 110,
	AV_PIX_FMT_UYYVYY411 = 111,
	AV_PIX_FMT_VAAPI_IDCT = 112,
	AV_PIX_FMT_VAAPI_MOCO = 113,
	AV_PIX_FMT_VAAPI_VLD = 114,
	AV_PIX_FMT_VAAPI = AV_PIX_FMT_VAAPI_VLD,
	AV_PIX_FMT_VDPAU = 116,
	AV_PIX_FMT_VIDEOTOOLBOX = 117,
	AV_PIX_FMT_XVMC = 118,
	AV_PIX_FMT_XYZ12BE = 119,
	AV_PIX_FMT_XYZ12LE = 120,
	AV_PIX_FMT_Y400A = AV_PIX_FMT_YA8 ///< alias for AV_PIX_FMT_YA8,
	AV_PIX_FMT_YA16BE = 122,
	AV_PIX_FMT_YA16LE = 123,
	AV_PIX_FMT_YA8 = 124,
	AV_PIX_FMT_YUV410P = 125,
	AV_PIX_FMT_YUV411P = 126,
	AV_PIX_FMT_YUV420P10BE = 127,
	AV_PIX_FMT_YUV420P10LE = 128,
	AV_PIX_FMT_YUV420P12BE = 129,
	AV_PIX_FMT_YUV420P12LE = 130,
	AV_PIX_FMT_YUV420P14BE = 131,
	AV_PIX_FMT_YUV420P14LE = 132,
	AV_PIX_FMT_YUV420P16BE = 133,
	AV_PIX_FMT_YUV420P16LE = 134,
	AV_PIX_FMT_YUV420P9BE = 135,
	AV_PIX_FMT_YUV420P9LE = 136,
	AV_PIX_FMT_YUV420P = 137,
	AV_PIX_FMT_YUV422P10BE = 138,
	AV_PIX_FMT_YUV422P10LE = 139,
	AV_PIX_FMT_YUV422P12BE = 140,
	AV_PIX_FMT_YUV422P12LE = 141,
	AV_PIX_FMT_YUV422P14BE = 142,
	AV_PIX_FMT_YUV422P14LE = 143,
	AV_PIX_FMT_YUV422P16BE = 144,
	AV_PIX_FMT_YUV422P16LE = 145,
	AV_PIX_FMT_YUV422P9BE = 146,
	AV_PIX_FMT_YUV422P9LE = 147,
	AV_PIX_FMT_YUV422P = 148,
	AV_PIX_FMT_YUV440P10BE = 149,
	AV_PIX_FMT_YUV440P10LE = 150,
	AV_PIX_FMT_YUV440P12BE = 151,
	AV_PIX_FMT_YUV440P12LE = 152,
	AV_PIX_FMT_YUV440P = 153,
	AV_PIX_FMT_YUV444P10BE = 154,
	AV_PIX_FMT_YUV444P10LE = 155,
	AV_PIX_FMT_YUV444P12BE = 156,
	AV_PIX_FMT_YUV444P12LE = 157,
	AV_PIX_FMT_YUV444P14BE = 158,
	AV_PIX_FMT_YUV444P14LE = 159,
	AV_PIX_FMT_YUV444P16BE = 160,
	AV_PIX_FMT_YUV444P16LE = 161,
	AV_PIX_FMT_YUV444P9BE = 162,
	AV_PIX_FMT_YUV444P9LE = 163,
	AV_PIX_FMT_YUV444P = 164,
	AV_PIX_FMT_YUVA420P10BE = 165,
	AV_PIX_FMT_YUVA420P10LE = 166,
	AV_PIX_FMT_YUVA420P16BE = 167,
	AV_PIX_FMT_YUVA420P16LE = 168,
	AV_PIX_FMT_YUVA420P9BE = 169,
	AV_PIX_FMT_YUVA420P9LE = 170,
	AV_PIX_FMT_YUVA420P = 171,
	AV_PIX_FMT_YUVA422P10BE = 172,
	AV_PIX_FMT_YUVA422P10LE = 173,
	AV_PIX_FMT_YUVA422P12BE = 174,
	AV_PIX_FMT_YUVA422P12LE = 175,
	AV_PIX_FMT_YUVA422P16BE = 176,
	AV_PIX_FMT_YUVA422P16LE = 177,
	AV_PIX_FMT_YUVA422P9BE = 178,
	AV_PIX_FMT_YUVA422P9LE = 179,
	AV_PIX_FMT_YUVA422P = 180,
	AV_PIX_FMT_YUVA444P10BE = 181,
	AV_PIX_FMT_YUVA444P10LE = 182,
	AV_PIX_FMT_YUVA444P12BE = 183,
	AV_PIX_FMT_YUVA444P12LE = 184,
	AV_PIX_FMT_YUVA444P16BE = 185,
	AV_PIX_FMT_YUVA444P16LE = 186,
	AV_PIX_FMT_YUVA444P9BE = 187,
	AV_PIX_FMT_YUVA444P9LE = 188,
	AV_PIX_FMT_YUVA444P = 189,
	AV_PIX_FMT_YUVJ411P = 190,
	AV_PIX_FMT_YUVJ420P = 191,
	AV_PIX_FMT_YUVJ422P = 192,
	AV_PIX_FMT_YUVJ440P = 193,
	AV_PIX_FMT_YUVJ444P = 194,
	AV_PIX_FMT_YUYV422 = 195,
	AV_PIX_FMT_YVYU422 = 196
}
enum AVSampleFormat {
	AV_SAMPLE_FMT_DBLP = 0,
	AV_SAMPLE_FMT_DBL = 1,
	AV_SAMPLE_FMT_FLTP = 2,
	AV_SAMPLE_FMT_FLT = 3,
	AV_SAMPLE_FMT_NB = 4,
	AV_SAMPLE_FMT_NONE = -1,
	AV_SAMPLE_FMT_S16P = 6,
	AV_SAMPLE_FMT_S16 = 7,
	AV_SAMPLE_FMT_S32P = 8,
	AV_SAMPLE_FMT_S32 = 9,
	AV_SAMPLE_FMT_S64P = 10,
	AV_SAMPLE_FMT_S64 = 11,
	AV_SAMPLE_FMT_U8P = 12,
	AV_SAMPLE_FMT_U8 = 13
}
enum AVSphericalProjection {
	AV_SPHERICAL_CUBEMAP = 0,
	AV_SPHERICAL_EQUIRECTANGULAR_TILE = 1,
	AV_SPHERICAL_EQUIRECTANGULAR = 2
}
enum AVStereo3DType {
	AV_STEREO3D_2D = 0,
	AV_STEREO3D_CHECKERBOARD = 1,
	AV_STEREO3D_COLUMNS = 2,
	AV_STEREO3D_FRAMESEQUENCE = 3,
	AV_STEREO3D_LINES = 4,
	AV_STEREO3D_SIDEBYSIDE_QUINCUNX = 5,
	AV_STEREO3D_SIDEBYSIDE = 6,
	AV_STEREO3D_TOPBOTTOM = 7
}
enum AVStereo3DView {
	AV_STEREO3D_VIEW_LEFT = 0,
	AV_STEREO3D_VIEW_PACKED = 1,
	AV_STEREO3D_VIEW_RIGHT = 2
}
enum pixfmt_list {
	AV_PIX_FMT_GRAY10 = 0,
	AV_PIX_FMT_GRAY16 = 1,
	AV_PIX_FMT_GRAY8 = 2,
	AV_PIX_FMT_MONOWHITE = 3,
	AV_PIX_FMT_RGB24 = 4,
	AV_PIX_FMT_RGB48 = 5,
	AV_PIX_FMT_RGB565 = 6,
	AV_PIX_FMT_VAAPI = 7,
	AV_PIX_FMT_VDPAU = 8,
	AV_PIX_FMT_YUV420P10 = 9,
	AV_PIX_FMT_YUV420P16 = 10,
	AV_PIX_FMT_YUV420P = 11,
	AV_PIX_FMT_YUV422P10 = 12,
	AV_PIX_FMT_YUV422P16 = 13,
	AV_PIX_FMT_YUV422P = 14,
	AV_PIX_FMT_YUV444P10 = 15,
	AV_PIX_FMT_YUV444P16 = 16,
	AV_PIX_FMT_YUV444P = 17
}
enum AVThreadMessageFlags {
	AV_THREAD_MESSAGE_NONBLOCK = 1
}
enum AVTimecodeFlag {
	AV_TIMECODE_FLAG_24HOURSMAX = 1<<1 ///< timecode wraps after 24 hours,
	AV_TIMECODE_FLAG_ALLOWNEGATIVE = 1<<2 ///< negative time values are allowed,
	AV_TIMECODE_FLAG_DROPFRAME = 1<<0 ///< timecode is drop frame
}
enum __anon287a171f0203 {
}
enum SwrDitherType {
	SWR_DITHER_NB = 0,
	SWR_DITHER_NONE = 0,
	SWR_DITHER_NS_F_WEIGHTED = 2,
	SWR_DITHER_NS_HIGH_SHIBATA = 3,
	SWR_DITHER_NS_IMPROVED_E_WEIGHTED = 4,
	SWR_DITHER_NS_LIPSHITZ = 5,
	SWR_DITHER_NS_LOW_SHIBATA = 6,
	SWR_DITHER_NS_MODIFIED_E_WEIGHTED = 7,
	SWR_DITHER_NS_SHIBATA = 8,
	SWR_DITHER_NS = 64 ///< not part of API/ABI,
	SWR_DITHER_RECTANGULAR = 10,
	SWR_DITHER_TRIANGULAR_HIGHPASS = 11,
	SWR_DITHER_TRIANGULAR = 12
}
enum SwrEngine {
	SWR_ENGINE_NB = 0,
	SWR_ENGINE_SOXR = 1,
	SWR_ENGINE_SWR = 2
}
enum SwrFilterType {
	SWR_FILTER_TYPE_BLACKMAN_NUTTALL = 0,
	SWR_FILTER_TYPE_CUBIC = 1,
	SWR_FILTER_TYPE_KAISER = 2
}
enum formats {
	AV_SAMPLE_FMT_DBLP = 0,
	AV_SAMPLE_FMT_DBL = 1,
	AV_SAMPLE_FMT_FLTP = 2,
	AV_SAMPLE_FMT_FLT = 3,
	AV_SAMPLE_FMT_S16P = 4,
	AV_SAMPLE_FMT_S16 = 5,
	AV_SAMPLE_FMT_S32P = 6,
	AV_SAMPLE_FMT_S32 = 7,
	AV_SAMPLE_FMT_U8P = 8,
	AV_SAMPLE_FMT_U8 = 9
}
enum SwsAlphaBlend {
	SWS_ALPHA_BLEND_CHECKERBOARD = 0,
	SWS_ALPHA_BLEND_NB = 1,
	SWS_ALPHA_BLEND_NONE = 0,
	SWS_ALPHA_BLEND_UNIFORM = 3
}
enum SwsDither {
	NB_SWS_DITHER = 0,
	SWS_DITHER_AUTO = 1,
	SWS_DITHER_A_DITHER = 2,
	SWS_DITHER_BAYER = 3,
	SWS_DITHER_ED = 4,
	SWS_DITHER_NONE = 0,
	SWS_DITHER_X_DITHER = 6
}

// Services
service FFmpeg {
	binary atomic_exchange (0: binary object, 1: binary desired),
	i32 atomic_compare_exchange_strong (0: binary expected, 1: binary object, 2: binary desired),
	void avpriv_atomic_lock (),
	void avpriv_atomic_unlock (),
	binary atomic_exchange (0: binary object, 1: binary desired),
	binary atomic_load (0: binary object),
	i32 atomic_compare_exchange_strong (0: binary expected, 1: binary object, 2: binary desired),
	void atomic_store (0: binary object, 1: binary desired),
	void atomic_thread_fence (0: i32 order),
	binary atomic_fetch_add (0: binary object, 1: binary operand),
	binary atomic_fetch_and (0: binary object, 1: binary operand),
	binary atomic_fetch_or (0: binary object, 1: binary operand),
	binary atomic_fetch_xor (0: binary object, 1: binary operand),
	binary atomic_load (0: binary object),
	i32 atomic_compare_exchange_strong (0: binary expected, 1: binary object, 2: binary desired),
	void atomic_store (0: binary object, 1: binary desired),
	i32 atomic_compare_exchange_strong (0: binary expected, 1: binary object, 2: binary desired),
	binary AVS_ScriptEnvironment (),
	binary avs_load_library (),
	binary avs_array_elt (0: AVS_Value v, 1: i32 index),
	binary avs_new_value_array (0: binary v0, 1: i32 size),
	binary avs_new_value_bool (0: i32 v0),
	binary avs_new_value_clip (0: binary v0),
	binary avs_new_value_error (0: binary v0),
	binary avs_new_value_float (0: double v0),
	binary avs_new_value_int (0: i32 v0),
	binary avs_new_value_string (0: binary v0),
	binary avs_copy_frame (0: binary f),
	binary avs_new_frame (0: binary env, 1: binary vi),
	binary avs_new_video_frame (0: binary env, 1: binary vi),
	binary avs_get_write_ptr (0: binary p),
	binary avs_audio_samples_from_bytes (0: INT64 bytes, 1: binary p),
	binary avs_audio_samples_from_frames (0: INT64 frames, 1: binary p),
	binary avs_bytes_from_audio_samples (0: INT64 samples, 1: binary p),
	binary avs_as_array (0: AVS_Value v),
	binary avs_get_read_ptr (0: binary p),
	binary avs_as_error (0: AVS_Value v),
	binary avs_as_string (0: AVS_Value v),
	binary avs_as_float (0: AVS_Value v),
	binary avs_array_size (0: AVS_Value v),
	binary avs_as_bool (0: AVS_Value v),
	binary avs_as_int (0: AVS_Value v),
	binary avs_audio_channels (0: binary p),
	binary avs_bytes_per_audio_sample (0: binary p),
	binary avs_bytes_per_channel_sample (0: binary p),
	binary avs_defined (0: AVS_Value v),
	binary avs_frames_from_audio_samples (0: INT64 samples, 1: binary p),
	binary avs_get_height (0: binary p),
	binary avs_get_pitch (0: binary p),
	binary avs_get_row_size (0: binary p),
	binary avs_has_audio (0: binary p),
	binary avs_has_video (0: binary p),
	binary avs_is_array (0: AVS_Value v),
	binary avs_is_bff (0: binary p),
	binary avs_is_bool (0: AVS_Value v),
	binary avs_is_clip (0: AVS_Value v),
	binary avs_is_error (0: AVS_Value v),
	binary avs_is_field_based (0: binary p),
	binary avs_is_float (0: AVS_Value v),
	binary avs_is_int (0: AVS_Value v),
	binary avs_is_parity_known (0: binary p),
	binary avs_is_planar (0: binary p),
	binary avs_is_property (0: binary p, 1: i32 property),
	binary avs_is_rgb24 (0: binary p),
	binary avs_is_rgb32 (0: binary p),
	binary avs_is_rgb (0: binary p),
	binary avs_is_same_colorspace (0: binary x, 1: binary y),
	binary avs_is_string (0: AVS_Value v),
	binary avs_is_tff (0: binary p),
	binary avs_is_yuv (0: binary p),
	binary avs_is_yuy2 (0: binary p),
	binary avs_sample_type (0: binary p),
	binary avs_samples_per_second (0: binary p),
	binary avs_clear_property (0: binary p, 1: i32 property),
	binary avs_free_library (0: binary library),
	binary avs_release_frame (0: binary f),
	binary avs_set_field_based (0: binary p, 1: i32 isfieldbased),
	binary avs_set_fps (0: binary p, 1: binary denominator, 2: binary numerator),
	binary avs_set_property (0: binary p, 1: i32 property),
	binary avs_array_elt (0: AVS_Value v, 1: i32 index),
	binary avs_new_value_array (0: binary v0, 1: i32 size),
	binary avs_new_value_bool (0: i32 v0),
	binary avs_new_value_clip (0: binary v0),
	binary avs_new_value_error (0: binary v0),
	binary avs_new_value_float (0: double v0),
	binary avs_new_value_int (0: i32 v0),
	binary avs_new_value_string (0: binary v0),
	binary avs_copy_frame (0: binary f),
	binary avs_new_frame (0: binary env, 1: binary vi),
	binary avs_new_video_frame (0: binary env, 1: binary vi),
	binary avs_audio_samples_from_bytes (0: INT64 bytes, 1: binary p),
	binary avs_audio_samples_from_frames (0: INT64 frames, 1: binary p),
	binary avs_bytes_from_audio_samples (0: INT64 samples, 1: binary p),
	binary avs_as_array (0: AVS_Value v),
	binary avs_as_error (0: AVS_Value v),
	binary avs_as_string (0: AVS_Value v),
	binary avs_get_read_ptr_p (0: binary p, 1: i32 plane),
	binary avs_get_read_ptr (0: binary p),
	binary avs_as_float (0: AVS_Value v),
	binary avs_array_size (0: AVS_Value v),
	binary avs_as_bool (0: AVS_Value v),
	binary avs_as_int (0: AVS_Value v),
	binary avs_audio_channels (0: binary p),
	binary avs_bits_per_pixel (0: binary p),
	binary avs_bmp_size (0: binary vi),
	binary avs_bytes_from_pixels (0: binary p, 1: i32 pixels),
	binary avs_bytes_per_audio_sample (0: binary p),
	binary avs_bytes_per_channel_sample (0: binary p),
	binary avs_defined (0: AVS_Value v),
	binary avs_frames_from_audio_samples (0: INT64 samples, 1: binary p),
	binary avs_get_height_p (0: binary p, 1: i32 plane),
	binary avs_get_height (0: binary p),
	binary avs_get_pitch_p (0: binary p, 1: i32 plane),
	binary avs_get_pitch (0: binary p),
	binary avs_get_row_size_p (0: binary p, 1: i32 plane),
	binary avs_get_row_size (0: binary p),
	binary avs_has_audio (0: binary p),
	binary avs_has_video (0: binary p),
	binary avs_is_array (0: AVS_Value v),
	binary avs_is_bff (0: binary p),
	binary avs_is_bool (0: AVS_Value v),
	binary avs_is_clip (0: AVS_Value v),
	binary avs_is_color_space (0: binary p, 1: i32 c_space),
	binary avs_is_error (0: AVS_Value v),
	binary avs_is_field_based (0: binary p),
	binary avs_is_float (0: AVS_Value v),
	binary avs_is_int (0: AVS_Value v),
	binary avs_is_parity_known (0: binary p),
	binary avs_is_planar (0: binary p),
	binary avs_is_property (0: binary p, 1: i32 property),
	binary avs_is_rgb24 (0: binary p),
	binary avs_is_rgb32 (0: binary p),
	binary avs_is_rgb (0: binary p),
	binary avs_is_same_colorspace (0: binary x, 1: binary y),
	binary avs_is_string (0: AVS_Value v),
	binary avs_is_tff (0: binary p),
	binary avs_is_writable (0: binary p),
	binary avs_is_yuv (0: binary p),
	binary avs_is_yuy2 (0: binary p),
	binary avs_is_yv12 (0: binary p),
	binary avs_row_size (0: binary p),
	binary avs_sample_type (0: binary p),
	binary avs_samples_per_second (0: binary p),
	binary avs_get_write_ptr_p (0: binary p, 1: i32 plane),
	binary avs_get_write_ptr (0: binary p),
	binary avs_clear_property (0: binary p, 1: i32 property),
	binary avs_release_frame (0: binary f),
	binary avs_set_field_based (0: binary p, 1: i32 isfieldbased),
	binary avs_set_fps (0: binary p, 1: binary denominator, 2: binary numerator),
	binary avs_set_property (0: binary p, 1: i32 property),
	i32 compat_sem_init (0: binary psem, 1: i32 unused, 2: i32 val),
	binary copysignl (0: binary x, 1: binary y),
	binary scalbnl (0: i32 exp, 1: binary x),
	i32 avpriv_snprintf (0: string s, 1: binary fmt, 2: i64 n),
	i32 avpriv_vsnprintf (0: string s, 1: binary fmt, 2: i64 n, 3: binary ap),
	binary pthread_cond_broadcast (0: binary cond),
	binary pthread_cond_destroy (0: binary cond),
	binary pthread_cond_init (0: binary attr, 1: binary cond),
	binary pthread_cond_signal (0: binary cond),
	binary pthread_cond_wait (0: binary cond, 1: binary mutex),
	binary pthread_create (0: binary attr, 1: binary thread, 2: binary start_routine, 3: binary arg),
	binary pthread_join (0: pthread_t thread, 1: binary value_ptr),
	binary pthread_mutex_destroy (0: binary mutex),
	binary pthread_mutex_init (0: binary attr, 1: binary mutex),
	binary pthread_mutex_lock (0: binary mutex),
	binary pthread_mutex_unlock (0: binary mutex),
	binary pthread_once (0: binary once_control, 1: binary init_routine),
	void thread_entry (0: binary arg),
	double avpriv_strtod (0: binary endptr, 1: binary nptr),
	HMODULE win32_dlopen (0: binary name),
	binary pthread_create (0: binary unused_attr, 1: binary thread, 2: binary start_routine, 3: binary arg),
	binary pthread_join (0: pthread_t thread, 1: binary value_ptr),
	binary pthread_once (0: binary once_control, 1: binary init_routine),
	binary win32thread_worker (0: binary arg),
	i32 pthread_cond_broadcast (0: binary cond),
	i32 pthread_cond_destroy (0: binary cond),
	i32 pthread_cond_init (0: binary unused_attr, 1: binary cond),
	i32 pthread_cond_signal (0: binary cond),
	i32 pthread_cond_wait (0: binary cond, 1: binary mutex),
	i32 pthread_mutex_destroy (0: binary m),
	i32 pthread_mutex_init (0: binary m, 1: binary attr),
	i32 pthread_mutex_lock (0: binary m),
	i32 pthread_mutex_unlock (0: binary m),
	binary mktemp (),
	binary add_asflags (),
	binary add_cflags_headers (),
	binary add_cflags (),
	binary add_compat (),
	binary add_cppflags (),
	binary add_cxxflags (),
	binary add_extralibs (),
	binary add_host_cflags (),
	binary add_host_cppflags (),
	binary add_host_ldflags (),
	binary add_ldexeflags (),
	binary add_ldflags (),
	binary add_ldsoflags (),
	binary add_objcflags (),
	binary add_stripflags (),
	binary add_suffix (),
	binary append (),
	binary armasm_flags (),
	binary as_o (),
	binary c_escape (),
	binary cc_e (),
	binary cc_o (),
	binary check_64bit (),
	binary check_apple_framework (),
	binary check_arm_arch (),
	binary check_as (),
	binary check_builtin (),
	binary check_cc (),
	binary check_cflags (),
	binary check_class_headers_cpp (),
	binary check_cmd (),
	binary check_compile_assert (),
	binary check_complexfunc (),
	binary check_cpp_condition (),
	binary check_cppflags (),
	binary check_cxxflags (),
	binary check_deps (),
	binary check_disable_warning_headers (),
	binary check_disable_warning (),
	binary check_exec_crash (),
	binary check_func_headers (),
	binary check_func (),
	binary check_gas (),
	binary check_header_objcc (),
	binary check_headers (),
	binary check_host_cflags (),
	binary check_host_cpp_condition (),
	binary check_host_cppflags (),
	binary check_inline_asm_flags (),
	binary check_inline_asm (),
	binary check_insn (),
	binary check_ldflags (),
	binary check_ld (),
	binary check_lib_cpp (),
	binary check_lib (),
	binary check_mathfunc (),
	binary check_native (),
	binary check_objcflags (),
	binary check_optflags (),
	binary check_pkg_config (),
	binary check_stripflags (),
	binary check_struct (),
	binary check_type (),
	binary check_x86asm (),
	binary cleanws (),
	binary cp_if_changed (),
	binary cparser_flags (),
	binary die_license_disabled_gpl (),
	binary die_license_disabled (),
	binary die_unknown (),
	binary die (),
	binary disable_components (),
	binary disable_sanitized (),
	binary disable_weak (),
	binary disable_with_reason (),
	binary disabled_all (),
	binary disabled_any (),
	binary disabled (),
	binary disable (),
	binary do_enable_deep (),
	binary do_random (),
	binary enable_deep_weak (),
	binary enable_deep (),
	binary enable_sanitized (),
	binary enable_weak_pic (),
	binary enable_weak (),
	binary enabled_all (),
	binary enabled_any (),
	binary enabled (),
	binary enable (),
	binary esc (),
	binary exesuf (),
	binary expand_deps (),
	binary filter_out (),
	binary filter (),
	binary find_filters_extern (),
	binary find_things_extern (),
	binary flatten_extralibs_wrapper (),
	binary flatten_extralibs (),
	binary get_sanitized (),
	binary hostcc_e (),
	binary hostcc_o (),
	binary icc_flags (),
	binary icl_flags (),
	binary is_in (),
	binary ld_o (),
	binary log_file (),
	binary log (),
	binary map (),
	binary mktemp (),
	binary msvc_common_flags (),
	binary msvc_flags (),
	binary popvar (),
	binary prepend (),
	binary print_config (),
	binary print_enabled_components (),
	binary print_enabled (),
	binary print_in_columns (),
	binary print_include (),
	binary probe_arm_arch (),
	binary probe_cc (),
	binary probe_libc (),
	binary probe_x86asm (),
	binary pushvar (),
	binary rand_list (),
	binary remove_suffix (),
	binary reorder_by (),
	binary requested (),
	binary request (),
	binary require_cc (),
	binary require_cpp_condition (),
	binary require_cpp (),
	binary require_headers (),
	binary require_pkg_config (),
	binary require (),
	binary resolve (),
	binary reverse (),
	binary sanitize_var_name (),
	binary set_all (),
	binary set_ccvars (),
	binary set_default (),
	binary set_sanitized (),
	binary set_weak (),
	binary sh_quote (),
	binary show_help (),
	binary show_list (),
	binary suncc_flags (),
	binary test_as (),
	binary test_cc (),
	binary test_cflags_cc (),
	binary test_cflags (),
	binary test_cmd (),
	binary test_code (),
	binary test_cpp_condition (),
	binary test_cpp (),
	binary test_cxx (),
	binary test_exec (),
	binary test_host_cc (),
	binary test_host_cpp_condition (),
	binary test_host_cpp (),
	binary test_ldflags (),
	binary test_ld (),
	binary test_objcc (),
	binary test_objcflags (),
	binary test_pkg_config (),
	binary test_stat (),
	binary test_stripflags (),
	binary test_x86asm (),
	binary tmpfile (),
	binary tolower (),
	binary toupper (),
	binary try_exec (),
	binary unique (),
	binary warn_if_gets_disabled (),
	binary warn (),
	binary x86asm_o (),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	binary toupper (),
	binary setup_find_stream_info_opts (0: binary codec_opts, 1: binary s),
	binary filter_codec_opts (0: binary codec_id, 1: binary codec, 2: binary opts, 3: binary s, 4: binary st),
	binary get_preset_file (0: string filename, 1: binary codec_name, 2: binary preset_name, 3: i32 is_path, 4: i64 filename_size),
	double get_rotation (0: binary st),
	double parse_number_or_die (0: binary context, 1: binary numstr, 2: double max, 3: double min, 4: i32 type),
	i64 parse_time_or_die (0: binary context, 1: binary timestr, 2: i32 is_duration),
	i32 check_stream_specifier (0: binary s, 1: binary st, 2: binary spec),
	i32 locate_option (0: binary argv, 1: binary options, 2: binary optname, 3: i32 argc),
	i32 opt_cpuflags (0: binary arg, 1: binary opt, 2: binary optctx),
	i32 opt_default (0: binary arg, 1: binary opt, 2: binary optctx),
	i32 opt_loglevel (0: binary arg, 1: binary opt, 2: binary optctx),
	i32 opt_max_alloc (0: binary arg, 1: binary opt, 2: binary optctx),
	i32 opt_report (0: binary opt),
	i32 opt_timelimit (0: binary arg, 1: binary opt, 2: binary optctx),
	i32 parse_optgroup (0: binary g, 1: binary optctx),
	i32 parse_option (0: binary options, 1: binary arg, 2: binary opt, 3: binary optctx),
	i32 read_yesno (),
	i32 show_bsfs (0: binary arg, 1: binary opt, 2: binary optctx),
	i32 show_buildconf (0: binary arg, 1: binary opt, 2: binary optctx),
	i32 show_codecs (0: binary arg, 1: binary opt, 2: binary optctx),
	i32 show_colors (0: binary arg, 1: binary opt, 2: binary optctx),
	i32 show_decoders (0: binary arg, 1: binary opt, 2: binary optctx),
	i32 show_demuxers (0: binary arg, 1: binary opt, 2: binary optctx),
	i32 show_devices (0: binary arg, 1: binary opt, 2: binary optctx),
	i32 show_encoders (0: binary arg, 1: binary opt, 2: binary optctx),
	i32 show_filters (0: binary arg, 1: binary opt, 2: binary optctx),
	i32 show_formats (0: binary arg, 1: binary opt, 2: binary optctx),
	i32 show_help (0: binary arg, 1: binary opt, 2: binary optctx),
	i32 show_layouts (0: binary arg, 1: binary opt, 2: binary optctx),
	i32 show_license (0: binary arg, 1: binary opt, 2: binary optctx),
	i32 show_muxers (0: binary arg, 1: binary opt, 2: binary optctx),
	i32 show_pix_fmts (0: binary arg, 1: binary opt, 2: binary optctx),
	i32 show_protocols (0: binary arg, 1: binary opt, 2: binary optctx),
	i32 show_sample_fmts (0: binary arg, 1: binary opt, 2: binary optctx),
	i32 show_sinks (0: binary arg, 1: binary opt, 2: binary optctx),
	i32 show_sources (0: binary arg, 1: binary opt, 2: binary optctx),
	i32 show_version (0: binary arg, 1: binary opt, 2: binary optctx),
	i32 split_commandline (0: binary octx, 1: binary argv, 2: binary options, 3: binary groups, 4: i32 argc, 5: i32 nb_groups),
	binary grow_array (0: binary size, 1: i32 elem_size, 2: i32 new_size, 3: binary array),
	void exit_program (0: i32 ret),
	void init_dynload (),
	void init_opts (),
	void log_callback_help (0: binary fmt, 1: i32 level, 2: binary vl, 3: binary ptr),
	void parse_loglevel (0: binary argv, 1: binary options, 2: i32 argc),
	void parse_options (0: binary argv, 1: binary options, 2: i32 argc, 3: binary parse_arg_function, 4: binary optctx),
	void prepare_app_arguments (0: binary argv_ptr, 1: binary argv_ptr, 2: binary argc_ptr, 3: binary argc_ptr),
	void print_error (0: binary filename, 1: i32 err),
	void register_exit (0: binary cb),
	void show_banner (0: binary argv, 1: binary options, 2: i32 argc),
	void show_help_children (0: binary class, 1: i32 flags),
	void show_help_options (0: binary options, 1: binary msg, 2: i32 alt_flags, 3: i32 rej_flags, 4: i32 req_flags),
	void uninit_opts (),
	void uninit_parse_context (0: binary octx),
	i32 guess_input_channel_layout (0: binary ist),
	i32 main (0: binary argv, 1: i32 argc),
	void assert_avoptions (0: binary m),
	void remove_avoptions (0: binary a, 1: binary b),
	void sub2video_update (0: binary sub, 1: binary ist),
	void term_exit (),
	void term_init (),
	i32 cuvid_init (0: binary avctx),
	binary DEF_CHOOSE_FORMAT (0: binary AVSampleFormat),
	binary choose_pixel_fmt (0: binary target, 1: binary codec, 2: binary enc_ctx, 3: binary st),
	i32 configure_filtergraph (0: binary fg),
	i32 configure_output_filter (0: binary out, 1: binary fg, 2: binary ofilter),
	i32 filtergraph_is_simple (0: binary fg),
	i32 ifilter_parameters_from_frame (0: binary ifilter, 1: binary frame),
	i32 init_complex_filtergraph (0: binary fg),
	i32 ist_in_filtergraph (0: binary fg, 1: binary ist),
	void check_filter_outputs (),
	void choose_sample_fmt (0: binary codec, 1: binary st),
	binary hw_device_get_by_name (0: binary name),
	i32 hw_device_init_from_string (0: binary dev_out, 1: binary arg),
	i32 hw_device_setup_for_decode (0: binary ist),
	i32 hw_device_setup_for_encode (0: binary ost),
	i32 hwaccel_decode_init (0: binary avctx),
	void hw_device_free_all (),
	i32 ffmpeg_parse_options (0: binary argv, 1: i32 argc),
	void show_help_default (0: binary arg, 1: binary opt),
	void show_usage (),
	i32 qsv_init (0: binary s),
	i32 videotoolbox_init (0: binary s),
	i64 get_valid_channel_layout (0: i64 channel_layout, 1: i32 channels),
	i32 cmp_audio_fmts (0: binary fmt1, 1: binary fmt2, 2: i64 channel_count1, 3: i64 channel_count2),
	i32 compute_mod (0: i32 a, 1: i32 b),
	i32 main (0: binary argv, 1: i32 argc),
	void fill_rectangle (0: i32 h, 1: i32 w, 2: i32 x, 3: i32 y),
	void show_help_default (0: binary arg, 1: binary opt),
	string upcase_string (0: string dst, 1: binary src, 2: i64 dst_size),
	i32 check_section_show_entries (0: i32 section_id),
	i32 main (0: binary argv, 1: i32 argc),
	i32 show_tags (0: binary tags, 1: binary w, 2: i32 section_id),
	i32 validate_string (0: binary wctx, 1: binary dstp, 2: binary src),
	i32 writer_print_string (0: binary wctx, 1: binary key, 2: binary val, 3: i32 flags),
	void json_print_item_str (0: binary wctx, 1: binary key, 2: binary value),
	void mark_section_show_entries (0: binary entries, 1: SectionID section_id, 2: i32 show_all_entries),
	void show_help_default (0: binary arg, 1: binary opt),
	void writer_print_integer (0: binary wctx, 1: binary key, 2: binary val),
	void writer_print_rational (0: AVRational q, 1: binary wctx, 2: byte sep, 3: binary key),
	void writer_print_section_footer (0: binary wctx),
	void writer_print_section_header (0: binary wctx, 1: i32 section_id),
	void idct_put (0: binary f, 1: i32 x, 2: i32 y),
	void mcdc (0: binary src, 1: i32 h, 2: i32 log2w, 3: i32 scale, 4: i32 stride, 5: binary dst, 6: binary dc),
	i32 ff_aac_ac3_parse (0: binary avctx, 1: binary s1, 2: binary poutbuf, 3: binary buf, 4: binary poutbuf_size, 5: i32 buf_size),
	void codebook_trellis_rate (0: binary s, 1: binary sce, 2: binary lambda, 3: i32 group_len, 4: i32 win),
	i32 ff_pns_bits (0: binary sce, 1: i32 g, 2: i32 w),
	void search_for_quantizers_twoloop (0: binary s, 1: binary avctx, 2: binary sce, 3: binary lambda),
	binary VMUL2S (0: binary scale, 1: binary v, 2: binary dst, 3: binary idx, 4: binary sign),
	binary VMUL2 (0: binary scale, 1: binary v, 2: binary dst, 3: binary idx),
	binary VMUL4S (0: binary scale, 1: binary v, 2: binary dst, 3: binary idx, 4: binary sign),
	binary VMUL4 (0: binary scale, 1: binary v, 2: binary dst, 3: binary idx),
	i32 latm_get_value (0: binary b),
	binary DEC_SPAIR (0: binary dst, 1: binary idx),
	binary DEC_SQUAD (0: binary dst, 1: binary idx),
	binary DEC_UPAIR (0: binary dst, 1: binary idx, 2: binary sign),
	binary DEC_UQUAD (0: binary dst, 1: binary idx, 2: binary sign),
	void relative_align_get_bits (0: binary gb, 1: i32 reference_position),
	binary WINDOW_FUNC (),
	binary WINDOW_FUNC (),
	binary WINDOW_FUNC (),
	binary WINDOW_FUNC (),
	void ff_quantize_band_cost_cache_init (0: binary s),
	binary ff_aac_is_encoding_err (0: binary s, 1: binary cpe, 2: double ener01, 3: double ener0, 4: double ener1, 5: i32 g, 6: i32 phase, 7: i32 start, 8: i32 use_pcoeffs, 9: i32 w),
	void ff_aac_search_for_is (0: binary s, 1: binary avctx, 2: binary cpe),
	void ff_aac_adjust_common_ltp (0: binary s, 1: binary cpe),
	void ff_aac_encode_ltp_info (0: binary s, 1: binary sce, 2: i32 common_window),
	void ff_aac_ltp_insert_new_frame (0: binary s),
	void ff_aac_search_for_ltp (0: binary s, 1: binary sce, 2: i32 common_window),
	void ff_aac_update_ltp (0: binary s, 1: binary sce),
	double flt16_even (0: double pf),
	double flt16_round (0: double pf),
	double flt16_trunc (0: double pf),
	i32 update_counters (0: binary ics, 1: i32 inc),
	void ff_aac_adjust_common_pred (0: binary s, 1: binary cpe),
	void ff_aac_apply_main_pred (0: binary s, 1: binary sce),
	void ff_aac_encode_main_pred (0: binary s, 1: binary sce),
	void ff_aac_search_for_pred (0: binary s, 1: binary sce),
	void predict (0: binary ps, 1: binary coef, 2: binary rcoef, 3: i32 set),
	void reset_all_predictors (0: binary ps),
	void reset_predict_state (0: binary ps),
	void reset_predictor_group (0: binary sce, 1: i32 group_num),
	binary quantize_and_encode_band_cost_template (0: binary s, 1: binary pb, 2: binary in, 3: binary scaled, 4: binary ROUNDING, 5: binary lambda, 6: binary uplim, 7: binary energy, 8: binary out, 9: binary bits, 10: i32 BT_ESC, 11: i32 BT_NOISE, 12: i32 BT_PAIR, 13: i32 BT_STEREO, 14: i32 BT_UNSIGNED, 15: i32 BT_ZERO, 16: i32 cb, 17: i32 scale_idx, 18: i32 size),
	double quantize_and_encode_band_cost_NONE (0: binary s, 1: binary pb, 2: binary in, 3: binary scaled, 4: binary lambda, 5: binary uplim, 6: binary energy, 7: binary quant, 8: binary bits, 9: i32 cb, 10: i32 scale_idx, 11: i32 size),
	double quantize_band_cost (0: binary s, 1: binary in, 2: binary scaled, 3: binary lambda, 4: binary uplim, 5: binary energy, 6: binary bits, 7: i32 cb, 8: i32 rtz, 9: i32 scale_idx, 10: i32 size),
	i32 quantize_band_cost_bits (0: binary s, 1: binary in, 2: binary scaled, 3: binary lambda, 4: binary uplim, 5: binary energy, 6: binary bits, 7: i32 cb, 8: i32 rtz, 9: i32 scale_idx, 10: i32 size),
	void quantize_and_encode_band (0: binary s, 1: binary pb, 2: binary in, 3: binary lambda, 4: binary out, 5: i32 cb, 6: i32 rtz, 7: i32 scale_idx, 8: i32 size),
	double quantize_band_cost_cached (0: binary s, 1: binary in, 2: binary scaled, 3: binary lambda, 4: binary uplim, 5: binary energy, 6: binary bits, 7: i32 cb, 8: i32 g, 9: i32 rtz, 10: i32 scale_idx, 11: i32 size, 12: i32 w),
	i32 compress_coeffs (0: binary coef, 1: i32 c_bits, 2: i32 order),
	void ff_aac_apply_tns (0: binary s, 1: binary sce),
	void ff_aac_encode_tns_info (0: binary s, 1: binary sce),
	void ff_aac_search_for_tns (0: binary s, 1: binary sce),
	void quantize_coefs (0: binary coef, 1: binary lpc, 2: binary idx, 3: i32 c_bits, 4: i32 order),
	binary bval2bmax (0: double b),
	binary lcg_random (0: binary previous_val),
	double find_form_factor (0: binary scaled, 1: double nzslope, 2: double thresh, 3: i32 group_len, 4: i32 swb_size),
	double find_max_val (0: binary scaled, 1: i32 group_len, 2: i32 swb_size),
	double pos_pow34 (0: double a),
	i32 ff_sfdelta_can_remove_band (0: binary sce, 1: binary nextband, 2: i32 band, 3: i32 prev_sf),
	i32 ff_sfdelta_can_replace (0: binary sce, 1: binary nextband, 2: i32 band, 3: i32 new_sf, 4: i32 prev_sf),
	i32 find_min_book (0: double maxval, 1: i32 sf),
	i32 quant_array_idx (0: binary arr, 1: binary val, 2: binary num),
	i32 quant (0: binary Q, 1: binary rounding, 2: double coef),
	byte coef2maxsf (0: double coef),
	byte coef2minsf (0: double coef),
	void abs_pow34_v (0: binary in, 1: binary size, 2: binary out),
	void ff_init_nextband_map (0: binary sce, 1: binary nextband),
	void ff_nextband_remove (0: i32 band, 1: i32 prevband, 2: binary nextband),
	void quantize_bands (0: binary in, 1: binary scaled, 2: binary Q34, 3: binary rounding, 4: binary out, 5: i32 is_signed, 6: i32 maxval, 7: i32 size),
	binary AAC_RENAME (),
	binary AAC_RENAME (),
	i32 AAC_RENAME (),
	i32 AAC_RENAME (),
	void make_filters_from_proto (0: binary proto, 1: i32 bands),
	void ps_tableinit (),
	binary make_filters_from_proto (0: binary proto, 1: i32 bands),
	binary ps_tableinit (),
	i32 main (),
	binary AAC_RENAME (),
	binary AAC_RENAME (),
	binary AAC_RENAME (),
	binary AAC_RENAME (),
	i32 AAC_RENAME (),
	i32 in_table_int16 (0: binary table, 1: i16 needle, 2: i32 last_el),
	void AAC_RENAME (),
	void ff_aac_tableinit (),
	binary ff_psdsp_init_aarch64 (0: binary s),
	binary get_cabac_inline_aarch64 (0: binary c, 1: binary state),
	binary ff_fft_init_aarch64 (0: binary s),
	binary ff_fmt_convert_init_aarch64 (0: binary avctx, 1: binary c),
	binary ff_h264chroma_init_aarch64 (0: binary c, 1: i32 bit_depth),
	binary ff_h264dsp_init_aarch64 (0: binary c, 1: binary bit_depth, 2: binary chroma_format_idc),
	binary ff_h264_pred_init_aarch64 (0: binary h, 1: binary chroma_format_idc, 2: i32 bit_depth, 3: i32 codec_id),
	binary ff_h264qpel_init_aarch64 (0: binary c, 1: i32 bit_depth),
	binary ff_hpeldsp_init_aarch64 (0: binary c, 1: i32 flags),
	binary ff_idctdsp_init_aarch64 (0: binary avctx, 1: binary c, 2: binary high_bit_depth),
	binary ff_mpadsp_init_aarch64 (0: binary s),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary ff_rv40dsp_init_aarch64 (0: binary c),
	binary ff_sbrdsp_init_aarch64 (0: binary s),
	binary ff_synth_filter_init_aarch64 (0: binary s),
	binary ff_vc1dsp_init_aarch64 (0: binary dsp),
	binary ff_videodsp_init_aarch64 (0: binary ctx, 1: i32 bpc),
	binary ff_vorbisdsp_init_aarch64 (0: binary c),
	binary ff_vp78dsp_init_aarch64 (0: binary dsp),
	binary ff_vp8dsp_init_aarch64 (0: binary dsp),
	binary INIT_FUNC (0: binary dsp),
	binary ff_vp9dsp_init_aarch64 (0: binary dsp, 1: i32 bpp),
	i32 calc_lowcomp1 (0: i32 a, 1: i32 b0, 2: i32 b1, 3: i32 c),
	i32 calc_lowcomp (0: i32 a, 1: i32 b0, 2: i32 b1, 3: i32 bin),
	i32 ff_ac3_bit_alloc_calc_mask (0: binary s, 1: binary band_psd, 2: binary mask, 3: i32 dba_mode, 4: i32 dba_nsegs, 5: i32 end, 6: i32 fast_gain, 7: i32 is_lfe, 8: i32 start, 9: binary dba_lengths, 10: binary dba_offsets, 11: binary dba_values),
	void ff_ac3_bit_alloc_calc_psd (0: binary band_psd, 1: binary psd, 2: binary exp, 3: i32 end, 4: i32 start),
	i32 av_ac3_parse_header (0: binary buf, 1: i64 size, 2: binary frame_size, 3: binary bitstream_id),
	i32 avpriv_ac3_parse_header (0: binary phdr, 1: binary buf, 2: i64 size),
	i32 ff_ac3_parse_header (0: binary hdr, 1: binary gbc),
	i32 coupling_coordinates (0: binary s, 1: i32 blk),
	i32 coupling_strategy (0: binary s, 1: i32 blk, 2: binary bit_alloc_stages),
	i32 spx_strategy (0: binary s, 1: i32 blk),
	i32 symmetric_dequant (0: i32 code, 1: i32 levels),
	void decode_transform_coeffs_ch (0: binary s, 1: i32 blk, 2: i32 ch, 3: binary m),
	void decode_transform_coeffs (0: binary s, 1: i32 blk),
	void do_imdct (0: binary s, 1: i32 channels, 2: i32 offset),
	void spx_coordinates (0: binary s),
	binary ff_ac3dsp_init (0: binary c, 1: i32 bit_exact),
	void ff_ac3dsp_downmix_fixed (0: binary c, 1: binary matrix, 2: binary samples, 3: i32 in_ch, 4: i32 len, 5: i32 out_ch),
	void ff_ac3dsp_downmix (0: binary c, 1: binary matrix, 2: binary samples, 3: i32 in_ch, 4: i32 len, 5: i32 out_ch),
	binary ff_ac3_encode_close (0: binary avctx),
	binary ff_ac3_encode_init (0: binary avctx),
	i32 asym_quant (0: i32 c, 1: i32 e, 2: i32 qbits),
	i32 ff_ac3_compute_bit_allocation (0: binary s),
	i32 ff_ac3_validate_metadata (0: binary s),
	i32 sym_quant (0: i32 c, 1: i32 e, 2: i32 levels),
	void ff_ac3_adjust_frame_size (0: binary s),
	void ff_ac3_apply_rematrixing (0: binary s),
	void ff_ac3_compute_coupling_strategy (0: binary s),
	void ff_ac3_group_exponents (0: binary s),
	void ff_ac3_output_frame (0: binary s, 1: binary frame),
	void ff_ac3_process_exponents (0: binary s),
	void ff_ac3_quantize_mantissas (0: binary s),
	binary ff_ac3_fixed_mdct_init (0: binary s),
	binary ff_ac3_fixed_mdct_end (0: binary s),
	binary ff_ac3_float_encode_init (0: binary avctx),
	binary ff_ac3_float_mdct_init (0: binary s),
	binary ff_ac3_float_mdct_end (0: binary s),
	i32 AC3_NAME (),
	i32 AC3_NAME (),
	void ff_acelp_apply_order_2_transfer_function (0: binary in, 1: binary pole_coeffs, 2: binary zero_coeffs, 3: binary out, 4: binary mem, 5: double gain, 6: i32 n),
	void ff_acelp_filter_init (0: binary c),
	void ff_acelp_high_pass_filter (0: binary in, 1: binary out, 2: binary hpf_f, 3: i32 length),
	void ff_acelp_interpolatef (0: binary filter_coeffs, 1: binary in, 2: binary out, 3: i32 filter_length, 4: i32 frac_pos, 5: i32 length, 6: i32 precision),
	void ff_acelp_interpolate (0: binary filter_coeffs, 1: binary in, 2: binary out, 3: i32 filter_length, 4: i32 frac_pos, 5: i32 length, 6: i32 precision),
	void ff_tilt_compensation (0: binary mem, 1: binary samples, 2: double tilt, 3: i32 size),
	double ff_amr_set_fixed_gain (0: binary pred_table, 1: binary prediction_error, 2: double energy_mean, 3: double fixed_gain_factor, 4: double fixed_mean_energy),
	i16 ff_acelp_decode_gain_code (0: binary adsp, 1: binary fc_v, 2: binary ma_prediction_coeff, 3: binary quant_energy, 4: i32 gain_corr_factor, 5: i32 ma_pred_order, 6: i32 mr_energy, 7: i32 subframe_size),
	i32 ff_acelp_decode_4bit_to_2nd_delay3 (0: i32 ac_index, 1: i32 pitch_delay_min),
	i32 ff_acelp_decode_5_6_bit_to_2nd_delay3 (0: i32 ac_index, 1: i32 pitch_delay_min),
	i32 ff_acelp_decode_6bit_to_2nd_delay6 (0: i32 ac_index, 1: i32 pitch_delay_min),
	i32 ff_acelp_decode_8bit_to_1st_delay3 (0: i32 ac_index),
	i32 ff_acelp_decode_9bit_to_1st_delay6 (0: i32 ac_index),
	void ff_acelp_update_past_gain (0: binary quant_energy, 1: i32 erasure, 2: i32 gain_corr_factor, 3: i32 log2_ma_pred_order),
	void ff_decode_pitch_lag (0: binary prev_lag_int, 1: binary subframe, 2: binary lag_frac, 3: binary lag_int, 4: i32 pitch_index, 5: i32 resolution, 6: i32 third_as_first),
	void ff_acelp_fc_pulse_per_track (0: binary tab1, 1: binary tab2, 2: binary fc_v, 3: i32 bits, 4: i32 pulse_count, 5: i32 pulse_indexes, 6: i32 pulse_signs),
	void ff_acelp_vectors_init (0: binary c),
	void ff_acelp_weighted_vector_sum (0: binary in_a, 1: binary in_b, 2: binary out, 3: i16 rounder, 4: i16 weight_coeff_a, 5: i16 weight_coeff_b, 6: i32 length, 7: i32 shift),
	void ff_adaptive_gain_control (0: binary in, 1: binary gain_mem, 2: binary out, 3: double alpha, 4: double speech_energ, 5: i32 size),
	void ff_clear_fixed_vector (0: binary in, 1: binary out, 2: i32 size),
	void ff_decode_10_pulses_35bits (0: binary fixed_sparse, 1: binary fixed_index, 2: binary gray_decode, 3: i32 bits, 4: i32 half_pulse_count),
	void ff_scale_vector_to_given_sum_of_squares (0: binary in, 1: binary n, 2: binary out, 3: double sum_of_squares),
	void ff_set_fixed_vector (0: binary in, 1: binary out, 2: double scale, 3: i32 size),
	void ff_weighted_vector_sumf (0: binary in_a, 1: binary in_b, 2: binary out, 3: double weight_coeff_a, 4: double weight_coeff_b, 5: i32 length),
	i16 adpcm_ct_expand_nibble (0: binary c, 1: byte nibble),
	i16 adpcm_ima_expand_nibble (0: binary c, 1: byte nibble, 2: i32 shift),
	i16 adpcm_ima_oki_expand_nibble (0: binary c, 1: i32 nibble),
	i16 adpcm_ima_wav_expand_nibble (0: binary c, 1: binary gb, 2: i32 bps),
	i16 adpcm_ms_expand_nibble (0: binary c, 1: i32 nibble),
	i16 adpcm_mtaf_expand_nibble (0: binary c, 1: byte nibble),
	i16 adpcm_sbpro_expand_nibble (0: binary c, 1: byte nibble, 2: i32 shift, 3: i32 size),
	i16 adpcm_yamaha_expand_nibble (0: binary c, 1: byte nibble),
	i32 adpcm_ima_qt_expand_nibble (0: binary c, 1: i32 nibble, 2: i32 shift),
	byte adpcm_ima_compress_sample (0: binary c, 1: i16 sample),
	byte adpcm_ima_qt_compress_sample (0: binary c, 1: i16 sample),
	byte adpcm_ms_compress_sample (0: binary c, 1: i16 sample),
	byte adpcm_yamaha_compress_sample (0: binary c, 1: i16 sample),
	i32 ff_adts_header_parse (0: binary hdr, 1: binary gbc),
	i32 av_adts_header_parse (0: binary buf, 1: binary samples, 2: binary frames),
	i32 ff_adx_decode_header (0: binary avctx, 1: binary buf, 2: binary coeff, 3: binary header_size, 4: i32 bufsize),
	void ff_adx_calculate_coeffs (0: binary coeff, 1: i32 bits, 2: i32 cutoff, 3: i32 sample_rate),
	i32 sign_only (0: i32 v),
	binary decode_scalar (0: binary gb, 1: i32 bps, 2: i32 k),
	binary ff_alacdsp_init (0: binary c),
	binary av_codec_next (0: binary c),
	binary avcodec_find_decoder_by_name (0: binary name),
	binary avcodec_find_decoder (0: binary id),
	binary avcodec_find_encoder_by_name (0: binary name),
	binary avcodec_find_encoder (0: binary id),
	binary avcodec_register (0: binary codec),
	binary av_codec_iterate (0: binary opaque),
	void avcodec_register_all (),
	i64 BYTE_VEC (0: i64 x),
	i64 WORD_VEC (0: i64 x),
	binary ff_blockdsp_init_alpha (0: binary c),
	binary ff_hpeldsp_init_alpha (0: binary c, 1: i32 flags),
	i64 avg2_no_rnd (0: i64 a, 1: i64 b),
	i64 avg2 (0: i64 a, 1: i64 b),
	binary ff_idctdsp_init_alpha (0: binary avctx, 1: binary c, 2: binary high_bit_depth),
	binary ff_me_cmp_init_alpha (0: binary avctx, 1: binary c),
	i64 avg2 (0: i64 a, 1: i64 b),
	i64 avg4 (0: i64 l1, 1: i64 l2, 2: i64 l3, 3: i64 l4),
	binary ff_mpv_common_init_axp (0: binary s),
	binary ff_pixblockdsp_init_alpha (0: binary avctx, 1: binary c, 2: binary high_bit_depth),
	i32 idct_row (0: binary row),
	void ff_simple_idct_add_axp (0: binary block, 1: binary line_size, 2: binary dest),
	void ff_simple_idct_axp (0: binary block),
	void ff_simple_idct_put_axp (0: binary block, 1: binary line_size, 2: binary dest),
	void idct_col2 (0: binary col),
	void idct_col (0: binary col),
	i32 als_weighting (0: binary gb, 1: i32 k, 2: i32 off),
	binary ff_amf_encode_close (0: binary avctx),
	i32 ff_amf_encode_init (0: binary avctx),
	i32 ff_amf_receive_packet (0: binary avctx, 1: binary avpkt),
	i32 ff_amf_send_frame (0: binary avctx, 1: binary frame),
	i32 timestamp_queue_enqueue (0: binary avctx, 1: i64 timestamp),
	void ff_amr_bit_reorder (0: binary ord_table, 1: binary data, 2: i32 size, 3: binary out),
	void decode_1p_track (0: binary out, 1: i32 code, 2: i32 m, 3: i32 off),
	void decode_2p_track (0: binary out, 1: i32 code, 2: i32 m, 3: i32 off),
	i32 op (0: binary gb, 1: binary dst_end, 2: binary x, 3: i32 count, 4: i32 linesize, 5: i32 pixel, 6: i32 width, 7: binary dst),
	i32 APESIGN (0: i32 x),
	i32 ape_decode_value_3860 (0: binary ctx, 1: binary rice, 2: binary gb),
	i32 ape_decode_value_3900 (0: binary ctx, 1: binary rice),
	i32 ape_decode_value_3990 (0: binary ctx, 1: binary rice),
	i32 get_rice_ook (0: binary gb, 1: i32 k),
	i32 range_decode_bits (0: binary ctx, 1: i32 n),
	i32 range_decode_culfreq (0: binary ctx, 1: i32 tot_f),
	i32 range_decode_culshift (0: binary ctx, 1: i32 shift),
	i32 range_get_symbol (0: binary ctx, 1: binary counts_diff, 2: binary counts),
	void range_dec_normalize (0: binary ctx),
	void range_decode_update (0: binary ctx, 1: i32 lt_f, 2: i32 sy_f),
	void range_start_decoding (0: binary ctx),
	void update_rice (0: binary rice, 1: binary x),
	binary VMUL2S (0: binary scale, 1: binary v, 2: binary dst, 3: binary idx, 4: binary sign),
	binary VMUL2 (0: binary scale, 1: binary v, 2: binary dst, 3: binary idx),
	binary VMUL4S (0: binary scale, 1: binary v, 2: binary dst, 3: binary idx, 4: binary sign),
	binary VMUL4 (0: binary scale, 1: binary v, 2: binary dst, 3: binary idx),
	binary ff_psdsp_init_arm (0: binary s),
	binary ff_ac3dsp_init_arm (0: binary c, 1: i32 bit_exact),
	binary ff_audiodsp_init_arm (0: binary c),
	binary ff_audiodsp_init_neon (0: binary c),
	binary ff_blockdsp_init_arm (0: binary c),
	binary ff_blockdsp_init_neon (0: binary c),
	binary get_cabac_inline_arm (0: binary c, 1: binary state),
	i32 decode_blockcodes (0: binary values, 1: i32 code1, 2: i32 code2, 3: i32 levels),
	binary ff_fft_fixed_init_arm (0: binary s),
	binary ff_fft_init_arm (0: binary s),
	binary ff_flacdsp_init_arm (0: binary fmt, 1: binary c, 2: i32 bps, 3: i32 channels),
	binary ff_fmt_convert_init_arm (0: binary avctx, 1: binary c),
	binary ff_g722dsp_init_arm (0: binary dsp),
	binary ff_h264chroma_init_arm (0: binary c, 1: i32 bit_depth),
	binary ff_h264dsp_init_arm (0: binary c, 1: binary bit_depth, 2: binary chroma_format_idc),
	binary ff_h264_pred_init_arm (0: binary h, 1: binary chroma_format_idc, 2: i32 bit_depth, 3: i32 codec_id),
	binary ff_h264qpel_init_arm (0: binary c, 1: i32 bit_depth),
	binary ff_hevc_dsp_init_arm (0: binary c, 1: binary bit_depth),
	binary ff_hevc_dsp_init_neon (0: binary c, 1: binary bit_depth),
	void ff_hevc_put_qpel_bi_neon_wrapper (0: binary src2, 1: binary mx, 2: binary my, 3: i32 height, 4: i32 width, 5: binary dststride, 6: binary srcstride, 7: binary dst, 8: binary src),
	void ff_hevc_put_qpel_neon_wrapper (0: binary dst, 1: binary mx, 2: binary my, 3: i32 height, 4: i32 width, 5: binary srcstride, 6: binary src),
	void ff_hevc_put_qpel_uni_neon_wrapper (0: binary mx, 1: binary my, 2: i32 height, 3: i32 width, 4: binary dststride, 5: binary srcstride, 6: binary dst, 7: binary src),
	void ff_hevc_sao_band_filter_neon_8_wrapper (0: binary sao_offset_val, 1: i32 height, 2: i32 sao_left_class, 3: i32 width, 4: binary stride_dst, 5: binary stride_src, 6: binary _dst, 7: binary _src),
	void ff_hevc_sao_edge_filter_neon_8_wrapper (0: binary sao_offset_val, 1: i32 eo, 2: i32 height, 3: i32 width, 4: binary stride_dst, 5: binary _dst, 6: binary _src),
	binary ff_hpeldsp_init_armv6 (0: binary c, 1: i32 flags),
	binary ff_hpeldsp_init_neon (0: binary c, 1: i32 flags),
	binary ff_idctdsp_init_arm (0: binary avctx, 1: binary c, 2: binary high_bit_depth),
	binary ff_idctdsp_init_armv5te (0: binary avctx, 1: binary c, 2: binary high_bit_depth),
	binary ff_idctdsp_init_armv6 (0: binary avctx, 1: binary c, 2: binary high_bit_depth),
	binary ff_idctdsp_init_neon (0: binary avctx, 1: binary c, 2: binary high_bit_depth),
	binary ff_llauddsp_init_arm (0: binary c),
	binary FASTDIV (0: i32 a, 1: i32 b),
	binary MUL16 (0: i32 ra, 1: i32 rb),
	binary MULH (0: i32 a, 1: i32 b),
	binary mid_pred (0: i32 a, 1: i32 b, 2: i32 c),
	binary ff_me_cmp_init_arm (0: binary avctx, 1: binary c),
	binary ff_mlpdsp_init_arm (0: binary c),
	binary ff_mpadsp_init_arm (0: binary s),
	binary ff_mpv_common_init_arm (0: binary s),
	binary ff_mpv_common_init_armv5te (0: binary s),
	void dct_unquantize_h263_helper_c (0: binary block, 1: i32 count, 2: i32 qadd, 3: i32 qmul),
	binary ff_mpegvideoencdsp_init_arm (0: binary avctx, 1: binary c),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary ff_pixblockdsp_init_arm (0: binary avctx, 1: binary c, 2: binary high_bit_depth),
	binary ff_rdft_init_arm (0: binary s),
	binary ff_rv34dsp_init_arm (0: binary c),
	binary ff_rv40dsp_init_arm (0: binary c),
	binary ff_sbcdsp_init_arm (0: binary s),
	binary ff_sbrdsp_init_arm (0: binary s),
	binary ff_synth_filter_init_arm (0: binary s),
	binary ff_vc1dsp_init_arm (0: binary dsp),
	binary ff_vc1dsp_init_neon (0: binary dsp),
	binary ff_videodsp_init_arm (0: binary ctx, 1: i32 bpc),
	binary ff_videodsp_init_armv5te (0: binary ctx, 1: i32 bpc),
	binary ff_vorbisdsp_init_arm (0: binary c),
	binary ff_vp3dsp_init_arm (0: binary c, 1: i32 flags),
	i32 vp56_rac_get_prob_armv6 (0: binary c, 1: i32 pr),
	i32 vp56_rac_get_prob_branchy_armv6 (0: binary c, 1: i32 pr),
	binary ff_vp6dsp_init_arm (0: binary s),
	binary ff_vp78dsp_init_arm (0: binary dsp),
	binary ff_vp8dsp_init_arm (0: binary dsp),
	binary ff_vp78dsp_init_armv6 (0: binary dsp),
	binary ff_vp8dsp_init_armv6 (0: binary dsp),
	binary ff_vp78dsp_init_neon (0: binary dsp),
	binary ff_vp8dsp_init_neon (0: binary dsp),
	binary INIT_FUNC (0: binary dsp),
	binary ff_vp9dsp_init_arm (0: binary dsp, 1: i32 bpp),
	string ff_ass_get_dialog (0: binary speaker, 1: binary style, 2: binary text, 3: i32 layer, 4: i32 readorder),
	i32 ff_ass_add_rect (0: binary sub, 1: binary dialog, 2: binary speaker, 3: binary style, 4: i32 layer, 5: i32 readorder),
	i32 ff_ass_subtitle_header_default (0: binary avctx),
	i32 ff_ass_subtitle_header (0: binary avctx, 1: binary font, 2: i32 alignment, 3: i32 back_color, 4: i32 bold, 5: i32 border_style, 6: i32 color, 7: i32 font_size, 8: i32 italic, 9: i32 underline),
	void ff_ass_bprint_text_event (0: binary buf, 1: binary linebreaks, 2: binary p, 3: i32 keep_ass_markup, 4: i32 size),
	void ff_ass_decoder_flush (0: binary avctx),
	binary ff_ass_split_dialog2 (0: binary ctx, 1: binary buf),
	binary ff_ass_split_dialog (0: binary ctx, 1: binary buf, 2: binary number, 3: i32 cache),
	binary ff_ass_split (0: binary buf),
	binary ff_ass_style_get (0: binary ctx, 1: binary style),
	binary skip_space (0: binary buf),
	i32 ff_ass_split_override_codes (0: binary callbacks, 1: binary buf, 2: binary priv),
	i32 is_eol (0: byte buf),
	void ff_ass_free_dialog (0: binary dialogp),
	void ff_ass_split_free (0: binary ctx),
	binary ff_asv_common_init (0: binary avctx),
	i32 asv1_decode_block (0: binary a, 1: binary block),
	i32 asv1_get_level (0: binary gb),
	i32 asv2_decode_block (0: binary a, 1: binary block),
	i32 asv2_get_bits (0: binary gb, 1: i32 n),
	i32 asv2_get_level (0: binary gb),
	i32 decode_mb (0: binary a),
	void idct_put (0: binary a, 1: binary frame, 2: i32 mb_x, 3: i32 mb_y),
	i32 encode_mb (0: binary a),
	void asv1_encode_block (0: binary a, 1: binary block),
	void asv1_put_level (0: binary pb, 1: i32 level),
	void asv2_encode_block (0: binary a, 1: binary block),
	void asv2_put_bits (0: binary pb, 1: i32 n, 2: i32 v),
	void asv2_put_level (0: binary a, 1: binary pb, 2: i32 level),
	void dct_get (0: binary a, 1: binary frame, 2: i32 mb_x, 3: i32 mb_y),
	binary ff_atrac_generate_tables (),
	binary ff_atrac_init_gain_compensation (0: binary gctx, 1: i32 id2exp_offset, 2: i32 loc_scale),
	void ff_atrac_gain_compensation (0: binary gctx, 1: binary gc_next, 2: binary gc_now, 3: binary in, 4: binary out, 5: binary prev, 6: i32 num_samples),
	void ff_atrac_iqmf (0: binary delayBuf, 1: binary inhi, 2: binary inlo, 3: binary pOut, 4: binary temp, 5: binary nIn),
	binary ff_atrac3p_init_vlcs (),
	i32 ff_atrac3p_decode_channel_unit (0: binary avctx, 1: binary ctx, 2: binary gb, 3: i32 num_channels),
	void gainc_level_mode1m (0: binary ctx, 1: binary dst, 2: binary gb),
	void gainc_level_mode3s (0: binary dst, 1: binary ref),
	void gainc_loc_mode0 (0: binary ctx, 1: binary dst, 2: binary gb, 3: i32 pos),
	void gainc_loc_mode1 (0: binary ctx, 1: binary dst, 2: binary gb),
	void unpack_vq_shape (0: binary shape_vec, 1: binary dst, 2: i32 num_values, 3: i32 start_val),
	binary ff_atrac3p_init_imdct (0: binary avctx, 1: binary mdct_ctx),
	binary ff_atrac3p_init_wave_synth (),
	void ff_atrac3p_generate_tones (0: binary fdsp, 1: binary ch_unit, 2: binary out, 3: i32 ch_num, 4: i32 sb),
	void ff_atrac3p_imdct (0: binary fdsp, 1: binary mdct_ctx, 2: binary pIn, 3: binary pOut, 4: i32 sb, 5: i32 wind_id),
	void ff_atrac3p_ipqf (0: binary hist, 1: binary dct_ctx, 2: binary in, 3: binary out),
	void ff_atrac3p_power_compensation (0: binary fdsp, 1: binary ctx, 2: binary sp, 3: i32 ch_index, 4: i32 rng_index, 5: i32 sb),
	i32 parse_band_ext (0: binary b, 1: binary s, 2: binary gb, 3: i32 stereo),
	i32 parse_gradient (0: binary b, 1: binary s, 2: binary gb),
	i32 read_scalefactors (0: binary b, 1: binary c, 2: binary s, 3: binary gb, 4: i32 channel_idx, 5: i32 first_in_pkt),
	void apply_band_extension (0: binary b, 1: binary s, 2: binary stereo),
	void apply_intensity_stereo (0: binary b, 1: binary s, 2: binary stereo),
	void apply_scalefactors (0: binary b, 1: binary s, 2: binary stereo),
	void calc_codebook_idx (0: binary b, 1: binary c, 2: binary s),
	void calc_precision (0: binary b, 1: binary c, 2: binary s),
	void dequantize (0: binary b, 1: binary c, 2: binary s),
	void fill_with_noise (0: binary c, 1: binary s, 2: i32 count, 3: i32 start),
	void read_coeffs_coarse (0: binary b, 1: binary c, 2: binary s, 3: binary gb),
	void read_coeffs_fine (0: binary b, 1: binary c, 2: binary s, 3: binary gb),
	void scale_band_ext_coeffs (0: binary c, 1: binary e_unit, 2: binary s_unit, 3: binary sf),
	binary ff_af_queue_init (0: binary avctx, 1: binary afq),
	i32 ff_af_queue_add (0: binary afq, 1: binary f),
	void ff_af_queue_close (0: binary afq),
	void ff_af_queue_remove (0: binary afq, 1: binary duration, 2: binary pts, 3: i32 nb_samples),
	binary ff_audiodsp_init (0: binary c),
	i32 clipf_c_one (0: i32 a, 1: i32 maxisign, 2: i32 maxi, 3: i32 mini),
	i32 ff_av1_extract_obu (0: binary obu, 1: binary buf, 2: i32 length, 3: binary logctx),
	i32 ff_av1_packet_split (0: binary pkt, 1: binary buf, 2: i32 length, 3: binary logctx),
	void ff_av1_packet_uninit (0: binary pkt),
	i64 leb128 (0: binary gb),
	i32 get_obu_bit_length (0: binary buf, 1: i32 size, 2: i32 type),
	i32 parse_obu_header (0: binary buf, 1: binary spatial_id, 2: binary start_pos, 3: binary temporal_id, 4: binary type, 5: binary obu_size, 6: i32 buf_size),
	binary avcodec_dct_alloc (),
	binary avcodec_dct_get_class (),
	i32 avcodec_dct_init (0: binary dsp),
	binary av_dct_init (0: binary inverse, 1: i32 nbits),
	binary av_fft_init (0: i32 inverse, 1: i32 nbits),
	binary av_mdct_init (0: double scale, 1: i32 inverse, 2: i32 nbits),
	binary av_rdft_init (0: binary trans, 1: i32 nbits),
	binary av_dct_end (0: binary s),
	binary av_fft_end (0: binary s),
	binary av_mdct_end (0: binary s),
	binary av_rdft_end (0: binary s),
	void av_dct_calc (0: binary s, 1: binary data),
	void av_fft_calc (0: binary z, 1: binary s),
	void av_fft_permute (0: binary z, 1: binary s),
	void av_imdct_calc (0: binary s, 1: binary output, 2: binary input),
	void av_imdct_half (0: binary s, 1: binary output, 2: binary input),
	void av_mdct_calc (0: binary s, 1: binary output, 2: binary input),
	void av_rdft_calc (0: binary data, 1: binary s),
	binary av_packet_alloc (),
	binary av_packet_clone (0: binary src),
	binary av_free_packet (0: binary pkt),
	binary av_packet_add_side_data (0: binary type, 1: binary pkt, 2: i64 size, 3: binary data),
	binary av_packet_free_side_data (0: binary pkt),
	binary av_packet_side_data_name (0: binary type),
	i32 av_copy_packet_side_data (0: binary pkt, 1: binary src),
	i32 av_copy_packet (0: binary dst, 1: binary src),
	i32 av_dup_packet (0: binary pkt),
	i32 av_grow_packet (0: binary pkt, 1: i32 grow_by),
	i32 av_new_packet (0: binary pkt, 1: i32 size),
	i32 av_packet_copy_props (0: binary dst, 1: binary src),
	i32 av_packet_from_data (0: binary pkt, 1: i32 size, 2: binary data),
	i32 av_packet_make_refcounted (0: binary pkt),
	i32 av_packet_make_writable (0: binary pkt),
	i32 av_packet_merge_side_data (0: binary pkt),
	i32 av_packet_ref (0: binary dst, 1: binary src),
	i32 av_packet_shrink_side_data (0: binary type, 1: binary pkt, 2: i32 size),
	i32 av_packet_split_side_data (0: binary pkt),
	i32 av_packet_unpack_dictionary (0: binary dict, 1: binary data, 2: i32 size),
	i32 ff_side_data_set_encoder_stats (0: binary pkt, 1: binary error, 2: i32 error_count, 3: i32 pict_type, 4: i32 quality),
	binary av_packet_get_side_data (0: binary type, 1: binary pkt, 2: binary size),
	binary av_packet_new_side_data (0: binary type, 1: binary pkt, 2: i32 size),
	binary av_packet_pack_dictionary (0: binary dict, 1: binary size),
	void av_init_packet (0: binary pkt),
	void av_packet_free (0: binary pkt),
	void av_packet_move_ref (0: binary dst, 1: binary src),
	void av_packet_rescale_ts (0: binary pkt, 1: AVRational dst_tb, 2: AVRational src_tb),
	void av_packet_unref (0: binary pkt),
	void av_shrink_packet (0: binary pkt, 1: i32 size),
	binary avpicture_fill (0: binary pix_fmt, 1: binary picture, 2: binary ptr, 3: i32 height, 4: i32 width),
	i32 avpicture_alloc (0: binary pix_fmt, 1: binary picture, 2: i32 height, 3: i32 width),
	i32 avpicture_get_size (0: binary pix_fmt, 1: i32 height, 2: i32 width),
	i32 avpicture_layout (0: binary pix_fmt, 1: binary src, 2: i32 dest_size, 3: i32 height, 4: i32 width, 5: binary dest),
	void av_picture_copy (0: binary pix_fmt, 1: binary dst, 2: binary src, 3: i32 height, 4: i32 width),
	void avpicture_free (0: binary picture),
	binary MAC64 (0: i64 d, 1: i32 a, 2: i32 b),
	binary MUL64 (0: i32 a, 1: i32 b),
	binary MAC16 (0: i32 a, 1: i32 b, 2: i32 d),
	binary MUL16 (0: i32 a, 1: i32 b),
	binary MULH (0: i32 a, 1: i32 b),
	binary MULL (0: i32 a, 1: i32 b, 2: binary shift),
	binary mid_pred (0: i32 a, 1: i32 b, 2: i32 c),
	binary ff_bgmc_init (0: binary avctx, 1: binary cf_lut_status, 2: binary cf_lut),
	binary ff_bgmc_end (0: binary cf_lut_status, 1: binary cf_lut),
	void ff_bgmc_decode_end (0: binary gb),
	void ff_bgmc_decode_init (0: binary gb, 1: binary h, 2: binary l, 3: binary v),
	void ff_bgmc_decode (0: binary gb, 1: binary cf_lut_status, 2: binary dst, 3: i32 delta, 4: binary cf_lut, 5: binary h, 6: binary l, 7: binary v, 8: binary num, 9: binary sx),
	i32 binkb_get_value (0: binary c, 1: i32 bundle_num),
	i32 get_value (0: binary c, 1: i32 bundle),
	void put_pixels8x8_overlapped (0: i32 stride, 1: binary dst, 2: binary src),
	binary ff_binkdsp_init (0: binary c),
	void bink_idct_col (0: binary src, 1: binary dest),
	i32 ff_init_vlc_sparse (0: binary vlc_arg, 1: binary bits, 2: binary codes, 3: binary symbols, 4: i32 bits_size, 5: i32 bits_wrap, 6: i32 codes_size, 7: i32 codes_wrap, 8: i32 flags, 9: i32 nb_bits, 10: i32 nb_codes, 11: i32 symbols_size, 12: i32 symbols_wrap),
	void avpriv_align_put_bits (0: binary s),
	void avpriv_copy_bits (0: binary pb, 1: binary src, 2: i32 length),
	void avpriv_put_string (0: binary pb, 1: binary string, 2: i32 terminate_string),
	void ff_free_vlc (0: binary vlc),
	binary av_bitstream_filter_init (0: binary name),
	binary av_bitstream_filter_next (0: binary f),
	i32 av_bitstream_filter_filter (0: binary bsfc, 1: binary avctx, 2: binary args, 3: binary buf, 4: binary poutbuf_size, 5: i32 buf_size, 6: i32 keyframe, 7: binary poutbuf),
	void av_bitstream_filter_close (0: binary bsfc),
	void av_register_bitstream_filter (0: binary bsf),
	binary av_bsf_get_by_name (0: binary name),
	binary av_bsf_iterate (0: binary opaque),
	binary av_bsf_next (0: binary opaque),
	binary ff_bsf_child_class_next (0: binary prev),
	binary ff_blockdsp_init (0: binary avctx, 1: binary c),
	binary av_bsf_list_alloc (),
	binary av_bsf_get_class (),
	i32 av_bsf_alloc (0: binary pctx, 1: binary filter),
	i32 av_bsf_get_null_filter (0: binary bsf),
	i32 av_bsf_init (0: binary ctx),
	i32 av_bsf_list_append2 (0: binary lst, 1: binary options, 2: binary bsf_name),
	i32 av_bsf_list_append (0: binary bsf, 1: binary lst),
	i32 av_bsf_list_finalize (0: binary bsf, 1: binary lst),
	i32 av_bsf_list_parse_str (0: binary bsf_lst, 1: binary str),
	i32 av_bsf_receive_packet (0: binary ctx, 1: binary pkt),
	i32 av_bsf_send_packet (0: binary ctx, 1: binary pkt),
	i32 ff_bsf_get_packet_ref (0: binary ctx, 1: binary pkt),
	i32 ff_bsf_get_packet (0: binary ctx, 1: binary pkt),
	void av_bsf_flush (0: binary ctx),
	void av_bsf_free (0: binary pctx),
	void av_bsf_list_free (0: binary lst),
	binary ff_bswapdsp_init (0: binary c),
	binary bytestream2_seek_p (0: binary p, 1: i32 offset, 2: i32 whence),
	binary bytestream2_seek (0: binary g, 1: i32 offset, 2: i32 whence),
	binary bytestream2_size_p (0: binary p),
	binary bytestream2_size (0: binary g),
	binary bytestream2_tell_p (0: binary p),
	binary bytestream2_tell (0: binary g),
	binary bytestream2_copy_bufferu (0: binary g, 1: binary p, 2: binary size),
	binary bytestream2_copy_buffer (0: binary g, 1: binary p, 2: binary size),
	binary bytestream2_get_bufferu (0: binary g, 1: binary dst, 2: binary size),
	binary bytestream2_get_buffer (0: binary g, 1: binary dst, 2: binary size),
	binary bytestream2_get_bytes_left_p (0: binary p),
	binary bytestream2_get_bytes_left (0: binary g),
	binary bytestream2_get_eof (0: binary p),
	binary bytestream2_put_bufferu (0: binary p, 1: binary src, 2: binary size),
	binary bytestream2_put_buffer (0: binary p, 1: binary src, 2: binary size),
	binary bytestream_get_buffer (0: binary b, 1: binary dst, 2: binary size),
	binary bytestream2_init_writer (0: binary p, 1: i32 buf_size, 2: binary buf),
	binary bytestream2_set_bufferu (0: binary p, 1: binary c, 2: binary size),
	binary bytestream2_set_buffer (0: binary p, 1: binary c, 2: binary size),
	binary bytestream2_skip_p (0: binary p, 1: binary size),
	binary bytestream2_skipu (0: binary g, 1: binary size),
	binary bytestream2_skip (0: binary g, 1: binary size),
	binary bytestream_put_buffer (0: binary src, 1: binary b, 2: binary size),
	i32 copy_block (0: binary avctx, 1: i32 height, 2: i32 offset, 3: i32 stride, 4: binary from, 5: binary to),
	void draw_n_color (0: i32 bpp, 1: i32 height, 2: i32 stride, 3: i32 width, 4: i32 col, 5: binary out, 6: binary cols, 7: binary grps),
	i32 ff_init_cabac_decoder (0: binary c, 1: binary buf, 2: i32 buf_size),
	void ff_init_cabac_encoder (0: binary c, 1: i32 buf_size, 2: binary buf),
	binary get_cabac_bypass_sign (0: binary c, 1: i32 val),
	binary get_cabac_inline (0: binary c, 1: binary state),
	binary skip_bytes (0: binary c, 1: i32 n),
	binary get_cabac_noinline (0: binary c, 1: binary state),
	binary get_cabac_bypass (0: binary c),
	binary get_cabac_terminate (0: binary c),
	binary get_cabac (0: binary c, 1: binary state),
	void refill2 (0: binary c),
	void refill (0: binary c),
	void renorm_cabac_decoder_once (0: binary c),
	i32 ff_canopus_parse_info_tag (0: binary avctx, 1: binary src, 2: i64 size),
	binary ff_cavs_end (0: binary avctx),
	binary ff_cavs_init (0: binary avctx),
	i32 ff_cavs_init_pic (0: binary h),
	i32 ff_cavs_init_top_lines (0: binary h),
	i32 ff_cavs_next_mb (0: binary h),
	i32 get_bs (0: binary mvP, 1: binary mvQ, 2: i32 b),
	void ff_cavs_filter (0: binary mb_type, 1: binary h),
	void ff_cavs_init_mb (0: binary h),
	void ff_cavs_inter (0: binary mb_type, 1: binary h),
	void ff_cavs_load_intra_pred_chroma (0: binary h),
	void ff_cavs_load_intra_pred_luma (0: binary h, 1: i32 block, 2: binary left, 3: binary top),
	void ff_cavs_modify_mb_i (0: binary h, 1: binary pred_mode_uv),
	void ff_cavs_mv (0: binary size, 1: binary nC, 2: binary nP, 3: binary mode, 4: binary h, 5: i32 ref),
	void mc_dir_part (0: binary pic, 1: binary h, 2: binary mv, 3: h264_chroma_mc_func chroma_op, 4: i32 chroma_height, 5: i32 delta, 6: i32 list, 7: i32 src_x_offset, 8: i32 src_y_offset, 9: binary qpix_op, 10: binary dest_cb, 11: binary dest_cr, 12: binary dest_y),
	void mc_part_std (0: binary h, 1: binary mv, 2: h264_chroma_mc_func chroma_avg, 3: h264_chroma_mc_func chroma_put, 4: i32 chroma_height, 5: i32 delta, 6: i32 x_offset, 7: i32 y_offset, 8: binary qpix_avg, 9: binary qpix_put, 10: binary dest_cb, 11: binary dest_cr, 12: binary dest_y),
	void modify_pred (0: binary mod_table, 1: binary mode),
	void mv_pred_median (0: binary h, 1: binary mvA, 2: binary mvB, 3: binary mvC, 4: binary mvP),
	void scale_mv (0: binary h, 1: binary src, 2: binary d_x, 3: binary d_y, 4: i32 distp),
	void set_mvs (0: binary size, 1: binary mv),
	i32 check_for_slice (0: binary h),
	i32 decode_residual_chroma (0: binary h),
	i32 decode_residual_inter (0: binary h),
	i32 decode_slice_header (0: binary h, 1: binary gb),
	i32 dequant (0: binary h, 1: binary dst, 2: binary level_buf, 3: i32 coeff_num, 4: i32 mul, 5: i32 shift, 6: binary run_buf),
	i32 get_ue_code (0: binary gb, 1: i32 order),
	void mv_pred_direct (0: binary h, 1: binary col_mv, 2: binary pmv_fw),
	void mv_pred_sym (0: binary size, 1: binary h, 2: binary src),
	void set_intra_mode_default (0: binary h),
	void set_mv_intra (0: binary h),
	void store_mvs (0: binary h),
	void loop_filter_c1 (0: i32 alpha, 1: i32 beta, 2: i32 tc, 3: binary stride, 4: binary p0_p),
	void loop_filter_c2 (0: i32 alpha, 1: i32 beta, 2: binary stride, 3: binary p0_p),
	void loop_filter_l1 (0: i32 alpha, 1: i32 beta, 2: i32 tc, 3: binary stride, 4: binary p0_p),
	void loop_filter_l2 (0: i32 alpha, 1: i32 beta, 2: binary stride, 3: binary p0_p),
	binary AAC_RENAME (),
	i32 main (),
	i32 ff_cbs_alloc_unit_content (0: binary ctx, 1: binary unit, 2: i64 size, 3: binary free),
	i32 ff_cbs_alloc_unit_data (0: binary ctx, 1: binary unit, 2: i64 size),
	i32 ff_cbs_delete_unit (0: binary ctx, 1: binary frag, 2: i32 position),
	i32 ff_cbs_init (0: binary codec_id, 1: binary ctx_ptr, 2: binary log_ctx),
	i32 ff_cbs_insert_unit_content (0: binary content_buf, 1: binary ctx, 2: binary frag, 3: CodedBitstreamUnitType type, 4: i32 position, 5: binary content),
	i32 ff_cbs_insert_unit_data (0: binary data_buf, 1: binary ctx, 2: binary frag, 3: CodedBitstreamUnitType type, 4: i32 position, 5: i64 data_size, 6: binary data),
	i32 ff_cbs_read_extradata (0: binary ctx, 1: binary frag, 2: binary par),
	i32 ff_cbs_read_packet (0: binary ctx, 1: binary frag, 2: binary pkt),
	i32 ff_cbs_read_unsigned (0: binary ctx, 1: binary gbc, 2: binary name, 3: binary subscripts, 4: i32 width, 5: binary write_to, 6: i32 range_max, 7: i32 range_min),
	i32 ff_cbs_read (0: binary ctx, 1: binary frag, 2: binary data, 3: i64 size),
	i32 ff_cbs_write_extradata (0: binary par, 1: binary ctx, 2: binary frag),
	i32 ff_cbs_write_fragment_data (0: binary ctx, 1: binary frag),
	i32 ff_cbs_write_packet (0: binary pkt, 1: binary ctx, 2: binary frag),
	i32 ff_cbs_write_unsigned (0: binary ctx, 1: binary pbc, 2: binary name, 3: binary subscripts, 4: i32 width, 5: i32 range_max, 6: i32 range_min, 7: i32 value),
	void ff_cbs_close (0: binary ctx_ptr),
	void ff_cbs_fragment_uninit (0: binary ctx, 1: binary frag),
	void ff_cbs_trace_header (0: binary ctx, 1: binary name),
	void ff_cbs_trace_syntax_element (0: binary ctx, 1: binary bits, 2: binary str, 3: binary subscripts, 4: i64 value, 5: i32 position),
	i32 ff_cbs_h264_add_sei_message (0: binary ctx, 1: binary au, 2: binary payload),
	i32 ff_cbs_h264_delete_sei_message (0: binary ctx, 1: binary au, 2: binary nal, 3: i32 position),
	i32 ff_celp_lp_synthesis_filter (0: binary filter_coeffs, 1: binary in, 2: binary out, 3: i32 buffer_length, 4: i32 filter_length, 5: i32 rounder, 6: i32 shift, 7: i32 stop_on_overflow),
	void ff_celp_circ_addf (0: binary in, 1: binary lagged, 2: binary out, 3: double fac, 4: i32 lag, 5: i32 n),
	void ff_celp_convolve_circ (0: binary fc_in, 1: binary filter, 2: binary fc_out, 3: i32 len),
	void ff_celp_filter_init (0: binary c),
	void ff_celp_lp_synthesis_filterf (0: binary filter_coeffs, 1: binary in, 2: binary out, 3: i32 buffer_length, 4: i32 filter_length),
	void ff_celp_lp_zero_synthesis_filterf (0: binary filter_coeffs, 1: binary in, 2: binary out, 3: i32 buffer_length, 4: i32 filter_length),
	double ff_dot_productf (0: binary a, 1: binary b, 2: i32 length),
	i64 ff_dot_product (0: binary a, 1: binary b, 2: i32 length),
	i32 ff_exp2 (0: i16 power),
	i32 ff_log2_q15 (0: i32 value),
	void ff_celp_math_init (0: binary c),
	i32 bidir_sal (0: i32 offset, 1: i32 value),
	i32 dequant_and_decompand (0: i32 codebook, 1: i32 level, 2: i32 quantisation),
	void difference_coding (0: binary band, 1: i32 height, 2: i32 width),
	void filter (0: binary high, 1: binary low, 2: binary output, 3: i32 clip, 4: i32 len, 5: binary high_stride, 6: binary low_stride, 7: binary out_stride),
	void interlaced_vertical_filter (0: binary high, 1: binary low, 2: binary output, 3: i32 linesize, 4: i32 plane, 5: i32 width),
	void peak_table (0: binary peak, 1: binary band, 2: i32 length),
	void process_alpha (0: binary alpha, 1: i32 width),
	binary ff_cfhd_init_vlcs (0: binary s),
	void ff_draw_pc_font (0: binary font, 1: i32 bg, 2: i32 ch, 3: i32 fg, 4: i32 font_height, 5: i32 linesize, 6: binary dst),
	i32 decode_block (0: binary ctx, 1: binary blk, 2: i32 ac_quant, 3: i32 has_ac),
	i32 avpriv_codec2_mode_bit_rate (0: i32 mode, 1: binary logctx),
	i32 avpriv_codec2_mode_block_align (0: i32 mode, 1: binary logctx),
	i32 avpriv_codec2_mode_frame_size (0: i32 mode, 1: binary logctx),
	i16 avpriv_codec2_version_from_extradata (0: binary ptr),
	byte avpriv_codec2_mode_from_extradata (0: binary ptr),
	void avpriv_codec2_make_extradata (0: i32 mode, 1: binary ptr),
	binary avcodec_get_type (0: binary codec_id),
	binary avcodec_descriptor_get_by_name (0: binary name),
	binary avcodec_descriptor_get (0: binary id),
	binary avcodec_descriptor_next (0: binary prev),
	i32 decode_bytes (0: binary inbuffer, 1: i32 bytes, 2: binary out),
	void decode_bytes_and_gain (0: binary q, 1: binary p, 2: binary inbuffer, 3: binary gains_ptr),
	void expand_category (0: binary q, 1: binary category_index, 2: binary category),
	void mlt_compensate_output (0: binary q, 1: binary gains_ptr, 2: binary decode_buffer, 3: binary out, 4: binary previous_buffer),
	void copy_block16 (0: binary src, 1: i32 h, 2: binary dstStride, 3: binary srcStride, 4: binary dst),
	void copy_block17 (0: binary src, 1: i32 h, 2: binary dstStride, 3: binary srcStride, 4: binary dst),
	void copy_block2 (0: binary src, 1: i32 h, 2: binary dstStride, 3: binary srcStride, 4: binary dst),
	void copy_block4 (0: binary src, 1: i32 h, 2: binary dstStride, 3: binary srcStride, 4: binary dst),
	void copy_block8 (0: binary src, 1: i32 h, 2: binary dstStride, 3: binary srcStride, 4: binary dst),
	void copy_block9 (0: binary src, 1: i32 h, 2: binary dstStride, 3: binary srcStride, 4: binary dst),
	i32 main (0: binary argv, 1: i32 argc),
	binary id2subtype (0: binary id, 1: binary priv),
	CopyRet copy_frame (0: binary avctx, 1: binary frame, 2: binary output, 3: binary got_frame),
	CopyRet receive_frame (0: binary avctx, 1: binary frame, 2: binary got_frame),
	void print_frame_info (0: binary output, 1: binary priv),
	binary av_d3d11va_alloc_context (),
	binary av_d3d11va_alloc_context (),
	i32 avpriv_dca_convert_bitstream (0: binary src, 1: i32 max_size, 2: i32 src_size, 3: binary dst),
	i32 avpriv_dca_parse_core_frame_header (0: binary h, 1: binary buf, 2: i32 size),
	i32 ff_dca_parse_core_frame_header (0: binary h, 1: binary gb),
	i32 ff_dca_count_chs_for_mask (0: binary mask),
	binary ff_dca_core_init (0: binary s),
	binary ff_dca_core_close (0: binary s),
	binary ff_dca_core_flush (0: binary s),
	i32 decode_blockcodes (0: binary audio, 1: i32 code1, 2: i32 code2, 3: i32 levels),
	i32 extract_audio (0: binary s, 1: binary audio, 2: i32 abits, 3: i32 ch),
	i32 ff_dca_core_filter_fixed (0: binary s, 1: i32 x96_synth),
	i32 ff_dca_core_filter_frame (0: binary frame, 1: binary s),
	i32 ff_dca_core_parse_exss (0: binary s, 1: binary asset, 2: binary data),
	i32 ff_dca_core_parse (0: binary s, 1: i32 size, 2: binary data),
	i32 parse_block_codes (0: binary s, 1: binary audio, 2: i32 abits),
	i32 parse_huffman_codes (0: binary s, 1: binary audio, 2: i32 abits, 3: i32 sel),
	i32 parse_joint_scale (0: binary s, 1: i32 sel),
	i32 parse_scale (0: binary s, 1: binary scale_index, 2: i32 sel),
	void inverse_adpcm (0: binary vq_index, 1: binary prediction_mode, 2: binary subband_samples, 3: i32 len, 4: i32 ofs, 5: i32 sb_end, 6: i32 sb_start),
	i32 ff_dca_core_map_spkr (0: binary core, 1: i32 spkr),
	void ff_dca_core_dequantize (0: binary input, 1: binary output, 2: i32 scale, 3: i32 step_size, 4: i32 len, 5: i32 residual),
	i32 ff_dca_exss_parse (0: binary s, 1: binary data, 2: i32 size),
	binary ff_dca_lbr_init (0: binary s),
	binary ff_dca_lbr_close (0: binary s),
	binary ff_dca_lbr_flush (0: binary s),
	i32 ff_dca_lbr_filter_frame (0: binary frame, 1: binary s),
	i32 ff_dca_lbr_parse (0: binary asset, 1: binary s, 2: binary data),
	i32 parse_vlc (0: binary s, 1: binary vlc, 2: i32 max_depth),
	binary ff_dca_xll_close (0: binary s),
	binary ff_dca_xll_flush (0: binary s),
	i32 ff_dca_xll_filter_frame (0: binary frame, 1: binary s),
	i32 ff_dca_xll_parse (0: binary asset, 1: binary s, 2: binary data),
	binary ff_dcaadpcm_init (0: binary s),
	binary ff_dcaadpcm_free (0: binary s),
	i64 apply_filter (0: binary a, 1: binary aa, 2: binary corr),
	i64 calc_corr (0: binary x, 1: i32 j, 2: i32 k, 3: i32 len),
	i64 calc_prediction_gain (0: binary in, 1: binary out, 2: i32 len, 3: i32 pred_vq),
	i32 ff_dcaadpcm_do_real (0: binary in, 1: binary prev_hist, 2: binary next_hist, 3: binary out, 4: i32 peak, 5: i32 scale_factor, 6: i32 step_size, 7: i32 len, 8: i32 pred_vq_index, 9: softfloat quant),
	i32 ff_dcaadpcm_subband_analysis (0: binary s, 1: binary in, 2: binary diff, 3: i32 len),
	i64 ff_dcaadpcm_predict (0: binary input, 1: i32 pred_vq_index),
	binary ff_dcadct_init (0: binary c),
	i32 ff_dca_set_channel_layout (0: binary avctx, 1: binary ch_remap, 2: i32 dca_mask),
	void ff_dca_downmix_to_stereo_fixed (0: binary dcadsp, 1: binary coeff_l, 2: binary samples, 3: i32 ch_mask, 4: i32 nsamples),
	void ff_dca_downmix_to_stereo_float (0: binary fdsp, 1: binary samples, 2: binary coeff_l, 3: i32 ch_mask, 4: i32 nsamples),
	i32 ff_dca_check_crc (0: binary avctx, 1: binary s, 2: i32 p1, 3: i32 p2),
	i32 ff_dca_seek_bits (0: binary s, 1: i32 p),
	binary ff_dcadsp_init (0: binary s),
	i32 find_peak (0: binary c, 1: binary in, 2: i32 len),
	i32 get_step_size (0: binary c, 1: i32 band, 2: i32 ch),
	void quantize_adpcm_subband (0: binary c, 1: i32 band, 2: i32 ch),
	i32 quantize_value (0: i32 value, 1: softfloat quant),
	binary ff_dca_init_vlcs (),
	i32 ff_dca_vlc_calc_alloc_bits (0: binary values, 1: byte n, 2: byte sel),
	i32 ff_dca_vlc_calc_quant_bits (0: binary values, 1: byte n, 2: byte sel, 3: byte table),
	void ff_dca_vlc_enc_alloc (0: binary pb, 1: binary values, 2: byte n, 3: byte sel),
	void ff_dca_vlc_enc_quant (0: binary pb, 1: binary values, 2: byte n, 3: byte sel, 4: byte table),
	i32 clip23 (0: i32 a),
	i32 mul15 (0: i32 a, 1: i32 b),
	i32 mul16 (0: i32 a, 1: i32 b),
	i32 mul17 (0: i32 a, 1: i32 b),
	i32 mul22 (0: i32 a, 1: i32 b),
	i32 mul23 (0: i32 a, 1: i32 b),
	i32 mul31 (0: i32 a, 1: i32 b),
	i32 mul32 (0: i32 a, 1: i32 b),
	i32 mul__ (0: i32 a, 1: i32 b, 2: i32 bits),
	i32 norm13 (0: i64 a),
	i32 norm16 (0: i64 a),
	i32 norm20 (0: i64 a),
	i32 norm21 (0: i64 a),
	i32 norm23 (0: i64 a),
	i32 norm__ (0: i64 a, 1: i32 bits),
	binary ff_dct_init (0: binary inverse, 1: binary s, 2: i32 nbits),
	binary ff_dct_end (0: binary s),
	void dct32 (0: binary out, 1: binary tab_arg),
	binary ff_ref_dct_init (),
	void ff_ref_fdct (0: binary block),
	void ff_ref_idct (0: binary block),
	binary avcodec_default_get_format (0: binary avctx, 1: binary fmt),
	binary avcodec_decode_audio4 (0: binary avctx, 1: binary frame, 2: binary avpkt, 3: binary got_frame_ptr),
	binary avcodec_decode_video2 (0: binary avctx, 1: binary picture, 2: binary avpkt, 3: binary got_picture_ptr),
	binary avcodec_receive_frame (0: binary avctx, 1: binary frame),
	binary avcodec_send_packet (0: binary avctx, 1: binary avpkt),
	i32 avcodec_decode_subtitle2 (0: binary avctx, 1: binary avpkt, 2: binary sub, 3: binary got_sub_ptr),
	i32 avcodec_default_get_buffer2 (0: binary avctx, 1: binary frame, 2: i32 flags),
	i32 avcodec_get_hw_frames_parameters (0: binary hw_pix_fmt, 1: binary out_frames_ref, 2: binary device_ref, 3: binary avctx),
	i32 ff_attach_decode_data (0: binary frame),
	i32 ff_decode_bsfs_init (0: binary avctx),
	i32 ff_decode_frame_props (0: binary avctx, 1: binary frame),
	i32 ff_decode_get_hw_frames_ctx (0: binary dev_type, 1: binary avctx),
	i32 ff_decode_get_packet (0: binary avctx, 1: binary pkt),
	i32 ff_get_buffer (0: binary avctx, 1: binary frame, 2: i32 flags),
	i32 ff_get_format (0: binary avctx, 1: binary fmt),
	i32 ff_reget_buffer (0: binary avctx, 1: binary frame),
	void avcodec_flush_buffers (0: binary avctx),
	void ff_decode_bsfs_uninit (0: binary avctx),
	i32 av_dirac_parse_sequence_header (0: binary pdsh, 1: binary buf, 2: i64 buf_size, 3: binary log_ctx),
	binary ff_dirac_init_arith_tables (),
	void ff_dirac_init_arith_decoder (0: binary c, 1: binary gb, 2: i32 length),
	i32 dirac_get_arith_bit (0: binary c, 1: i32 ctx),
	i32 dirac_get_arith_int (0: binary c, 1: i32 data_ctx, 2: i32 follow_ctx),
	i32 dirac_get_arith_uint (0: binary c, 1: i32 data_ctx, 2: i32 follow_ctx),
	void refill (0: binary c),
	void renorm (0: binary c),
	i32 ff_spatial_idwt_init (0: binary type, 1: binary d, 2: binary p, 3: i32 bit_depth, 4: i32 decomposition_count),
	void ff_spatial_idwt_slice2 (0: binary d, 1: i32 y),
	binary ff_dirac_golomb_reader_init (0: binary lut_ctx),
	binary ff_dirac_golomb_reader_end (0: binary lut_ctx),
	i32 ff_dirac_golomb_read_16bit (0: binary lut_ctx, 1: binary buf, 2: i32 bytes, 3: i32 coeffs, 4: binary _dst),
	i32 ff_dirac_golomb_read_32bit (0: binary lut_ctx, 1: binary buf, 2: i32 bytes, 3: i32 coeffs, 4: binary _dst),
	void search_for_golomb (0: binary l, 1: i32 bits, 2: residual r),
	i32 coeff_unpack_golomb (0: binary gb, 1: i32 qfactor, 2: i32 qoffset),
	i32 divide3 (0: i32 x),
	i32 pred_block_mode (0: binary block, 1: i32 refmask, 2: i32 stride, 3: i32 x, 4: i32 y),
	i32 pred_sbsplit (0: i32 stride, 1: i32 x, 2: i32 y, 3: binary sbsplit),
	void pred_block_dc (0: binary block, 1: i32 stride, 2: i32 x, 3: i32 y),
	void pred_mv (0: binary block, 1: i32 ref, 2: i32 stride, 3: i32 x, 4: i32 y),
	i16 DEQUANT_SUBBAND (),
	i32 avpriv_dnxhd_get_frame_size (0: i32 cid),
	i32 avpriv_dnxhd_get_hr_frame_size (0: i32 cid, 1: i32 h, 2: i32 w),
	i32 avpriv_dnxhd_get_interlaced (0: i32 cid),
	i32 ff_dnxhd_find_cid (0: binary avctx, 1: i32 bit_depth),
	i32 ff_dnxhd_get_cid_table (0: i32 cid),
	void ff_dnxhd_print_profiles (0: binary avctx, 1: i32 loglevel),
	binary ff_dnxhd_check_header_prefix_hr (0: i64 prefix),
	binary ff_dnxhd_check_header_prefix (0: i64 prefix),
	binary ff_dnxhd_parse_header_prefix (0: binary buf),
	i32 get_bucket (0: i32 shift, 1: i32 value),
	i32 log_add (0: i32 a, 1: i32 b),
	binary ff_init_dsd_data (),
	void ff_dsd2pcm_translate (0: binary s, 1: binary src, 2: binary dst, 3: i32 lsbf, 4: binary dst_stride, 5: binary src_stride, 6: i64 samples),
	binary ff_dvvideo_init (0: binary avctx),
	i32 ff_dv_init_dynamic_tables (0: binary ctx, 1: binary d),
	void dv_calc_mb_coordinates (0: binary d, 1: i32 chan, 2: i32 seq, 3: i32 slot, 4: binary tbl),
	i32 dv_work_pool_size (0: binary d),
	void dv_calculate_mb_xy (0: binary s, 1: binary work_chunk, 2: binary mb_x, 3: binary mb_y, 4: i32 m),
	binary av_dv_codec_profile2 (0: binary pix_fmt, 1: AVRational frame_rate, 2: i32 height, 3: i32 width),
	binary av_dv_codec_profile (0: binary pix_fmt, 1: i32 height, 2: i32 width),
	binary av_dv_frame_profile (0: binary sys, 1: binary frame, 2: binary buf_size),
	binary ff_dv_frame_profile (0: binary codec, 1: binary sys, 2: binary frame, 3: binary buf_size),
	void ff_dv_print_profiles (0: i32 loglevel, 1: binary logctx),
	binary dv_vlc_map_tableinit (),
	i32 dv_get_audio_sample_count (0: binary buffer, 1: i32 dsf),
	i16 dv_audio_12to16 (0: i16 sample),
	binary ff_data_identifier_is_teletext (0: i32 data_identifier),
	binary ff_data_unit_id_is_teletext (0: i32 data_unit_id),
	void bit_copy (0: binary gb, 1: binary pb),
	i32 dv_write_dif_id (0: binary t, 1: binary buf, 2: byte chan_num, 3: byte dif_num, 4: byte seq_num),
	i32 dv_write_pack (0: binary pack_id, 1: binary c, 2: binary buf),
	i32 dv_write_ssyb_id (0: binary buf, 1: byte fr, 2: byte syb_num),
	void dv_guess_qnos (0: binary blks, 1: binary qnos),
	byte decode_sym_565 (0: binary gb, 1: i32 bits, 2: binary lru),
	byte decode_sym (0: binary gb, 1: binary lru),
	i32 ff_dxva2_commit_buffer (0: binary avctx, 1: binary ctx, 2: binary dsc, 3: binary data, 4: binary mb_count, 5: binary size, 6: binary type),
	i32 ff_dxva2_common_end_frame (0: binary avctx, 1: binary frame, 2: binary pp, 3: binary qm, 4: binary commit_bs_si, 5: binary pp_size, 6: binary qm_size),
	i32 ff_dxva2_common_frame_params (0: binary hw_frames_ctx, 1: binary avctx),
	i32 ff_dxva2_decode_init (0: binary avctx),
	i32 ff_dxva2_decode_uninit (0: binary avctx),
	i32 ff_dxva2_is_d3d11 (0: binary avctx),
	binary ff_dxva2_get_surface_index (0: binary avctx, 1: binary ctx, 2: binary frame),
	binary ff_eac3_exponent_init (),
	void ff_eac3_get_frame_exp_strategy (0: binary s),
	void ff_eac3_output_frame_header (0: binary s),
	void ff_eac3_set_cpl_states (0: binary s),
	void ea_idct_col (0: binary src, 1: binary dest),
	void ff_ea_idct_put_c (0: binary block, 1: binary linesize, 2: binary dest),
	i32 decode_block_intra (0: binary s, 1: binary block),
	void comp_block (0: binary frame, 1: binary t, 2: i32 add, 3: i32 j, 4: i32 mb_x, 5: i32 mb_y, 6: i32 mv_x, 7: i32 mv_y),
	void comp (0: i32 add, 1: binary dst_stride, 2: binary src_stride, 3: binary dst, 4: binary src),
	void idct_put (0: binary frame, 1: binary t, 2: binary block, 3: i32 j, 4: i32 mb_x, 5: i32 mb_y),
	void tgq_dconly (0: binary s, 1: i32 dc, 2: binary dst_stride, 3: binary dst),
	void tqi_idct_put (0: binary avctx, 1: binary frame, 2: binary block),
	i32 avpriv_do_elbg (0: binary rand_state, 1: binary closest_cb, 2: binary codebook, 3: binary points, 4: i32 dim, 5: i32 max_steps, 6: i32 numCB, 7: i32 numpoints),
	i32 avpriv_init_elbg (0: binary rand_state, 1: binary closest_cb, 2: binary codebook, 3: binary points, 4: i32 dim, 5: i32 max_steps, 6: i32 numCB, 7: i32 numpoints),
	i32 distance_limited (0: binary a, 1: binary b, 2: i32 dim, 3: i32 limit),
	void vect_division (0: binary res, 1: binary vect, 2: i32 dim, 3: i32 div),
	i32 ff_els_decode_bit (0: binary ctx, 1: binary rung),
	binary ff_els_decode_unsigned (0: binary ctx, 1: binary ur),
	void ff_els_decoder_init (0: binary ctx, 1: binary in, 2: i64 data_size),
	void ff_els_decoder_uninit (0: binary rung),
	binary avcodec_encode_audio2 (0: binary avctx, 1: binary avpkt, 2: binary frame, 3: binary got_packet_ptr),
	binary avcodec_encode_video2 (0: binary avctx, 1: binary avpkt, 2: binary frame, 3: binary got_packet_ptr),
	binary avcodec_receive_packet (0: binary avctx, 1: binary avpkt),
	binary avcodec_send_frame (0: binary avctx, 1: binary frame),
	i32 avcodec_encode_subtitle (0: binary avctx, 1: binary sub, 2: i32 buf_size, 3: binary buf),
	i32 ff_alloc_packet2 (0: binary avctx, 1: binary avpkt, 2: i64 min_size, 3: i64 size),
	i32 ff_alloc_packet (0: binary avpkt, 1: i32 size),
	void ff_er_add_slice (0: binary s, 1: i32 endx, 2: i32 endy, 3: i32 startx, 4: i32 starty, 5: i32 status),
	void ff_er_frame_end (0: binary s),
	void ff_er_frame_start (0: binary s),
	i32 avpriv_exif_decode_ifd (0: binary metadata, 1: binary buf, 2: i32 depth, 3: i32 le, 4: i32 size, 5: binary logctx),
	i32 ff_exif_decode_ifd (0: binary metadata, 1: binary gbytes, 2: i32 depth, 3: i32 le, 4: binary logctx),
	i16 exr_flt2uint (0: i32 v),
	i16 exr_halflt2uint (0: i16 v),
	void wdec14 (0: binary a, 1: binary b, 2: i16 h, 3: i16 l),
	void wdec16 (0: binary a, 1: binary b, 2: i16 h, 3: i16 l),
	binary ff_exrdsp_init (0: binary c),
	void ff_faandct248 (0: binary data),
	void ff_faandct (0: binary data),
	void ff_faanidct_add (0: binary block, 1: binary line_size, 2: binary dest),
	void ff_faanidct_put (0: binary block, 1: binary line_size, 2: binary dest),
	void ff_faanidct (0: binary block),
	void p8idct (0: binary temp, 1: binary data, 2: i32 type, 3: i32 x, 4: i32 y, 5: binary stride, 6: binary dest),
	binary ff_ccitt_unpack_init (),
	i32 ff_ccitt_unpack (0: binary compr, 1: binary avctx, 2: binary src, 3: i32 height, 4: i32 opts, 5: i32 srcsize, 6: i32 stride, 7: binary dst),
	binary ff_fdctdsp_init (0: binary avctx, 1: binary c),
	binary ff_jni_get_env (0: binary log_ctx),
	string ff_jni_jstring_to_utf_chars (0: binary env, 1: binary string, 2: binary log_ctx),
	i32 ff_jni_exception_check (0: binary env, 1: i32 log, 2: binary log_ctx),
	i32 ff_jni_exception_get_summary (0: binary env, 1: binary error, 2: binary exception, 3: binary log_ctx),
	i32 ff_jni_init_jfields (0: binary env, 1: binary jfields_mapping, 2: i32 global, 3: binary jfields, 4: binary log_ctx),
	i32 ff_jni_reset_jfields (0: binary env, 1: binary jfields_mapping, 2: i32 global, 3: binary jfields, 4: binary log_ctx),
	binary ff_jni_utf_chars_to_jstring (0: binary env, 1: binary utf_chars, 2: binary log_ctx),
	void ff_fft_lut_init (0: binary index, 1: i32 off, 2: i32 size, 3: binary table),
	binary ff_fft_init (0: binary s, 1: i32 inverse, 2: i32 nbits),
	binary ff_fft_end (0: binary s),
	binary ff_init_ff_cos_tabs (0: i32 index),
	binary ff_ffv1_close (0: binary avctx),
	binary ff_ffv1_common_init (0: binary avctx),
	binary ff_ffv1_init_slice_contexts (0: binary f),
	binary ff_ffv1_init_slice_state (0: binary fs, 1: binary f),
	binary ff_ffv1_init_slices_state (0: binary f),
	i32 ff_ffv1_allocate_initial_states (0: binary f),
	void ff_ffv1_clear_slice_state (0: binary fs, 1: binary f),
	binary fold (0: i32 bits, 1: i32 diff),
	void update_vlc_state (0: binary state, 1: binary v),
	i32 RENAME (),
	i32 RENAME (),
	binary get_symbol_inline (0: binary c, 1: i32 is_signed, 2: binary state),
	i32 get_vlc_symbol (0: binary gb, 1: binary state, 2: i32 bits),
	void put_vlc_symbol (0: binary pb, 1: binary state, 2: i32 bits, 3: i32 v),
	i32 avpriv_fits_header_init (0: binary header, 1: FITSHeaderState state),
	i32 avpriv_fits_header_parse_line (0: binary metadata, 1: binary header, 2: binary line, 3: binary avcl),
	i32 ff_flac_decode_frame_header (0: binary avctx, 1: binary fi, 2: binary gb, 3: i32 log_level_offset),
	i32 ff_flac_get_max_frame_size (0: i32 blocksize, 1: i32 bps, 2: i32 ch),
	i32 ff_flac_is_extradata_valid (0: binary format, 1: binary avctx, 2: binary streaminfo_start),
	i32 ff_flac_parse_streaminfo (0: binary s, 1: binary avctx, 2: binary buffer),
	void ff_flac_set_channel_layout (0: binary avctx),
	binary flac_parse_block_header (0: binary block_header, 1: binary last, 2: binary size, 3: binary type),
	i32 decode_subframe (0: binary s, 1: i32 channel),
	binary ff_flacdsp_init (0: binary fmt, 1: binary c, 2: i32 bps, 3: i32 channels),
	i32 encode_15_7_sl (0: binary palette, 1: binary src, 2: i32 dist, 3: i32 width, 4: binary dest),
	i32 pixel_color7_fast (0: binary palette, 1: binary c15),
	binary chroma_diff (0: binary c1, 1: binary c2),
	binary pixel_bgr (0: binary src),
	binary pixel_color15 (0: binary src),
	i32 ff_flv_decode_picture_header (0: binary s),
	void ff_flv2_encode_ac_esc (0: binary pb, 1: i32 last, 2: i32 level, 3: i32 run, 4: i32 slevel),
	void ff_flv_encode_picture_header (0: binary s, 1: i32 picture_number),
	binary ff_fmt_convert_init (0: binary avctx, 1: binary c),
	i32 ff_frame_thread_encoder_init (0: binary avctx, 1: binary options),
	i32 ff_thread_video_encode_frame (0: binary avctx, 1: binary pkt, 2: binary frame, 3: binary got_packet_ptr),
	void ff_frame_thread_encoder_free (0: binary avctx),
	i32 epic_cache_entries_for_pixel (0: binary hash, 1: i32 pix),
	i32 epic_decode_component_pred (0: binary dc, 1: i32 NW, 2: i32 N, 3: i32 W),
	i32 is_pixel_on_stack (0: binary dc, 1: i32 pix),
	void yuv2rgb (0: i32 U, 1: i32 V, 2: i32 Y, 3: i32 ridx, 4: binary out),
	i32 linear_scale_factor (0: binary log_factor),
	void ff_g722_update_high_predictor (0: binary band, 1: binary dhigh, 2: binary ihigh),
	void ff_g722_update_low_predictor (0: binary band, 1: binary ilow),
	void s_zero (0: binary band, 1: i32 cur_diff),
	binary ff_g722dsp_init (0: binary c),
	i32 encode_high (0: binary state, 1: i32 xhigh),
	i32 encode_low (0: binary state, 1: i32 xlow),
	void filter_samples (0: binary c, 1: binary samples, 2: binary xhigh, 3: binary xlow),
	i32 ff_g723_1_dot_product (0: binary a, 1: binary b, 2: i32 length),
	i32 ff_g723_1_normalize_bits (0: i32 num, 1: i32 width),
	i32 ff_g723_1_scale_vector (0: binary vector, 1: binary dst, 2: i32 length),
	void ff_g723_1_gen_acb_excitation (0: binary cur_rate, 1: binary subfrm, 2: binary prev_excitation, 3: binary vector, 4: i32 pitch_lag),
	void ff_g723_1_gen_dirac_train (0: binary buf, 1: i32 pitch_lag),
	void ff_g723_1_get_residual (0: binary prev_excitation, 1: binary residual, 2: i32 lag),
	void ff_g723_1_inverse_quant (0: binary cur_lsp, 1: binary prev_lsp, 2: i32 bad_frame, 3: binary lsp_index),
	void ff_g723_1_lsp_interpolate (0: binary cur_lsp, 1: binary lpc, 2: binary prev_lsp),
	i32 cng_rand (0: binary state, 1: i32 base),
	binary i2f (0: binary f, 1: i32 i),
	i16 inverse_quant (0: binary c, 1: i32 i),
	i16 mult (0: binary f1, 1: binary f2),
	i32 sgn (0: i32 value),
	byte quant (0: binary c, 1: i32 d),
	i16 g729_prng (0: i16 value),
	i16 ff_g729_adaptive_gain_control (0: binary speech, 1: i16 gain_prev, 2: i32 gain_after, 3: i32 gain_before, 4: i32 subframe_size),
	void ff_g729_postfilter (0: binary adsp, 1: binary lp_filter_coeffs, 2: binary voicing, 3: binary ht_prev_data, 4: binary pos_filter_data, 5: binary res_filter_data, 6: binary residual, 7: binary speech, 8: i32 pitch_delay_int, 9: i32 subframe_size),
	binary get_bitsz (0: binary s, 1: i32 n),
	binary get_vlc2 (0: binary s, 1: binary table, 2: i32 bits, 3: i32 max_depth),
	binary align_get_bits (0: binary s),
	i32 check_marker (0: binary s, 1: binary msg, 2: binary logctx),
	i32 decode012 (0: binary gb),
	i32 decode210 (0: binary gb),
	i32 get_bits_count (0: binary s),
	i32 get_bits_left (0: binary gb),
	i32 get_sbits_long (0: binary s, 1: i32 n),
	i32 get_sbits (0: binary s, 1: i32 n),
	i32 get_xbits_le (0: binary s, 1: i32 n),
	i32 get_xbits (0: binary s, 1: i32 n),
	i32 init_get_bits8 (0: binary s, 1: binary buffer, 2: i32 byte_size),
	i32 init_get_bits (0: binary s, 1: binary buffer, 2: i32 bit_size),
	i32 set_idx (0: binary s, 1: binary table, 2: binary nb_bits, 3: binary n, 4: i32 code),
	i32 skip_1stop_8data_bits (0: binary gb),
	i64 get_bits64 (0: binary s, 1: i32 n),
	i64 get_val (0: binary s, 1: i32 is_le, 2: binary n),
	binary get_bits1 (0: binary s),
	binary get_bits_le (0: binary s, 1: i32 n),
	binary get_bits_long (0: binary s, 1: i32 n),
	binary get_bits (0: binary s, 1: i32 n),
	binary show_bits1 (0: binary s),
	binary show_bits_long (0: binary s, 1: i32 n),
	binary show_bits (0: binary s, 1: i32 n),
	binary show_val (0: binary s, 1: binary n),
	void refill_32 (0: binary s),
	void refill_64 (0: binary s),
	void skip_bits1 (0: binary s),
	void skip_bits_long (0: binary s, 1: i32 n),
	void skip_bits (0: binary s, 1: i32 n),
	void skip_remaining (0: binary s, 1: binary n),
	i32 dirac_get_se_golomb (0: binary gb),
	i32 get_interleaved_se_golomb (0: binary gb),
	i32 get_se_golomb_long (0: binary gb),
	i32 get_se_golomb (0: binary gb),
	i32 get_se (0: binary s, 1: binary file, 2: binary func, 3: i32 line),
	i32 get_sr_golomb_flac (0: binary gb, 1: i32 esc_len, 2: i32 k, 3: i32 limit),
	i32 get_sr_golomb_shorten (0: binary gb, 1: i32 k),
	i32 get_sr_golomb (0: binary gb, 1: i32 esc_len, 2: i32 k, 3: i32 limit),
	i32 get_te0_golomb (0: binary gb, 1: i32 range),
	i32 get_te_golomb (0: binary gb, 1: i32 range),
	i32 get_te (0: binary s, 1: string file, 2: binary func, 3: i32 line, 4: i32 r),
	i32 get_ue_golomb_31 (0: binary gb),
	i32 get_ue_golomb (0: binary gb),
	i32 get_ue (0: binary s, 1: binary file, 2: binary func, 3: i32 line),
	i32 get_ur_golomb_jpegls (0: binary gb, 1: i32 esc_len, 2: i32 k, 3: i32 limit),
	i32 get_ur_golomb (0: binary gb, 1: i32 esc_len, 2: i32 k, 3: i32 limit),
	binary get_ur_golomb_shorten (0: binary gb, 1: i32 k),
	binary get_interleaved_ue_golomb (0: binary gb),
	binary get_ue_golomb_long (0: binary gb),
	void set_se_golomb (0: binary pb, 1: i32 i),
	void set_sr_golomb_flac (0: binary pb, 1: i32 esc_len, 2: i32 i, 3: i32 k, 4: i32 limit),
	void set_sr_golomb (0: binary pb, 1: i32 esc_len, 2: i32 i, 3: i32 k, 4: i32 limit),
	void set_te_golomb (0: binary pb, 1: i32 i, 2: i32 range),
	void set_ue_golomb_long (0: binary pb, 1: i32 i),
	void set_ue_golomb (0: binary pb, 1: i32 i),
	void set_ur_golomb_jpegls (0: binary pb, 1: i32 esc_len, 2: i32 i, 3: i32 k, 4: i32 limit),
	void set_ur_golomb (0: binary pb, 1: i32 esc_len, 2: i32 i, 3: i32 k, 4: i32 limit),
	i32 decode_log_area (0: i32 coded, 1: i32 factor, 2: i32 offset),
	i32 gsm_mult (0: i32 a, 1: i32 b),
	binary ff_h261_common_init (),
	void ff_h261_loop_filter (0: binary s),
	binary ff_h261_encode_init (0: binary s),
	i32 ff_h261_get_picture_format (0: i32 height, 1: i32 width),
	i32 get_cbp (0: binary s),
	void ff_h261_encode_mb (0: binary s, 1: i32 motion_x, 2: i32 motion_y),
	void ff_h261_encode_picture_header (0: binary s, 1: i32 picture_number),
	void ff_h261_reorder_mb_index (0: binary s),
	binary ff_h263_pred_motion (0: binary s, 1: binary px, 2: binary py, 3: i32 block, 4: i32 dir),
	i32 ff_h263_pred_dc (0: binary s, 1: binary dc_val_ptr, 2: i32 n),
	void ff_h263_loop_filter (0: binary s),
	void ff_h263_pred_acdc (0: binary s, 1: binary block, 2: i32 n),
	void ff_h263_update_motion_val (0: binary s),
	i32 get_p_cbp (0: binary s, 1: i32 motion_x, 2: i32 motion_y),
	i32 h263_get_motion_length (0: i32 f_code, 1: i32 val),
	void ff_h263_encode_motion_vector (0: binary s, 1: i32 f_code, 2: i32 x, 3: i32 y),
	i32 ff_h263_find_frame_end (0: binary pc, 1: binary buf, 2: i32 buf_size),
	binary ff_h263_decode_end (0: binary avctx),
	binary ff_h263_decode_init (0: binary avctx),
	i32 ff_h263_decode_frame (0: binary avctx, 1: binary avpkt, 2: binary got_frame, 3: binary data),
	binary ff_h263dsp_init (0: binary ctx),
	i32 ff_h2645_extract_rbsp (0: binary nal, 1: binary rbsp, 2: binary src, 3: i32 length, 4: i32 small_padding),
	i32 ff_h2645_packet_split (0: binary codec_id, 1: binary pkt, 2: binary buf, 3: i32 is_nalff, 4: i32 length, 5: i32 nal_length_size, 6: i32 small_padding, 7: i32 use_ref, 8: binary logctx),
	void ff_h2645_packet_uninit (0: binary pkt),
	i32 get_nalsize (0: binary buf, 1: binary buf_index, 2: i32 buf_size, 3: i32 nal_length_size, 4: binary logctx),
	i32 ff_h264_decode_mb_cabac (0: binary sl, 1: binary h),
	void ff_h264_init_cabac_states (0: binary sl, 1: binary h),
	binary ff_h264_decode_init_vlc (),
	i32 ff_h264_decode_mb_cavlc (0: binary sl, 1: binary h),
	i32 get_level_prefix (0: binary gb),
	i32 pred_non_zero_count (0: binary sl, 1: binary h, 2: i32 n),
	void ff_h264_direct_dist_scale_factor (0: binary sl, 1: binary h),
	void ff_h264_direct_ref_list_init (0: binary sl, 1: binary h),
	void ff_h264_pred_direct_motion (0: binary sl, 1: binary h, 2: binary mb_type),
	binary ff_h264_get_level (0: i32 constraint_set3_flag, 1: i32 level_idc),
	binary ff_h264_guess_level (0: i64 bitrate, 1: i32 height, 2: i32 max_dec_frame_buffering, 3: i32 profile_idc, 4: i32 width),
	void ff_h264_filter_mb_fast (0: binary sl, 1: binary h, 2: i32 mb_x, 3: i32 mb_y, 4: binary img_cb, 5: binary img_cr, 6: binary img_y, 7: binary linesize, 8: binary uvlinesize),
	void ff_h264_filter_mb (0: binary sl, 1: binary h, 2: i32 mb_x, 3: i32 mb_y, 4: binary img_cb, 5: binary img_cr, 6: binary img_y, 7: binary linesize, 8: binary uvlinesize),
	i32 get_lowest_part_list_y (0: binary sl, 1: i32 height, 2: i32 list, 3: i32 n, 4: i32 y_offset),
	void ff_h264_hl_decode_mb (0: binary sl, 1: binary h),
	void get_lowest_part_y (0: binary sl, 1: binary h, 2: binary nrefs, 3: i32 height, 4: i32 list0, 5: i32 list1, 6: i32 n, 7: i32 y_offset),
	binary fetch_diagonal_mv (0: binary sl, 1: binary h, 2: binary C, 3: i32 i, 4: i32 list, 5: i32 part_width),
	binary pred_16x8_motion (0: binary sl, 1: binary h, 2: binary mx, 3: binary my, 4: i32 list, 5: i32 n, 6: i32 ref),
	binary pred_8x16_motion (0: binary sl, 1: binary h, 2: binary mx, 3: binary my, 4: i32 list, 5: i32 n, 6: i32 ref),
	binary pred_motion (0: binary sl, 1: binary h, 2: binary mx, 3: binary my, 4: i32 list, 5: i32 n, 6: i32 part_width, 7: i32 ref),
	binary pred_pskip_motion (0: binary sl, 1: binary h),
	binary decode_mb_skip (0: binary sl, 1: binary h),
	void fill_decode_caches (0: binary sl, 1: binary h, 2: i32 mb_type),
	void fill_decode_neighbors (0: binary sl, 1: binary h, 2: i32 mb_type),
	i32 ff_h264_check_intra4x4_pred_mode (0: binary pred_mode_cache, 1: i32 left_samples_available, 2: i32 top_samples_available, 3: binary logctx),
	i32 ff_h264_check_intra_pred_mode (0: i32 is_chroma, 1: i32 left_samples_available, 2: i32 mode, 3: i32 top_samples_available, 4: binary logctx),
	i32 ff_h264_decode_extradata (0: binary ps, 1: binary data, 2: binary is_avc, 3: binary nal_length_size, 4: i32 err_recognition, 5: i32 size, 6: binary logctx),
	i32 ff_h264_get_profile (0: binary sps),
	i32 ff_h264_init_poc (0: binary pc, 1: binary sps, 2: binary pic_poc, 3: binary pic_field_poc, 4: i32 nal_ref_idc, 5: i32 picture_structure),
	i32 ff_h264_parse_ref_count (0: binary gb, 1: binary pps, 2: binary plist_count, 3: binary ref_count, 4: i32 picture_structure, 5: i32 slice_type_nos, 6: binary logctx),
	i32 ff_h264_pred_weight_table (0: binary gb, 1: binary pwt, 2: binary sps, 3: binary ref_count, 4: i32 picture_structure, 5: i32 slice_type_nos, 6: binary logctx),
	i32 parse_nal_units (0: binary avctx, 1: binary s, 2: binary buf, 3: i32 buf_size),
	i32 ff_h264_field_end (0: binary h, 1: binary sl, 2: i32 in_setup),
	i32 ff_h264_ref_picture (0: binary h, 1: binary dst, 2: binary src),
	void ff_h264_set_erpic (0: binary dst, 1: binary src),
	void ff_h264_unref_picture (0: binary h, 1: binary pic),
	i32 decode_hrd_parameters (0: binary avctx, 1: binary gb, 2: binary sps),
	i32 decode_vui_parameters (0: binary avctx, 1: binary gb, 2: binary sps),
	i32 ff_h264_decode_picture_parameter_set (0: binary avctx, 1: binary gb, 2: binary ps, 3: i32 bit_length),
	i32 ff_h264_decode_seq_parameter_set (0: binary avctx, 1: binary gb, 2: binary ps, 3: i32 ignore_truncation),
	void ff_h264_ps_uninit (0: binary ps),
	i32 ff_h264_build_ref_list (0: binary h, 1: binary sl),
	i32 ff_h264_decode_ref_pic_list_reordering (0: binary sl, 1: binary logctx),
	i32 ff_h264_decode_ref_pic_marking (0: binary gb, 1: binary sl, 2: binary nal, 3: binary logctx),
	i32 ff_h264_execute_ref_pic_marking (0: binary h),
	i32 unreference_pic (0: binary h, 1: binary pic, 2: i32 refmask),
	void ff_h264_remove_all_refs (0: binary h),
	binary ff_h264_sei_stereo_mode (0: binary h),
	i32 ff_h264_sei_decode (0: binary gb, 1: binary h, 2: binary ps, 3: binary logctx),
	void ff_h264_sei_uninit (0: binary h),
	i32 ff_h264_execute_decode_slices (0: binary h),
	i32 ff_h264_get_slice_type (0: binary sl),
	i32 ff_h264_queue_decode_slice (0: binary h, 1: binary nal),
	i32 ff_h264_update_thread_context (0: binary dst, 1: binary src),
	binary ff_h264chroma_init (0: binary c, 1: i32 bit_depth),
	i32 avpriv_h264_has_num_reorder_frames (0: binary avctx),
	i32 ff_h264_alloc_tables (0: binary h),
	i32 ff_h264_slice_context_init (0: binary h, 1: binary sl),
	void ff_h264_draw_horiz_band (0: binary sl, 1: binary h, 2: i32 height, 3: i32 y),
	void ff_h264_flush_change (0: binary h),
	void ff_h264_free_tables (0: binary h),
	binary get_chroma_qp (0: binary pps, 1: i32 qscale, 2: i32 t),
	binary get_dct8x8_allowed (0: binary sl, 1: binary h),
	binary pred_intra_mode (0: binary sl, 1: binary h, 2: i32 n),
	binary pack8to16 (0: binary a, 1: binary b),
	binary pack16to32 (0: binary a, 1: binary b),
	binary write_back_intra_pred_mode (0: binary sl, 1: binary h),
	binary write_back_motion_list (0: binary sl, 1: binary h, 2: i32 b8_xy, 3: i32 b_stride, 4: i32 b_xy, 5: i32 list, 6: i32 mb_type),
	binary write_back_motion (0: binary sl, 1: binary h, 2: i32 mb_type),
	binary write_back_non_zero_count (0: binary sl, 1: binary h),
	i32 find_start_code (0: binary buf, 1: i32 buf_index, 2: i32 buf_size, 3: i32 next_avc),
	binary ff_h264dsp_init (0: binary c, 1: binary bit_depth, 2: binary chroma_format_idc),
	void FUNCC (),
	void FUNCC (),
	void FUNCC (),
	void FUNCC (),
	void FUNCC (),
	void FUNCC (),
	void FUNCC (),
	void FUNCC (),
	void FUNCC (),
	void FUNCC (),
	void FUNCC (),
	void FUNCC (),
	binary ff_h264_pred_init (0: binary h, 1: binary bit_depth, 2: i32 chroma_format_idc, 3: i32 codec_id),
	binary ff_h264qpel_init (0: binary c, 1: i32 bit_depth),
	void FUNC (),
	void FUNC (),
	void FUNC (),
	void FUNC (),
	binary ff_h265_get_level (0: i32 level_idc),
	binary ff_h265_guess_level (0: binary ptl, 1: i64 bitrate, 2: i32 height, 3: i32 max_dec_pic_buffering, 4: i32 slice_segments, 5: i32 tile_cols, 6: i32 tile_rows, 7: i32 width),
	binary ff_h265_get_profile (0: binary ptl),
	binary ff_hap_free_context (0: binary ctx),
	i32 ff_hap_parse_section_header (0: binary section_type, 1: binary gbc, 2: binary section_size),
	i32 ff_hap_set_chunk_count (0: binary ctx, 1: i32 count, 2: i32 first_in_frame),
	i32 ff_hevc_cabac_init (0: binary s, 1: i32 ctb_addr_ts),
	i32 ff_hevc_cbf_cb_cr_decode (0: binary s, 1: i32 trafo_depth),
	i32 ff_hevc_cbf_luma_decode (0: binary s, 1: i32 trafo_depth),
	i32 ff_hevc_cu_chroma_qp_offset_flag (0: binary s),
	i32 ff_hevc_cu_chroma_qp_offset_idx (0: binary s),
	i32 ff_hevc_cu_qp_delta_abs (0: binary s),
	i32 ff_hevc_cu_qp_delta_sign_flag (0: binary s),
	i32 ff_hevc_cu_transquant_bypass_flag_decode (0: binary s),
	i32 ff_hevc_end_of_slice_flag_decode (0: binary s),
	i32 ff_hevc_inter_pred_idc_decode (0: binary s, 1: i32 nPbH, 2: i32 nPbW),
	i32 ff_hevc_intra_chroma_pred_mode_decode (0: binary s),
	i32 ff_hevc_log2_res_scale_abs (0: binary s, 1: i32 idx),
	i32 ff_hevc_merge_flag_decode (0: binary s),
	i32 ff_hevc_merge_idx_decode (0: binary s),
	i32 ff_hevc_mpm_idx_decode (0: binary s),
	i32 ff_hevc_mvp_lx_flag_decode (0: binary s),
	i32 ff_hevc_no_residual_syntax_flag_decode (0: binary s),
	i32 ff_hevc_part_mode_decode (0: binary s, 1: i32 log2_cb_size),
	i32 ff_hevc_pcm_flag_decode (0: binary s),
	i32 ff_hevc_pred_mode_decode (0: binary s),
	i32 ff_hevc_prev_intra_luma_pred_flag_decode (0: binary s),
	i32 ff_hevc_ref_idx_lx_decode (0: binary s, 1: i32 num_ref_idx_lx),
	i32 ff_hevc_rem_intra_luma_pred_mode_decode (0: binary s),
	i32 ff_hevc_res_scale_sign_flag (0: binary s, 1: i32 idx),
	i32 ff_hevc_sao_band_position_decode (0: binary s),
	i32 ff_hevc_sao_eo_class_decode (0: binary s),
	i32 ff_hevc_sao_merge_flag_decode (0: binary s),
	i32 ff_hevc_sao_offset_abs_decode (0: binary s),
	i32 ff_hevc_sao_offset_sign_decode (0: binary s),
	i32 ff_hevc_sao_type_idx_decode (0: binary s),
	i32 ff_hevc_skip_flag_decode (0: binary s, 1: i32 x0, 2: i32 x_cb, 3: i32 y0, 4: i32 y_cb),
	i32 ff_hevc_split_coding_unit_flag_decode (0: binary s, 1: i32 ct_depth, 2: i32 x0, 3: i32 y0),
	i32 ff_hevc_split_transform_flag_decode (0: binary s, 1: i32 log2_trafo_size),
	void ff_hevc_hls_mvd_coding (0: binary s, 1: i32 log2_cb_size, 2: i32 x0, 3: i32 y0),
	void ff_hevc_hls_residual_coding (0: binary scan_idx, 1: binary s, 2: i32 c_idx, 3: i32 log2_trafo_size, 4: i32 x0, 5: i32 y0),
	void ff_hevc_save_states (0: binary s, 1: i32 ctb_addr_ts),
	void ff_hevc_deblocking_boundary_strengths (0: binary s, 1: i32 log2_trafo_size, 2: i32 x0, 3: i32 y0),
	void ff_hevc_hls_filters (0: binary s, 1: i32 ctb_size, 2: i32 x_ctb, 3: i32 y_ctb),
	void ff_hevc_hls_filter (0: binary s, 1: i32 ctb_size, 2: i32 x, 3: i32 y),
	void ff_hevc_set_qPy (0: binary s, 1: i32 log2_cb_size, 2: i32 xBase, 3: i32 yBase),
	void ff_hevc_luma_mv_merge_mode (0: binary s, 1: binary mv, 2: i32 log2_cb_size, 3: i32 merge_idx, 4: i32 nPbH, 5: i32 nPbW, 6: i32 part_idx, 7: i32 x0, 8: i32 y0),
	void ff_hevc_luma_mv_mvp_mode (0: binary s, 1: binary mv, 2: i32 LX, 3: i32 log2_cb_size, 4: i32 merge_idx, 5: i32 mvp_lx_flag, 6: i32 nPbH, 7: i32 nPbW, 8: i32 part_idx, 9: i32 x0, 10: i32 y0),
	void ff_hevc_set_neighbour_available (0: binary s, 1: i32 nPbH, 2: i32 nPbW, 3: i32 x0, 4: i32 y0),
	i32 ff_hevc_decode_extradata (0: binary ps, 1: binary sei, 2: binary data, 3: binary is_nalff, 4: binary nal_length_size, 5: i32 apply_defdispwin, 6: i32 err_recognition, 7: i32 size, 8: binary logctx),
	i32 ff_hevc_compute_poc (0: binary sps, 1: i32 nal_unit_type, 2: i32 pocTid0, 3: i32 poc_lsb),
	i32 ff_hevc_decode_nal_pps (0: binary avctx, 1: binary gb, 2: binary ps),
	i32 ff_hevc_decode_nal_sps (0: binary avctx, 1: binary gb, 2: binary ps, 3: i32 apply_defdispwin),
	i32 ff_hevc_decode_nal_vps (0: binary avctx, 1: binary gb, 2: binary ps),
	i32 ff_hevc_decode_short_term_rps (0: binary avctx, 1: binary gb, 2: binary rps, 3: binary sps, 4: i32 is_slice_header),
	i32 ff_hevc_parse_sps (0: binary vps_list, 1: binary avctx, 2: binary gb, 3: binary sps, 4: i32 apply_defdispwin, 5: binary sps_id),
	i32 setup_pps (0: binary avctx, 1: binary gb, 2: binary pps, 3: binary sps),
	void ff_hevc_ps_uninit (0: binary ps),
	i32 ff_hevc_encode_nal_vps (0: binary vps, 1: i32 buf_size, 2: binary buf, 3: binary id),
	binary ff_hevc_get_ref_list (0: binary s, 1: binary ref, 2: i32 x0, 3: i32 y0),
	i32 ff_hevc_frame_nb_refs (0: binary s),
	i32 ff_hevc_frame_rps (0: binary s),
	i32 ff_hevc_output_frame (0: binary out, 1: binary s, 2: i32 flush),
	i32 ff_hevc_set_new_ref (0: binary frame, 1: binary s, 2: i32 poc),
	i32 ff_hevc_slice_rpl (0: binary s),
	void ff_hevc_bump_frame (0: binary s),
	void ff_hevc_clear_refs (0: binary s),
	void ff_hevc_flush_dpb (0: binary s),
	void ff_hevc_unref_frame (0: binary s, 1: binary frame, 2: i32 flags),
	i32 ff_hevc_decode_nal_sei (0: binary gb, 1: binary s, 2: binary ps, 3: i32 type, 4: binary logctx),
	void ff_hevc_reset_sei (0: binary s),
	binary ff_hevc_nal_is_nonref (0: binary type),
	void ff_hevc_dsp_init (0: binary hevcdsp, 1: i32 bit_depth),
	void ff_hevc_pred_init (0: binary hpc, 1: i32 bit_depth),
	binary PIXOP2 (),
	void put_blocks (0: binary pic, 1: binary c, 2: binary block0, 3: binary block1, 4: i32 ilace, 5: i32 plane, 6: i32 x, 7: i32 y),
	binary ff_hq_init_vlcs (0: binary c),
	binary ff_hqdsp_init (0: binary c),
	void idct_col (0: binary blk),
	void idct_row (0: binary blk),
	void hqx_get_ac (0: binary gb, 1: binary ac, 2: binary lev, 3: binary run),
	void put_blocks (0: binary ctx, 1: binary quant, 2: binary block0, 3: binary block1, 4: i32 ilace, 5: i32 plane, 6: i32 x, 7: i32 y),
	binary ff_hqxdsp_init (0: binary c),
	void idct_col (0: binary quant, 1: binary blk),
	void idct_row (0: binary blk),
	binary ff_hqx_init_vlcs (0: binary ctx),
	i32 ff_htmlmarkup_to_ass (0: binary dst, 1: binary in, 2: binary log_ctx),
	i32 ff_huff_build_tree (0: binary avctx, 1: HuffCmp cmp, 2: binary nodes, 3: binary vlc, 4: i32 flags, 5: i32 nb_bits, 6: i32 nb_codes),
	i32 ff_huff_gen_len_table (0: binary stats, 1: i32 skip0, 2: i32 stats_size, 3: binary dst),
	binary ff_huffyuv_alloc_temp (0: binary s),
	binary ff_huffyuv_common_end (0: binary s),
	binary ff_huffyuv_common_init (0: binary avctx),
	i32 ff_huffyuv_generate_bits_table (0: binary len_table, 1: i32 n, 2: binary dst),
	binary ff_huffyuvdsp_init (0: binary pix_fmt, 1: binary c),
	i32 encode_bgra_bitstream (0: binary s, 1: i32 count, 2: i32 planes),
	i32 sub_left_prediction (0: binary s, 1: binary src, 2: i32 left, 3: i32 w, 4: binary dst),
	void diff_bytes (0: binary s, 1: binary src0, 2: binary src1, 3: i32 w, 4: binary dst),
	void sub_left_prediction_bgr32 (0: binary s, 1: binary src, 2: binary alpha, 3: binary blue, 4: binary green, 5: binary red, 6: i32 w, 7: binary dst),
	void sub_left_prediction_rgb24 (0: binary s, 1: binary blue, 2: binary green, 3: binary red, 4: i32 w, 5: binary dst, 6: binary src),
	binary ff_huffyuvencdsp_init (0: binary avctx, 1: binary c),
	binary ff_idctdsp_init (0: binary avctx, 1: binary c),
	binary ff_init_scantable_permutation (0: binary perm_type, 1: binary idct_permutation),
	binary ff_init_scantable (0: binary st, 1: binary src_scantable, 2: binary permutation),
	void ff_add_pixels_clamped_c (0: binary block, 1: binary line_size, 2: binary pixels),
	void ff_put_pixels_clamped_c (0: binary block, 1: binary line_size, 2: binary pixels),
	binary ff_iir_filter_init_coeffs (0: binary filt_mode, 1: binary filt_type, 2: double cutoff_ratio, 3: double ripple, 4: double stopband, 5: i32 order, 6: binary avc),
	binary ff_iir_filter_init_state (0: i32 order),
	binary ff_iir_filter_free_coeffsp (0: binary coeffsp),
	binary ff_iir_filter_free_statep (0: binary state),
	void ff_iir_filter_flt (0: binary s, 1: binary src, 2: binary c, 3: binary dst, 4: i32 size, 5: binary dstep, 6: binary sstep),
	void ff_iir_filter_init (0: binary f),
	void ff_iir_filter (0: binary s, 1: binary src, 2: binary c, 3: binary dst, 4: i32 size, 5: binary dstep, 6: binary sstep),
	double freq2bark (0: double freq),
	binary avcodec_find_best_pix_fmt2 (0: binary dst_pix_fmt1, 1: binary dst_pix_fmt2, 2: binary src_pix_fmt, 3: binary loss_ptr, 4: i32 has_alpha),
	binary avcodec_find_best_pix_fmt_of_2 (0: binary dst_pix_fmt1, 1: binary dst_pix_fmt2, 2: binary src_pix_fmt, 3: binary loss_ptr, 4: i32 has_alpha),
	binary avcodec_find_best_pix_fmt_of_list (0: binary src_pix_fmt, 1: binary pix_fmt_list, 2: binary loss_ptr, 3: i32 has_alpha),
	binary is_yuv_planar (0: binary desc),
	i32 av_picture_crop (0: binary pix_fmt, 1: binary dst, 2: binary src, 3: i32 left_band, 4: i32 top_band),
	i32 av_picture_pad (0: binary pix_fmt, 1: binary dst, 2: binary src, 3: binary color, 4: i32 height, 5: i32 padbottom, 6: i32 padleft, 7: i32 padright, 8: i32 padtop, 9: i32 width),
	i32 avcodec_get_pix_fmt_loss (0: binary dst_pix_fmt, 1: binary src_pix_fmt, 2: i32 has_alpha),
	void avcodec_get_chroma_sub_sample (0: binary pix_fmt, 1: binary h_shift, 2: binary v_shift),
	i32 ir2_get_code (0: binary gb),
	i32 replicate32 (0: i32 a),
	i64 replicate64 (0: i64 a),
	void fill_64 (0: binary pix, 1: i32 n, 2: i32 row_offset, 3: binary dst),
	i32 scale_tile_size (0: i32 def_size, 1: i32 size_factor),
	i32 skip_hdr_extension (0: binary gb),
	i32 ff_intel_h263_decode_picture_header (0: binary s),
	binary ff_exp2fi (0: i32 x),
	binary ff_samples_to_time_base (0: binary avctx, 1: i64 samples),
	binary ff_intrax8_common_init (0: binary avctx, 1: binary idsp, 2: binary w, 3: binary block, 4: binary block_last_index, 5: i32 mb_height, 6: i32 mb_width),
	binary ff_intrax8_common_end (0: binary w),
	i32 ff_intrax8_decode_picture (0: binary gb, 1: binary w, 2: binary pict, 3: binary mb_x, 4: binary mb_y, 5: i32 dquant, 6: i32 loopfilter, 7: i32 lowdelay, 8: i32 quant_offset),
	i32 x8_get_orient_vlc (0: binary w),
	void x8_select_ac_table (0: binary w, 1: i32 mode),
	binary ff_intrax8dsp_init (0: binary dsp),
	binary ff_h263_decode_init_vlc (),
	i32 ff_h263_decode_mba (0: binary s),
	i32 ff_h263_decode_mb (0: binary s),
	i32 ff_h263_decode_motion (0: binary s, 1: i32 f_code, 2: i32 pred),
	i32 ff_h263_decode_picture_header (0: binary s),
	i32 ff_h263_resync (0: binary s),
	void ff_h263_show_pict_info (0: binary s),
	void set_one_direct_mv (0: binary s, 1: binary p, 2: i32 i),
	binary ff_h263_encode_init (0: binary s),
	binary ff_h263_aspect_to_info (0: AVRational aspect),
	void ff_clean_h263_qscales (0: binary s),
	void ff_h263_encode_gob_header (0: binary s, 1: i32 mb_line),
	void ff_h263_encode_mba (0: binary s),
	void ff_h263_encode_mb (0: binary s, 1: i32 motion_x, 2: i32 motion_y),
	void ff_h263_encode_motion (0: binary pb, 1: i32 f_code, 2: i32 val),
	void ff_h263_encode_picture_header (0: binary s, 1: i32 picture_number),
	binary ff_ivi_decode_close (0: binary avctx),
	binary ff_ivi_init_planes (0: binary avctx, 1: binary planes, 2: binary cfg, 3: i32 is_indeo4),
	binary ff_ivi_init_tiles (0: binary planes, 1: i32 tile_height, 2: i32 tile_width),
	binary ff_ivi_init_static_vlc (),
	i32 ff_ivi_dec_huff_desc (0: binary avctx, 1: binary gb, 2: binary huff_tab, 3: i32 desc_coded, 4: i32 which_tab),
	i32 ff_ivi_decode_frame (0: binary avctx, 1: binary avpkt, 2: binary got_frame, 3: binary data),
	i32 ivi_pic_config_cmp (0: binary str1, 1: binary str2),
	i32 ivi_scale_mv (0: i32 mv_scale, 1: i32 mv),
	void ff_ivi_col_haar4 (0: binary in, 1: binary flags, 2: binary out, 3: binary pitch),
	void ff_ivi_col_haar8 (0: binary in, 1: binary flags, 2: binary out, 3: binary pitch),
	void ff_ivi_col_slant4 (0: binary in, 1: binary flags, 2: binary out, 3: binary pitch),
	void ff_ivi_col_slant8 (0: binary in, 1: binary flags, 2: binary out, 3: binary pitch),
	void ff_ivi_dc_col_slant (0: binary in, 1: binary out, 2: i32 blk_size, 3: binary pitch),
	void ff_ivi_dc_haar_2d (0: binary in, 1: binary out, 2: i32 blk_size, 3: binary pitch),
	void ff_ivi_dc_row_slant (0: binary in, 1: binary out, 2: i32 blk_size, 3: binary pitch),
	void ff_ivi_dc_slant_2d (0: binary in, 1: binary out, 2: i32 blk_size, 3: binary pitch),
	void ff_ivi_inverse_haar_4x4 (0: binary in, 1: binary flags, 2: binary out, 3: binary pitch),
	void ff_ivi_inverse_haar_8x8 (0: binary in, 1: binary flags, 2: binary out, 3: binary pitch),
	void ff_ivi_inverse_slant_4x4 (0: binary in, 1: binary flags, 2: binary out, 3: binary pitch),
	void ff_ivi_inverse_slant_8x8 (0: binary in, 1: binary flags, 2: binary out, 3: binary pitch),
	void ff_ivi_put_dc_pixel_8x8 (0: binary in, 1: binary out, 2: i32 blk_size, 3: binary pitch),
	void ff_ivi_put_pixels_8x8 (0: binary in, 1: binary flags, 2: binary out, 3: binary pitch),
	void ff_ivi_recompose53 (0: binary plane, 1: binary dst_pitch, 2: binary dst),
	void ff_ivi_recompose_haar (0: binary plane, 1: binary dst_pitch, 2: binary dst),
	void ff_ivi_row_haar4 (0: binary in, 1: binary flags, 2: binary out, 3: binary pitch),
	void ff_ivi_row_haar8 (0: binary in, 1: binary flags, 2: binary out, 3: binary pitch),
	void ff_ivi_row_slant4 (0: binary in, 1: binary flags, 2: binary out, 3: binary pitch),
	void ff_ivi_row_slant8 (0: binary in, 1: binary flags, 2: binary out, 3: binary pitch),
	binary jss_skip_whitespace (0: binary p),
	binary jss_whitespace (0: byte c),
	void ff_fdct_ifast248 (0: binary data),
	void ff_fdct_ifast (0: binary data),
	void FUNC (),
	void FUNC (),
	i32 av_jni_set_java_vm (0: binary log_ctx, 1: binary vm),
	binary av_jni_get_java_vm (0: binary log_ctx),
	i32 ff_jpeg2000_init_component (0: binary avctx, 1: binary codsty, 2: binary comp, 3: binary qntsty, 4: i32 cbps, 5: i32 dx, 6: i32 dy),
	binary ff_jpeg2000_init_tier1_luts (),
	void ff_jpeg2000_cleanup (0: binary codsty, 1: binary comp),
	void ff_jpeg2000_reinit (0: binary codsty, 1: binary comp),
	void ff_jpeg2000_set_significance (0: binary t1, 1: i32 negative, 2: i32 x, 3: i32 y),
	i32 ff_jpeg2000_ceildivpow2 (0: i32 a, 1: i32 b),
	i32 ff_jpeg2000_ceildiv (0: i32 a, 1: i32 b),
	i32 ff_jpeg2000_getrefctxno (0: i32 flag),
	i32 ff_jpeg2000_getsgnctxno (0: binary xorbit, 1: i32 flag),
	i32 ff_jpeg2000_getsigctxno (0: i32 bandno, 1: i32 flag),
	i32 needs_termination (0: i32 passno, 1: i32 style),
	void mct_decode (0: binary s, 1: binary tile),
	void tile_codeblocks (0: binary s, 1: binary tile),
	binary ff_jpeg2000dsp_init (0: binary c),
	i32 ff_dwt_decode (0: binary s, 1: binary t),
	i32 ff_dwt_encode (0: binary s, 1: binary t),
	i32 ff_jpeg2000_dwt_init (0: binary s, 1: i32 decomp_levels, 2: i32 type),
	void extend53 (0: binary p, 1: i32 i0, 2: i32 i1),
	void extend97_float (0: binary p, 1: i32 i0, 2: i32 i1),
	void extend97_int (0: binary p, 1: i32 i0, 2: i32 i1),
	void ff_dwt_destroy (0: binary s),
	i32 iso_clip (0: i32 vmax, 1: i32 vmin, 2: i32 v),
	void ff_jpegls_init_state (0: binary state),
	void ff_jpegls_reset_coding_parameters (0: binary s, 1: i32 reset_all),
	i32 ff_jpegls_quantize (0: binary s, 1: i32 v),
	i32 ff_jpegls_update_state_regular (0: binary state, 1: i32 Q, 2: i32 err),
	void ff_jpegls_downscale_state (0: binary state, 1: i32 Q),
	i32 ff_jpegls_decode_lse (0: binary s),
	i32 ff_jpegls_decode_picture (0: binary s, 1: i32 ilv, 2: i32 near, 3: i32 point_transform),
	i32 ls_get_code_regular (0: binary gb, 1: binary state, 2: i32 Q),
	i32 ls_get_code_runterm (0: binary gb, 1: binary state, 2: i32 RItype, 3: i32 limit_add),
	void ls_decode_line (0: binary state, 1: binary s, 2: i32 bits, 3: i32 comp, 4: i32 last2, 5: i32 stride, 6: i32 w, 7: binary dst, 8: binary last),
	void ls_encode_line (0: binary state, 1: binary pb, 2: i32 bits, 3: i32 comp, 4: i32 last2, 5: i32 stride, 6: i32 w, 7: binary cur, 8: binary last),
	void ls_encode_regular (0: binary state, 1: binary pb, 2: i32 Q, 3: i32 err),
	void ls_encode_runterm (0: binary state, 1: binary pb, 2: i32 RItype, 3: i32 err, 4: i32 limit_add),
	void ls_encode_run (0: binary state, 1: binary pb, 2: i32 comp, 3: i32 run, 4: i32 trail),
	void ff_mjpeg_build_huffman_codes (0: binary bits_table, 1: binary val_table, 2: binary huff_code, 3: binary huff_size),
	void ff_j_rev_dct1 (0: DCTBLOCK data),
	void ff_j_rev_dct2 (0: DCTBLOCK data),
	void ff_j_rev_dct4 (0: DCTBLOCK data),
	void ff_jref_idct_add (0: binary block, 1: binary line_size, 2: binary dest),
	void ff_jref_idct_put (0: binary block, 1: binary line_size, 2: binary dest),
	void decode2x2 (0: binary gb, 1: i32 linesize, 2: binary dst),
	void decode4x4 (0: binary gb, 1: i32 linesize, 2: binary dst),
	void decode8x8 (0: binary bdsp, 1: binary gb, 2: i32 linesize, 3: binary dst),
	binary ff_kbd_window_init_fixed (0: double alpha, 1: binary window, 2: i32 n),
	binary ff_kbd_window_init (0: binary window, 1: double alpha, 2: i32 n),
	void ff_lag_rac_init (0: binary gb, 1: i32 length, 2: binary l),
	byte lag_get_rac (0: binary l),
	void lag_rac_refill (0: binary l),
	void cx_pktcpy (0: binary dst, 1: binary ctx, 2: binary src),
	i32 ff_libopenh264_check_version (0: binary logctx),
	void ff_libopenh264_trace_callback (0: binary msg, 1: i32 level, 2: binary ctx),
	binary libopenjpeg_guess_pix_fmt (0: binary image),
	i32 libopenjpeg_ispacked (0: binary pix_fmt),
	i32 libopenjpeg_matches_pix_fmt (0: binary pix_fmt, 1: binary image),
	void libopenjpeg_copy_to_packed16 (0: binary picture, 1: binary image),
	void libopenjpeg_copy_to_packed8 (0: binary picture, 1: binary image),
	void libopenjpeg_copyto16 (0: binary picture, 1: binary image),
	void libopenjpeg_copyto8 (0: binary picture, 1: binary image),
	i32 ff_opus_error_to_averror (0: i32 err),
	i32 conv (0: string buf, 1: binary pcm, 2: i32 channels, 3: i32 samples),
	binary ff_vp9_init_static (0: binary codec),
	void cx_pktcpy (0: binary dst, 1: binary ctx, 2: binary src_alpha, 3: binary src),
	binary ff_libwebp_encode_init_common (0: binary avctx),
	i32 ff_libwebp_error_to_averror (0: i32 err),
	i32 ff_libwebp_get_frame (0: binary avctx, 1: binary alt_frame_ptr, 2: binary s, 3: binary pic_ptr, 4: binary frame),
	void ljpeg_encode_yuv_mb (0: binary s, 1: binary pb, 2: binary frame, 3: i32 mb_x, 4: i32 mb_y, 5: i32 predictor),
	i32 loco_get_rice (0: binary r),
	i32 loco_predict (0: i32 stride, 1: binary data),
	void loco_update_rice_param (0: binary r, 1: i32 val),
	binary ff_llauddsp_init (0: binary c),
	void ff_llviddsp_init (0: binary c),
	binary ff_llvidencdsp_init (0: binary c),
	binary ff_lpc_init (0: binary lpc_type, 1: binary s, 2: i32 blocksize, 3: i32 max_order),
	binary ff_lpc_end (0: binary s),
	double ff_lpc_calc_ref_coefs_f (0: binary s, 1: binary samples, 2: binary ref, 3: i32 len, 4: i32 order),
	i32 ff_lpc_calc_coefs (0: binary lpc_type, 1: binary s, 2: binary samples, 3: binary shift, 4: i32 blocksize, 5: i32 lpc_passes, 6: i32 max_order, 7: i32 max_shift, 8: i32 min_order, 9: i32 min_shift, 10: i32 omethod, 11: i32 precision, 12: i32 zero_shift),
	i32 ff_lpc_calc_ref_coefs (0: binary s, 1: binary samples, 2: binary ref, 3: i32 order),
	i32 AAC_RENAME (),
	void compute_ref_coefs (0: binary error, 1: binary ref, 2: binary autoc, 3: i32 max_order),
	void ff_acelp_lp_decode (0: binary lsp_2nd, 1: binary lsp_prev, 2: binary lp_1st, 3: binary lp_2nd, 4: i32 lp_order),
	void ff_acelp_lsf2lspd (0: binary lsf, 1: binary lsp, 2: i32 lp_order),
	void ff_acelp_lsf2lsp (0: binary lsf, 1: binary lsp, 2: i32 lp_order),
	void ff_acelp_lsp2lpc (0: binary lsp, 1: binary lp, 2: i32 lp_half_order),
	void ff_acelp_lspd2lpc (0: binary lsp, 1: binary lpc, 2: i32 lp_half_order),
	void ff_acelp_reorder_lsf (0: binary lsfq, 1: i32 lp_order, 2: i32 lsfq_max, 3: i32 lsfq_min_distance, 4: i32 lsfq_min),
	void ff_amrwb_lsp2lpc (0: binary lsp, 1: binary lp, 2: i32 lp_order),
	void ff_lsp2polyf (0: binary lsp, 1: binary f, 2: i32 lp_half_order),
	void ff_set_min_dist_lsf (0: double min_spacing, 1: binary lsf, 2: i32 size),
	void ff_sort_nearly_sorted_floats (0: binary vals, 1: i32 len),
	i32 ff_lzf_uncompress (0: binary gb, 1: binary size, 2: binary buf),
	binary ff_lzw_decode_close (0: binary p),
	binary ff_lzw_decode_open (0: binary p),
	i32 ff_lzw_decode_init (0: binary p, 1: binary buf, 2: i32 buf_size, 3: i32 csize, 4: i32 mode),
	i32 ff_lzw_decode_tail (0: binary p),
	i32 ff_lzw_decode (0: binary p, 1: i32 len, 2: binary buf),
	i32 ff_lzw_encode_flush (0: binary s, 1: binary lzw_flush_put_bits),
	i32 ff_lzw_encode (0: binary s, 1: binary inbuf, 2: i32 insize),
	i32 findCode (0: binary s, 1: i32 hash_prefix, 2: byte c),
	i32 hashNext (0: binary offset, 1: i32 head),
	i32 hashOffset (0: binary head),
	i32 hash (0: binary add, 1: i32 head),
	void addCode (0: binary s, 1: i32 hash_code, 2: i32 hash_prefix, 3: byte c),
	void ff_lzw_encode_init (0: binary mode, 1: binary s, 2: i32 maxbits, 3: i32 outsize, 4: binary outbuf, 5: binary lzw_put_bits),
	void writeCode (0: binary s, 1: i32 c),
	i16 mace_broken_clip_int16 (0: i32 n),
	binary MULH (0: i32 a, 1: i32 b),
	binary bitswap_32 (0: i32 x),
	binary UMULH (0: binary a, 1: binary b),
	binary ff_sqrf (0: double a),
	binary median4 (0: i32 a, 1: i32 b, 2: i32 c, 3: i32 d),
	binary mid_pred (0: i32 a, 1: i32 b, 2: i32 c),
	binary sign_extend (0: i32 val, 1: binary bits),
	binary ff_sqrt (0: binary a),
	binary zero_extend (0: binary bits, 1: binary val),
	byte ff_u8_to_s8 (0: byte a),
	binary ff_mdct15_init (0: binary ps, 1: double scale, 2: i32 N, 3: i32 inverse),
	binary ff_mdct15_uninit (0: binary ps),
	i32 init_pfa_reindex_tabs (0: binary s),
	void fft5 (0: binary in, 1: binary out, 2: binary exptab),
	void ff_mdct_calcw_c (0: binary s, 1: binary out, 2: binary input),
	binary ff_mdct_init (0: binary s, 1: double scale, 2: i32 inverse, 3: i32 nbits),
	binary ff_mdct_end (0: binary s),
	void ff_imdct_calc_c (0: binary s, 1: binary output, 2: binary input),
	void ff_imdct_half_c (0: binary s, 1: binary output, 2: binary input),
	void ff_mdct_calc_c (0: binary s, 1: binary out, 2: binary input),
	i32 decode_mb (0: binary a),
	i32 mdec_decode_block_intra (0: binary a, 1: binary block, 2: i32 n),
	void idct_put (0: binary frame, 1: binary a, 2: i32 mb_x, 3: i32 mb_y),
	binary WRAPPER8_16_SQ (),
	binary ff_me_cmp_init (0: binary avctx, 1: binary c),
	i32 pix_abs16_c (0: binary v, 1: i32 h, 2: binary stride, 3: binary pix1, 4: binary pix2),
	i32 pix_abs8_c (0: binary v, 1: i32 h, 2: binary stride, 3: binary pix1, 4: binary pix2),
	i32 pix_median_abs16_c (0: binary v, 1: i32 h, 2: binary stride, 3: binary pix1, 4: binary pix2),
	i32 pix_median_abs8_c (0: binary v, 1: i32 h, 2: binary stride, 3: binary pix1, 4: binary pix2),
	void ff_set_cmp (0: binary c, 1: i32 type, 2: binary cmp),
	binary av_mediacodec_alloc_context (),
	i32 av_mediacodec_default_init (0: binary avctx, 1: binary ctx, 2: binary surface),
	i32 av_mediacodec_release_buffer (0: binary buffer, 1: i32 render),
	i32 av_mediacodec_render_buffer_at_time (0: binary buffer, 1: i64 time),
	void av_mediacodec_default_free (0: binary avctx),
	i32 ff_mediacodec_surface_unref (0: binary log_ctx, 1: binary surface),
	binary ff_mediacodec_surface_ref (0: binary log_ctx, 1: binary surface),
	void ff_mediacodec_sw_buffer_copy_yuv420_packed_semi_planar_64x32Tile2m8ka (0: binary avctx, 1: binary frame, 2: binary info, 3: binary s, 4: i64 size, 5: binary data),
	void ff_mediacodec_sw_buffer_copy_yuv420_packed_semi_planar (0: binary avctx, 1: binary frame, 2: binary info, 3: binary s, 4: i64 size, 5: binary data),
	void ff_mediacodec_sw_buffer_copy_yuv420_planar (0: binary avctx, 1: binary frame, 2: binary info, 3: binary s, 4: i64 size, 5: binary data),
	void ff_mediacodec_sw_buffer_copy_yuv420_semi_planar (0: binary avctx, 1: binary frame, 2: binary info, 3: binary s, 4: i64 size, 5: binary data),
	binary DECLARE_FF_AMEDIACODEC_CREATE_FUNC (),
	binary codec_create (0: binary arg, 1: i32 method),
	binary ff_AMediaCodec_getOutputFormat (0: binary codec),
	binary ff_AMediaFormat_new (),
	string ff_AMediaCodecList_getCodecNameByType (0: binary mime, 1: i32 encoder, 2: i32 profile, 3: binary log_ctx),
	string ff_AMediaCodec_getName (0: binary codec),
	string ff_AMediaFormat_toString (0: binary format),
	i32 ff_AMediaCodecProfile_getProfileFromAVCodecContext (0: binary avctx),
	i32 ff_AMediaCodec_cleanOutputBuffers (0: binary codec),
	i32 ff_AMediaCodec_configure (0: binary codec, 1: binary format, 2: i32 flags, 3: binary crypto, 4: binary surface),
	i32 ff_AMediaCodec_flush (0: binary codec),
	i32 ff_AMediaCodec_getBufferFlagCodecConfig (0: binary codec),
	i32 ff_AMediaCodec_getBufferFlagEndOfStream (0: binary codec),
	i32 ff_AMediaCodec_getBufferFlagKeyFrame (0: binary codec),
	i32 ff_AMediaCodec_getConfigureFlagEncode (0: binary codec),
	i32 ff_AMediaCodec_infoOutputBuffersChanged (0: binary codec, 1: binary idx),
	i32 ff_AMediaCodec_infoOutputFormatChanged (0: binary codec, 1: binary idx),
	i32 ff_AMediaCodec_infoTryAgainLater (0: binary codec, 1: binary idx),
	i32 ff_AMediaCodec_queueInputBuffer (0: binary codec, 1: binary offset, 2: i64 idx, 3: i64 size, 4: i32 flags, 5: i64 time),
	i32 ff_AMediaCodec_releaseOutputBufferAtTime (0: binary codec, 1: i64 timestampNs, 2: i64 idx),
	i32 ff_AMediaCodec_releaseOutputBuffer (0: binary codec, 1: i32 render, 2: i64 idx),
	i32 ff_AMediaCodec_start (0: binary codec),
	i32 ff_AMediaCodec_stop (0: binary codec),
	i32 ff_AMediaFormat_delete (0: binary format),
	i32 ff_AMediaFormat_getBuffer (0: binary format, 1: binary name, 2: binary size, 3: binary data),
	i32 ff_AMediaFormat_getFloat (0: binary format, 1: binary name, 2: binary out),
	i32 ff_AMediaFormat_getInt32 (0: binary format, 1: binary name, 2: binary out),
	i32 ff_AMediaFormat_getInt64 (0: binary format, 1: binary name, 2: binary out),
	i32 ff_AMediaFormat_getString (0: binary format, 1: binary out, 2: binary name),
	i32 ff_Build_SDK_INT (0: binary avctx),
	binary ff_AMediaCodec_dequeueInputBuffer (0: binary codec, 1: i64 timeoutUs),
	binary ff_AMediaCodec_dequeueOutputBuffer (0: binary codec, 1: binary info, 2: i64 timeoutUs),
	binary ff_AMediaCodec_getInputBuffer (0: binary codec, 1: binary out_size, 2: i64 idx),
	binary ff_AMediaCodec_getOutputBuffer (0: binary codec, 1: binary out_size, 2: i64 idx),
	void ff_AMediaFormat_setBuffer (0: binary format, 1: binary name, 2: i64 size, 3: binary data),
	void ff_AMediaFormat_setFloat (0: binary format, 1: binary name, 2: double value),
	void ff_AMediaFormat_setInt32 (0: binary format, 1: binary name, 2: i32 value),
	void ff_AMediaFormat_setInt64 (0: binary format, 1: binary name, 2: i64 value),
	void ff_AMediaFormat_setString (0: binary format, 1: binary name, 2: binary value),
	i32 ff_mediacodec_dec_close (0: binary avctx, 1: binary s),
	i32 ff_mediacodec_dec_flush (0: binary avctx, 1: binary s),
	i32 ff_mediacodec_dec_init (0: binary avctx, 1: binary format, 2: binary s, 3: binary mime),
	i32 ff_mediacodec_dec_is_flushing (0: binary avctx, 1: binary s),
	i32 ff_mediacodec_dec_receive (0: binary avctx, 1: binary frame, 2: binary s, 3: binary wait),
	i32 ff_mediacodec_dec_send (0: binary avctx, 1: binary pkt, 2: binary s, 3: binary wait),
	void ff_aac_coder_init_mips (0: binary c),
	void ff_aacdec_init_mips (0: binary c),
	binary VMUL2S_mips (0: binary scale, 1: binary v, 2: binary dst, 3: binary idx, 4: binary sign),
	binary VMUL2_mips (0: binary scale, 1: binary v, 2: binary dst, 3: binary idx),
	binary VMUL4S_mips (0: binary scale, 1: binary v, 2: binary dst, 3: binary idx, 4: binary sign),
	binary VMUL4_mips (0: binary scale, 1: binary v, 2: binary dst, 3: binary idx),
	void ff_psdsp_init_mips (0: binary s),
	void calc_thr_3gpp_mips (0: binary pch, 1: binary wi, 2: binary coefs, 3: binary cutoff, 4: binary num_bands, 5: binary band_sizes),
	void psy_hp_filter_mips (0: binary firbuf, 1: binary psy_fir_coeffs, 2: binary hpfsmpl),
	void ff_aacsbr_func_ptr_init_mips (0: binary c),
	void sbr_qmf_analysis_mips (0: binary fdsp, 1: binary mdct, 2: binary sbrdsp, 3: binary in, 4: binary x, 5: binary z, 6: i32 buf_idx),
	void sbr_qmf_synthesis_mips (0: binary fdsp, 1: binary mdct, 2: binary sbrdsp, 3: binary div, 4: binary out, 5: binary v0, 6: binary v_off),
	void ff_ac3dsp_init_mips (0: binary c, 1: i32 bit_exact),
	void ff_acelp_filter_init_mips (0: binary c),
	void ff_acelp_vectors_init_mips (0: binary c),
	void ff_hb_fir_filter_mips (0: binary in, 1: binary fir_coef, 2: binary out, 3: binary mem),
	void ff_blockdsp_init_mips (0: binary c),
	void ff_clear_block_mmi (0: binary block),
	void ff_clear_blocks_mmi (0: binary block),
	void ff_fill_block16_mmi (0: i32 h, 1: binary line_size, 2: binary block, 3: byte value),
	void ff_fill_block8_mmi (0: i32 h, 1: binary line_size, 2: binary block, 3: byte value),
	void ff_clear_block_msa (0: binary block),
	void ff_clear_blocks_msa (0: binary block),
	void ff_fill_block16_msa (0: i32 height, 1: binary stride, 2: binary src, 3: byte val),
	void ff_fill_block8_msa (0: i32 height, 1: binary stride, 2: binary src, 3: byte val),
	binary get_cabac_inline (0: binary c, 1: binary state),
	void ff_celp_filter_init_mips (0: binary c),
	void ff_celp_math_init_mips (0: binary c),
	void compute_antialias_mips_fixed (0: binary g, 1: binary s),
	void compute_antialias_mips_float (0: binary g, 1: binary s),
	binary ff_fft_init_mips (0: binary s),
	binary ff_fmt_convert_init_mips (0: binary c),
	binary ff_h263dsp_init_mips (0: binary c),
	void ff_h263_h_loop_filter_msa (0: i32 q_scale, 1: i32 stride, 2: binary src),
	void ff_h263_v_loop_filter_msa (0: i32 q_scale, 1: i32 stride, 2: binary src),
	binary ff_h264chroma_init_mips (0: binary c, 1: i32 bit_depth),
	void ff_avg_h264_chroma_mc4_mmi (0: i32 h, 1: i32 x, 2: i32 y, 3: binary stride, 4: binary dst, 5: binary src),
	void ff_avg_h264_chroma_mc8_mmi (0: i32 h, 1: i32 x, 2: i32 y, 3: binary stride, 4: binary dst, 5: binary src),
	void ff_put_h264_chroma_mc4_mmi (0: i32 h, 1: i32 x, 2: i32 y, 3: binary stride, 4: binary dst, 5: binary src),
	void ff_put_h264_chroma_mc8_mmi (0: i32 h, 1: i32 x, 2: i32 y, 3: binary stride, 4: binary dst, 5: binary src),
	void ff_avg_h264_chroma_mc2_msa (0: i32 height, 1: i32 x, 2: i32 y, 3: binary stride, 4: binary dst, 5: binary src),
	void ff_avg_h264_chroma_mc4_msa (0: i32 height, 1: i32 x, 2: i32 y, 3: binary stride, 4: binary dst, 5: binary src),
	void ff_avg_h264_chroma_mc8_msa (0: i32 height, 1: i32 x, 2: i32 y, 3: binary stride, 4: binary dst, 5: binary src),
	void ff_put_h264_chroma_mc2_msa (0: i32 height, 1: i32 x, 2: i32 y, 3: binary stride, 4: binary dst, 5: binary src),
	void ff_put_h264_chroma_mc4_msa (0: i32 height, 1: i32 x, 2: i32 y, 3: binary stride, 4: binary dst, 5: binary src),
	void ff_put_h264_chroma_mc8_msa (0: i32 height, 1: i32 x, 2: i32 y, 3: binary stride, 4: binary dst, 5: binary src),
	binary ff_h264dsp_init_mips (0: binary c, 1: binary bit_depth, 2: binary chroma_format_idc),
	void ff_deblock_h_chroma_8_mmi (0: binary tc0, 1: i32 alpha, 2: i32 beta, 3: i32 stride, 4: binary pix),
	void ff_deblock_h_chroma_intra_8_mmi (0: i32 alpha, 1: i32 beta, 2: i32 stride, 3: binary pix),
	void ff_deblock_h_luma_8_mmi (0: binary tc0, 1: i32 alpha, 2: i32 beta, 3: i32 stride, 4: binary pix),
	void ff_deblock_h_luma_intra_8_mmi (0: i32 alpha, 1: i32 beta, 2: i32 stride, 3: binary pix),
	void ff_deblock_v8_luma_8_mmi (0: binary tc0, 1: i32 alpha, 2: i32 beta, 3: i32 stride, 4: binary pix),
	void ff_deblock_v_chroma_8_mmi (0: binary tc0, 1: i32 alpha, 2: i32 beta, 3: binary stride, 4: binary pix),
	void ff_deblock_v_chroma_intra_8_mmi (0: i32 alpha, 1: i32 beta, 2: i32 stride, 3: binary pix),
	void ff_deblock_v_luma_8_mmi (0: binary tc0, 1: i32 alpha, 2: i32 beta, 3: i32 stride, 4: binary pix),
	void ff_deblock_v_luma_intra_8_mmi (0: i32 alpha, 1: i32 beta, 2: i32 stride, 3: binary pix),
	void ff_h264_add_pixels4_8_mmi (0: binary src, 1: i32 stride, 2: binary dst),
	void ff_h264_biweight_pixels16_8_mmi (0: i32 height, 1: i32 log2_denom, 2: i32 offset, 3: i32 weightd, 4: i32 weights, 5: binary stride, 6: binary dst, 7: binary src),
	void ff_h264_biweight_pixels4_8_mmi (0: i32 height, 1: i32 log2_denom, 2: i32 offset, 3: i32 weightd, 4: i32 weights, 5: binary stride, 6: binary dst, 7: binary src),
	void ff_h264_biweight_pixels8_8_mmi (0: i32 height, 1: i32 log2_denom, 2: i32 offset, 3: i32 weightd, 4: i32 weights, 5: binary stride, 6: binary dst, 7: binary src),
	void ff_h264_chroma422_dc_dequant_idct_8_mmi (0: binary block, 1: i32 qmul),
	void ff_h264_chroma_dc_dequant_idct_8_mmi (0: binary block, 1: i32 qmul),
	void ff_h264_idct8_add4_8_mmi (0: binary block_offset, 1: binary nnzc, 2: binary block, 3: i32 stride, 4: binary dst),
	void ff_h264_idct8_add_8_mmi (0: binary block, 1: i32 stride, 2: binary dst),
	void ff_h264_idct8_dc_add_8_mmi (0: binary block, 1: i32 stride, 2: binary dst),
	void ff_h264_idct_add16_8_mmi (0: binary block_offset, 1: binary nnzc, 2: binary block, 3: i32 stride, 4: binary dst),
	void ff_h264_idct_add16intra_8_mmi (0: binary block_offset, 1: binary nnzc, 2: binary block, 3: i32 stride, 4: binary dst),
	void ff_h264_idct_add8_422_8_mmi (0: binary block_offset, 1: binary nnzc, 2: binary block, 3: i32 stride, 4: binary dest),
	void ff_h264_idct_add8_8_mmi (0: binary block_offset, 1: binary nnzc, 2: binary block, 3: i32 stride, 4: binary dest),
	void ff_h264_idct_add_8_mmi (0: binary block, 1: i32 stride, 2: binary dst),
	void ff_h264_idct_dc_add_8_mmi (0: binary block, 1: i32 stride, 2: binary dst),
	void ff_h264_luma_dc_dequant_idct_8_mmi (0: binary input, 1: binary output, 2: i32 qmul),
	void ff_h264_weight_pixels16_8_mmi (0: i32 height, 1: i32 log2_denom, 2: i32 offset, 3: i32 weight, 4: binary stride, 5: binary block),
	void ff_h264_weight_pixels4_8_mmi (0: i32 height, 1: i32 log2_denom, 2: i32 offset, 3: i32 weight, 4: binary stride, 5: binary block),
	void ff_h264_weight_pixels8_8_mmi (0: i32 height, 1: i32 log2_denom, 2: i32 offset, 3: i32 weight, 4: binary stride, 5: binary block),
	void ff_biweight_h264_pixels16_8_msa (0: i32 height, 1: i32 log2_denom, 2: i32 offset_in, 3: i32 weight_dst, 4: i32 weight_src, 5: binary stride, 6: binary dst, 7: binary src),
	void ff_biweight_h264_pixels4_8_msa (0: i32 height, 1: i32 log2_denom, 2: i32 offset, 3: i32 weight_dst, 4: i32 weight_src, 5: binary stride, 6: binary dst, 7: binary src),
	void ff_biweight_h264_pixels8_8_msa (0: i32 height, 1: i32 log2_denom, 2: i32 offset, 3: i32 weight_dst, 4: i32 weight_src, 5: binary stride, 6: binary dst, 7: binary src),
	void ff_h264_h_loop_filter_chroma422_mbaff_msa (0: i32 alpha, 1: i32 beta, 2: i32 ystride, 3: binary tc0, 4: binary src),
	void ff_h264_h_loop_filter_chroma422_msa (0: i32 alpha, 1: i32 beta, 2: i32 ystride, 3: binary tc0, 4: binary src),
	void ff_h264_h_loop_filter_luma_mbaff_intra_msa (0: i32 alpha, 1: i32 beta, 2: i32 ystride, 3: binary src),
	void ff_h264_h_loop_filter_luma_mbaff_msa (0: i32 alpha, 1: i32 beta, 2: i32 ystride, 3: binary tc0, 4: binary src),
	void ff_h264_h_lpf_chroma_inter_msa (0: binary tc, 1: i32 alpha, 2: i32 beta, 3: i32 img_width, 4: binary data),
	void ff_h264_h_lpf_chroma_intra_msa (0: i32 alpha, 1: i32 beta, 2: i32 img_width, 3: binary data),
	void ff_h264_h_lpf_luma_inter_msa (0: binary tc, 1: i32 alpha, 2: i32 beta, 3: i32 img_width, 4: binary data),
	void ff_h264_h_lpf_luma_intra_msa (0: i32 alpha, 1: i32 beta, 2: i32 img_width, 3: binary data),
	void ff_h264_v_lpf_chroma_inter_msa (0: binary tc, 1: i32 alpha, 2: i32 beta, 3: i32 img_width, 4: binary data),
	void ff_h264_v_lpf_chroma_intra_msa (0: i32 alpha, 1: i32 beta, 2: i32 img_width, 3: binary data),
	void ff_h264_v_lpf_luma_inter_msa (0: binary tc, 1: i32 alpha, 2: i32 beta, 3: i32 img_width, 4: binary data),
	void ff_h264_v_lpf_luma_intra_msa (0: i32 alpha, 1: i32 beta, 2: i32 img_width, 3: binary data),
	void ff_weight_h264_pixels16_8_msa (0: i32 height, 1: i32 log2_denom, 2: i32 offset_in, 3: i32 weight_src, 4: binary stride, 5: binary src),
	void ff_weight_h264_pixels4_8_msa (0: i32 height, 1: i32 log2_denom, 2: i32 offset, 3: i32 weight_src, 4: binary stride, 5: binary src),
	void ff_weight_h264_pixels8_8_msa (0: i32 height, 1: i32 log2_denom, 2: i32 offset, 3: i32 weight_src, 4: binary stride, 5: binary src),
	void ff_h264_deq_idct_luma_dc_msa (0: binary dst, 1: binary src, 2: i32 de_qval),
	void ff_h264_idct4x4_addblk_dc_msa (0: binary src, 1: i32 dst_stride, 2: binary dst),
	void ff_h264_idct8_add4_msa (0: binary blk_offset, 1: binary nzc, 2: binary block, 3: i32 dst_stride, 4: binary dst),
	void ff_h264_idct8_addblk_msa (0: binary src, 1: i32 dst_stride, 2: binary dst),
	void ff_h264_idct8_dc_addblk_msa (0: binary src, 1: i32 dst_stride, 2: binary dst),
	void ff_h264_idct_add16_intra_msa (0: binary blk_offset, 1: binary nzc, 2: binary block, 3: i32 dst_stride, 4: binary dst),
	void ff_h264_idct_add16_msa (0: binary blk_offset, 1: binary nzc, 2: binary block, 3: i32 dst_stride, 4: binary dst),
	void ff_h264_idct_add8_422_msa (0: binary blk_offset, 1: binary nzc, 2: binary block, 3: i32 dst_stride, 4: binary dst),
	void ff_h264_idct_add8_msa (0: binary blk_offset, 1: binary nzc, 2: binary block, 3: i32 dst_stride, 4: binary dst),
	void ff_h264_idct_add_msa (0: binary src, 1: i32 dst_stride, 2: binary dst),
	binary ff_h264_pred_init_mips (0: binary h, 1: binary chroma_format_idc, 2: i32 bit_depth, 3: i32 codec_id),
	void ff_pred16x16_dc_8_mmi (0: binary stride, 1: binary src),
	void ff_pred16x16_horizontal_8_mmi (0: binary stride, 1: binary src),
	void ff_pred16x16_plane_h264_8_mmi (0: binary stride, 1: binary src),
	void ff_pred16x16_plane_rv40_8_mmi (0: binary stride, 1: binary src),
	void ff_pred16x16_plane_svq3_8_mmi (0: binary stride, 1: binary src),
	void ff_pred16x16_vertical_8_mmi (0: binary stride, 1: binary src),
	void ff_pred4x4_dc_8_mmi (0: binary topright, 1: binary stride, 2: binary src),
	void ff_pred8x16_horizontal_8_mmi (0: binary stride, 1: binary src),
	void ff_pred8x16_vertical_8_mmi (0: binary stride, 1: binary src),
	void ff_pred8x8_dc_8_mmi (0: binary stride, 1: binary src),
	void ff_pred8x8_horizontal_8_mmi (0: binary stride, 1: binary src),
	void ff_pred8x8_top_dc_8_mmi (0: binary stride, 1: binary src),
	void ff_pred8x8_vertical_8_mmi (0: binary stride, 1: binary src),
	void ff_pred8x8l_dc_8_mmi (0: i32 has_topleft, 1: i32 has_topright, 2: binary stride, 3: binary src),
	void ff_pred8x8l_top_dc_8_mmi (0: i32 has_topleft, 1: i32 has_topright, 2: binary stride, 3: binary src),
	void ff_pred8x8l_vertical_8_mmi (0: i32 has_topleft, 1: i32 has_topright, 2: binary stride, 3: binary src),
	void pred16x16_plane_compat_mmi (0: binary rv40, 1: binary svq3, 2: i32 stride, 3: binary src),
	void ff_h264_intra_pred_dc_128_16x16_msa (0: binary stride, 1: binary src),
	void ff_h264_intra_pred_dc_128_8x8_msa (0: binary stride, 1: binary src),
	void ff_h264_intra_pred_dc_16x16_msa (0: binary stride, 1: binary src),
	void ff_h264_intra_pred_dc_left_16x16_msa (0: binary stride, 1: binary src),
	void ff_h264_intra_pred_dc_top_16x16_msa (0: binary stride, 1: binary src),
	void ff_h264_intra_pred_horiz_16x16_msa (0: binary stride, 1: binary src),
	void ff_h264_intra_pred_horiz_8x8_msa (0: binary stride, 1: binary src),
	void ff_h264_intra_pred_vert_16x16_msa (0: binary stride, 1: binary src),
	void ff_h264_intra_pred_vert_8x8_msa (0: binary stride, 1: binary src),
	void ff_h264_intra_predict_dc_4blk_8x8_msa (0: binary stride, 1: binary src),
	void ff_h264_intra_predict_hor_dc_8x8_msa (0: binary stride, 1: binary src),
	void ff_h264_intra_predict_mad_cow_dc_0l0_8x8_msa (0: binary stride, 1: binary src),
	void ff_h264_intra_predict_mad_cow_dc_0lt_8x8_msa (0: binary stride, 1: binary src),
	void ff_h264_intra_predict_mad_cow_dc_l00_8x8_msa (0: binary stride, 1: binary src),
	void ff_h264_intra_predict_mad_cow_dc_l0t_8x8_msa (0: binary stride, 1: binary src),
	void ff_h264_intra_predict_plane_16x16_msa (0: binary stride, 1: binary src),
	void ff_h264_intra_predict_plane_8x8_msa (0: binary stride, 1: binary src),
	void ff_h264_intra_predict_vert_dc_8x8_msa (0: binary stride, 1: binary src),
	void ff_vp8_pred16x16_127_dc_8_msa (0: binary stride, 1: binary src),
	void ff_vp8_pred16x16_129_dc_8_msa (0: binary stride, 1: binary src),
	void ff_vp8_pred8x8_127_dc_8_msa (0: binary stride, 1: binary src),
	void ff_vp8_pred8x8_129_dc_8_msa (0: binary stride, 1: binary src),
	binary ff_h264qpel_init_mips (0: binary c, 1: i32 bit_depth),
	void copy_block16_mmi (0: binary src, 1: i32 dstStride, 2: i32 h, 3: i32 srcStride, 4: binary dst),
	void copy_block4_mmi (0: binary src, 1: i32 dstStride, 2: i32 h, 3: i32 srcStride, 4: binary dst),
	void copy_block8_mmi (0: binary src, 1: i32 dstStride, 2: i32 h, 3: i32 srcStride, 4: binary dst),
	void ff_avg_h264_qpel16_mc00_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc01_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc02_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc03_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc10_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc11_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc12_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc13_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc20_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc21_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc22_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc23_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc30_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc31_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc32_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc33_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc00_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc01_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc02_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc03_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc10_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc11_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc12_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc13_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc20_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc21_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc22_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc23_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc30_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc31_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc32_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc33_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc00_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc01_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc02_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc03_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc10_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc11_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc12_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc13_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc20_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc21_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc22_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc23_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc30_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc31_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc32_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc33_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc00_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc01_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc02_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc03_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc10_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc11_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc12_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc13_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc20_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc21_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc22_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc23_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc30_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc31_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc32_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc33_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc00_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc01_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc02_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc03_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc10_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc11_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc12_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc13_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc20_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc21_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc22_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc23_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc30_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc31_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc32_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc33_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc00_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc01_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc02_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc03_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc10_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc11_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc12_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc13_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc20_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc21_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc22_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc23_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc30_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc31_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc32_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc33_mmi (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc00_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc01_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc02_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc03_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc10_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc11_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc12_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc13_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc20_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc21_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc22_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc23_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc30_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc31_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc32_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel16_mc33_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc00_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc01_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc02_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc03_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc10_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc11_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc12_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc13_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc20_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc21_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc22_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc23_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc30_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc31_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc32_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel4_mc33_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc00_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc01_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc02_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc03_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc10_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc11_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc12_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc13_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc20_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc21_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc22_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc23_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc30_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc31_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc32_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_h264_qpel8_mc33_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc00_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc01_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc02_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc03_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc10_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc11_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc12_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc13_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc20_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc21_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc22_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc23_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc30_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc31_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc32_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel16_mc33_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc01_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc02_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc03_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc10_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc11_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc12_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc13_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc20_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc21_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc22_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc23_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc30_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc31_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc32_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel4_mc33_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc00_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc01_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc02_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc03_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc10_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc11_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc12_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc13_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc20_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc21_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc22_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc23_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc30_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc31_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc32_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_h264_qpel8_mc33_msa (0: binary src, 1: binary stride, 2: binary dst),
	void ff_hevc_addblk_16x16_msa (0: binary coeffs, 1: binary stride, 2: binary dst),
	void ff_hevc_addblk_32x32_msa (0: binary coeffs, 1: binary stride, 2: binary dst),
	void ff_hevc_addblk_4x4_msa (0: binary coeffs, 1: binary stride, 2: binary dst),
	void ff_hevc_addblk_8x8_msa (0: binary coeffs, 1: binary stride, 2: binary dst),
	void ff_hevc_idct_16x16_msa (0: binary coeffs, 1: i32 col_limit),
	void ff_hevc_idct_32x32_msa (0: binary coeffs, 1: i32 col_limit),
	void ff_hevc_idct_4x4_msa (0: binary coeffs, 1: i32 col_limit),
	void ff_hevc_idct_8x8_msa (0: binary coeffs, 1: i32 col_limit),
	void ff_hevc_idct_dc_16x16_msa (0: binary coeffs),
	void ff_hevc_idct_dc_32x32_msa (0: binary coeffs),
	void ff_hevc_idct_dc_4x4_msa (0: binary coeffs),
	void ff_hevc_idct_dc_8x8_msa (0: binary coeffs),
	void ff_hevc_idct_luma_4x4_msa (0: binary coeffs),
	void ff_hevc_loop_filter_chroma_h_8_msa (0: binary tc, 1: binary src_stride, 2: binary no_p, 3: binary no_q, 4: binary src),
	void ff_hevc_loop_filter_chroma_v_8_msa (0: binary tc, 1: binary src_stride, 2: binary no_p, 3: binary no_q, 4: binary src),
	void ff_hevc_loop_filter_luma_h_8_msa (0: binary tc, 1: i32 beta, 2: binary src_stride, 3: binary no_p, 4: binary no_q, 5: binary src),
	void ff_hevc_loop_filter_luma_v_8_msa (0: binary tc, 1: i32 beta, 2: binary src_stride, 3: binary no_p, 4: binary no_q, 5: binary src),
	void ff_hevc_sao_band_filter_0_8_msa (0: binary sao_offset_val, 1: i32 height, 2: i32 sao_left_class, 3: i32 width, 4: binary stride_dst, 5: binary stride_src, 6: binary dst, 7: binary src),
	void ff_hevc_sao_edge_filter_8_msa (0: binary sao_offset_val, 1: i32 eo, 2: i32 height, 3: i32 width, 4: binary stride_dst, 5: binary dst, 6: binary src),
	void ff_hevc_dsp_init_mips (0: binary c, 1: binary bit_depth),
	void ff_hevc_pred_init_mips (0: binary c, 1: binary bit_depth),
	void ff_hevc_intra_pred_dc_msa (0: binary src_left, 1: binary src_top, 2: i32 c_idx, 3: i32 log2, 4: binary stride, 5: binary dst),
	void ff_hevc_intra_pred_planar_0_msa (0: binary src_left, 1: binary src_top, 2: binary stride, 3: binary dst),
	void ff_hevc_intra_pred_planar_1_msa (0: binary src_left, 1: binary src_top, 2: binary stride, 3: binary dst),
	void ff_hevc_intra_pred_planar_2_msa (0: binary src_left, 1: binary src_top, 2: binary stride, 3: binary dst),
	void ff_hevc_intra_pred_planar_3_msa (0: binary src_left, 1: binary src_top, 2: binary stride, 3: binary dst),
	void ff_intra_pred_8_16x16_msa (0: binary s, 1: i32 c_idx, 2: i32 x0, 3: i32 y0),
	void ff_intra_pred_8_32x32_msa (0: binary s, 1: i32 c_idx, 2: i32 x0, 3: i32 y0),
	void ff_pred_intra_pred_angular_0_msa (0: binary src_left, 1: binary src_top, 2: i32 c_idx, 3: i32 mode, 4: binary stride, 5: binary dst),
	void ff_pred_intra_pred_angular_1_msa (0: binary src_left, 1: binary src_top, 2: i32 c_idx, 3: i32 mode, 4: binary stride, 5: binary dst),
	void ff_pred_intra_pred_angular_2_msa (0: binary src_left, 1: binary src_top, 2: i32 c_idx, 3: i32 mode, 4: binary stride, 5: binary dst),
	void ff_pred_intra_pred_angular_3_msa (0: binary src_left, 1: binary src_top, 2: i32 c_idx, 3: i32 mode, 4: binary stride, 5: binary dst),
	void ff_hpeldsp_init_mips (0: binary c, 1: i32 flags),
	void ff_avg_pixels16_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_avg_pixels16_l2_8_mmi (0: binary src1, 1: binary src2, 2: i32 dst_stride, 3: i32 h, 4: i32 src_stride1, 5: i32 src_stride2, 6: binary dst),
	void ff_avg_pixels16_x2_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_avg_pixels16_xy2_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_avg_pixels16_y2_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_avg_pixels4_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_avg_pixels4_l2_8_mmi (0: binary src1, 1: binary src2, 2: i32 dst_stride, 3: i32 h, 4: i32 src_stride1, 5: i32 src_stride2, 6: binary dst),
	void ff_avg_pixels4_x2_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_avg_pixels4_xy2_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_avg_pixels4_y2_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_avg_pixels8_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_avg_pixels8_l2_8_mmi (0: binary src1, 1: binary src2, 2: i32 dst_stride, 3: i32 h, 4: i32 src_stride1, 5: i32 src_stride2, 6: binary dst),
	void ff_avg_pixels8_x2_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_avg_pixels8_xy2_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_avg_pixels8_y2_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_no_rnd_pixels16_x2_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_no_rnd_pixels16_xy2_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_no_rnd_pixels16_y2_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_no_rnd_pixels8_l2_8_mmi (0: binary src1, 1: binary src2, 2: i32 dst_stride, 3: i32 h, 4: i32 src_stride1, 5: i32 src_stride2, 6: binary dst),
	void ff_put_no_rnd_pixels8_x2_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_no_rnd_pixels8_xy2_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_no_rnd_pixels8_y2_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_pixels16_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_pixels16_l2_8_mmi (0: binary src1, 1: binary src2, 2: i32 dst_stride, 3: i32 h, 4: i32 src_stride1, 5: i32 src_stride2, 6: binary dst),
	void ff_put_pixels16_x2_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_pixels16_xy2_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_pixels16_y2_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_pixels4_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_pixels4_l2_8_mmi (0: binary src1, 1: binary src2, 2: i32 dst_stride, 3: i32 h, 4: i32 src_stride1, 5: i32 src_stride2, 6: binary dst),
	void ff_put_pixels4_x2_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_pixels4_xy2_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_pixels4_y2_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_pixels8_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_pixels8_l2_8_mmi (0: binary src1, 1: binary src2, 2: i32 dst_stride, 3: i32 h, 4: i32 src_stride1, 5: i32 src_stride2, 6: binary dst),
	void ff_put_pixels8_x2_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_pixels8_xy2_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_pixels8_y2_8_mmi (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_avg_pixels16_msa (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_avg_pixels16_x2_msa (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_avg_pixels16_xy2_msa (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_avg_pixels16_y2_msa (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_avg_pixels4_msa (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_avg_pixels4_x2_msa (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_avg_pixels4_xy2_msa (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_avg_pixels4_y2_msa (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_avg_pixels8_msa (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_avg_pixels8_x2_msa (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_avg_pixels8_xy2_msa (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_avg_pixels8_y2_msa (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_no_rnd_pixels16_x2_msa (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_no_rnd_pixels16_xy2_msa (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_no_rnd_pixels16_y2_msa (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_no_rnd_pixels8_x2_msa (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_no_rnd_pixels8_xy2_msa (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_no_rnd_pixels8_y2_msa (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_pixels16_msa (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_pixels16_x2_msa (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_pixels16_xy2_msa (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_pixels16_y2_msa (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_pixels4_x2_msa (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_pixels4_xy2_msa (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_pixels4_y2_msa (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_pixels8_msa (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_pixels8_x2_msa (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_pixels8_xy2_msa (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_pixels8_y2_msa (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	binary ff_idctdsp_init_mips (0: binary avctx, 1: binary c, 2: binary high_bit_depth),
	void ff_add_pixels_clamped_mmi (0: binary block, 1: binary line_size, 2: binary pixels),
	void ff_put_pixels_clamped_mmi (0: binary block, 1: binary line_size, 2: binary pixels),
	void ff_put_signed_pixels_clamped_mmi (0: binary block, 1: binary line_size, 2: binary pixels),
	void ff_add_pixels_clamped_msa (0: binary block, 1: binary line_size, 2: binary pixels),
	void ff_put_pixels_clamped_msa (0: binary block, 1: binary line_size, 2: binary pixels),
	void ff_put_signed_pixels_clamped_msa (0: binary block, 1: binary line_size, 2: binary pixels),
	void ff_iir_filter_init_mips (0: binary f),
	binary ff_lsp2polyf_mips (0: binary lsp, 1: binary f, 2: i32 lp_half_order),
	binary MULH (0: i32 a, 1: i32 b),
	binary mid_pred (0: i32 a, 1: i32 b, 2: i32 c),
	binary ff_me_cmp_init_mips (0: binary avctx, 1: binary c),
	i32 ff_hadamard8_diff8x8_msa (0: binary s, 1: i32 h, 2: binary stride, 3: binary dst, 4: binary src),
	i32 ff_hadamard8_intra8x8_msa (0: binary s, 1: i32 h, 2: binary stride, 3: binary dst, 4: binary src),
	i32 ff_pix_abs16_msa (0: binary v, 1: i32 height, 2: binary stride, 3: binary ref, 4: binary src),
	i32 ff_pix_abs16_x2_msa (0: binary v, 1: i32 h, 2: binary stride, 3: binary pix1, 4: binary pix2),
	i32 ff_pix_abs16_xy2_msa (0: binary v, 1: i32 h, 2: binary stride, 3: binary pix1, 4: binary pix2),
	i32 ff_pix_abs16_y2_msa (0: binary v, 1: i32 h, 2: binary stride, 3: binary pix1, 4: binary pix2),
	i32 ff_pix_abs8_msa (0: binary v, 1: i32 height, 2: binary stride, 3: binary ref, 4: binary src),
	i32 ff_pix_abs8_x2_msa (0: binary v, 1: i32 h, 2: binary stride, 3: binary pix1, 4: binary pix2),
	i32 ff_pix_abs8_xy2_msa (0: binary v, 1: i32 h, 2: binary stride, 3: binary pix1, 4: binary pix2),
	i32 ff_pix_abs8_y2_msa (0: binary v, 1: i32 h, 2: binary stride, 3: binary pix1, 4: binary pix2),
	i32 ff_sse16_msa (0: binary v, 1: i32 height, 2: binary stride, 3: binary ref, 4: binary src),
	i32 ff_sse4_msa (0: binary v, 1: i32 height, 2: binary stride, 3: binary ref, 4: binary src),
	i32 ff_sse8_msa (0: binary v, 1: i32 height, 2: binary stride, 3: binary ref, 4: binary src),
	void ff_mpadsp_init_mipsdsp (0: binary s),
	void ff_mpadsp_init_mipsfpu (0: binary s),
	binary ff_mpv_common_init_mips (0: binary s),
	void ff_dct_unquantize_h263_inter_mmi (0: binary s, 1: binary block, 2: i32 n, 3: i32 qscale),
	void ff_dct_unquantize_h263_intra_mmi (0: binary s, 1: binary block, 2: i32 n, 3: i32 qscale),
	void ff_dct_unquantize_mpeg1_inter_mmi (0: binary s, 1: binary block, 2: i32 n, 3: i32 qscale),
	void ff_dct_unquantize_mpeg1_intra_mmi (0: binary s, 1: binary block, 2: i32 n, 3: i32 qscale),
	void ff_dct_unquantize_mpeg2_intra_mmi (0: binary s, 1: binary block, 2: i32 n, 3: i32 qscale),
	void ff_denoise_dct_mmi (0: binary s, 1: binary block),
	void ff_dct_unquantize_h263_inter_msa (0: binary s, 1: binary block, 2: i32 index, 3: i32 qscale),
	void ff_dct_unquantize_h263_intra_msa (0: binary s, 1: binary block, 2: i32 index, 3: i32 qscale),
	void ff_dct_unquantize_mpeg2_inter_msa (0: binary s, 1: binary block, 2: i32 index, 3: i32 qscale),
	binary ff_mpegvideoencdsp_init_mips (0: binary avctx, 1: binary c),
	i32 ff_pix_sum_msa (0: i32 line_size, 1: binary pix),
	void ff_pixblockdsp_init_mips (0: binary avctx, 1: binary c, 2: binary high_bit_depth),
	void ff_diff_pixels_mmi (0: binary src1, 1: binary src2, 2: binary block, 3: binary stride),
	void ff_get_pixels_8_mmi (0: binary pixels, 1: binary block, 2: binary stride),
	void ff_diff_pixels_msa (0: binary src1, 1: binary src2, 2: binary block, 3: binary stride),
	void ff_get_pixels_16_msa (0: binary src, 1: binary dest, 2: binary stride),
	void ff_get_pixels_8_msa (0: binary src, 1: binary dest, 2: binary stride),
	void ff_qpeldsp_init_mips (0: binary c),
	void ff_avg_width16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_avg_width8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_copy_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_copy_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_horiz_mc_qpel_16width_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_horiz_mc_qpel_8width_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_horiz_mc_qpel_aver_src0_16width_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_horiz_mc_qpel_aver_src0_8width_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_horiz_mc_qpel_aver_src1_16width_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_horiz_mc_qpel_aver_src1_8width_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_horiz_mc_qpel_avg_dst_16width_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_horiz_mc_qpel_avg_dst_8width_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_horiz_mc_qpel_avg_dst_aver_src0_16width_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_horiz_mc_qpel_avg_dst_aver_src0_8width_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_horiz_mc_qpel_avg_dst_aver_src1_16width_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_horiz_mc_qpel_avg_dst_aver_src1_8width_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_horiz_mc_qpel_no_rnd_16width_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_horiz_mc_qpel_no_rnd_8width_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_horiz_mc_qpel_no_rnd_aver_src0_16width_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_horiz_mc_qpel_no_rnd_aver_src0_8width_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_horiz_mc_qpel_no_rnd_aver_src1_16width_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_horiz_mc_qpel_no_rnd_aver_src1_8width_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_aver_h_src0_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_aver_h_src0_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_aver_h_src1_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_aver_h_src1_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_aver_hv_src00_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_aver_hv_src00_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_aver_hv_src01_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_aver_hv_src01_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_aver_hv_src10_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_aver_hv_src10_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_aver_hv_src11_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_aver_hv_src11_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_aver_v_src0_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_aver_v_src0_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_aver_v_src1_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_aver_v_src1_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_avg_dst_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_avg_dst_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_avg_dst_aver_h_src0_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_avg_dst_aver_h_src0_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_avg_dst_aver_h_src1_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_avg_dst_aver_h_src1_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_avg_dst_aver_hv_src00_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_avg_dst_aver_hv_src00_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_avg_dst_aver_hv_src01_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_avg_dst_aver_hv_src01_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_avg_dst_aver_hv_src10_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_avg_dst_aver_hv_src10_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_avg_dst_aver_hv_src11_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_avg_dst_aver_hv_src11_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_avg_dst_aver_v_src0_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_avg_dst_aver_v_src0_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_avg_dst_aver_v_src1_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_avg_dst_aver_v_src1_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_no_rnd_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_no_rnd_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_no_rnd_aver_h_src0_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_no_rnd_aver_h_src0_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_no_rnd_aver_h_src1_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_no_rnd_aver_h_src1_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_no_rnd_aver_hv_src00_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_no_rnd_aver_hv_src00_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_no_rnd_aver_hv_src01_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_no_rnd_aver_hv_src01_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_no_rnd_aver_hv_src10_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_no_rnd_aver_hv_src10_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_no_rnd_aver_hv_src11_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_no_rnd_aver_hv_src11_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_no_rnd_aver_v_src0_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_no_rnd_aver_v_src0_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_no_rnd_aver_v_src1_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_hv_mc_qpel_no_rnd_aver_v_src1_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_vert_mc_qpel_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_vert_mc_qpel_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_vert_mc_qpel_aver_src0_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_vert_mc_qpel_aver_src0_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_vert_mc_qpel_aver_src1_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_vert_mc_qpel_aver_src1_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_vert_mc_qpel_avg_dst_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_vert_mc_qpel_avg_dst_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_vert_mc_qpel_avg_dst_aver_src0_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_vert_mc_qpel_avg_dst_aver_src0_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_vert_mc_qpel_avg_dst_aver_src1_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_vert_mc_qpel_avg_dst_aver_src1_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_vert_mc_qpel_no_rnd_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_vert_mc_qpel_no_rnd_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_vert_mc_qpel_no_rnd_aver_src0_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_vert_mc_qpel_no_rnd_aver_src0_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_vert_mc_qpel_no_rnd_aver_src1_16x16_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_vert_mc_qpel_no_rnd_aver_src1_8x8_msa (0: binary src, 1: binary stride, 2: binary dest),
	void ff_sbrdsp_init_mips (0: binary s),
	void ff_simple_idct_8_mmi (0: binary block),
	void ff_simple_idct_add_8_mmi (0: binary block, 1: binary line_size, 2: binary dest),
	void ff_simple_idct_put_8_mmi (0: binary block, 1: binary line_size, 2: binary dest),
	void ff_simple_idct_add_msa (0: binary block, 1: binary dst_stride, 2: binary dst),
	void ff_simple_idct_msa (0: binary block),
	void ff_simple_idct_put_msa (0: binary block, 1: binary dst_stride, 2: binary dst),
	binary ff_vc1dsp_init_mips (0: binary dsp),
	binary VC1_MSPEL_MC (),
	void ff_avg_no_rnd_vc1_chroma_mc4_mmi (0: i32 h, 1: i32 stride, 2: i32 x, 3: i32 y, 4: binary dst, 5: binary src),
	void ff_avg_no_rnd_vc1_chroma_mc8_mmi (0: i32 h, 1: i32 stride, 2: i32 x, 3: i32 y, 4: binary dst, 5: binary src),
	void ff_avg_vc1_mspel_mc00_16_mmi (0: binary src, 1: i32 rnd, 2: binary stride, 3: binary dst),
	void ff_avg_vc1_mspel_mc00_mmi (0: binary src, 1: i32 rnd, 2: binary stride, 3: binary dst),
	void ff_put_no_rnd_vc1_chroma_mc4_mmi (0: i32 h, 1: i32 stride, 2: i32 x, 3: i32 y, 4: binary dst, 5: binary src),
	void ff_put_vc1_mspel_mc00_16_mmi (0: binary src, 1: i32 rnd, 2: binary stride, 3: binary dst),
	void ff_put_vc1_mspel_mc00_mmi (0: binary src, 1: i32 rnd, 2: binary stride, 3: binary dst),
	void ff_vc1_h_loop_filter16_mmi (0: i32 pq, 1: i32 stride, 2: binary src),
	void ff_vc1_h_loop_filter4_mmi (0: i32 pq, 1: i32 stride, 2: binary src),
	void ff_vc1_h_loop_filter8_mmi (0: i32 pq, 1: i32 stride, 2: binary src),
	void ff_vc1_h_overlap_mmi (0: i32 stride, 1: binary src),
	void ff_vc1_h_s_overlap_mmi (0: binary left, 1: binary right, 2: i32 flags, 3: i32 left_stride, 4: i32 right_stride),
	void ff_vc1_inv_trans_4x4_dc_mmi (0: binary block, 1: binary linesize, 2: binary dest),
	void ff_vc1_inv_trans_4x4_mmi (0: binary block, 1: binary linesize, 2: binary dest),
	void ff_vc1_inv_trans_4x8_dc_mmi (0: binary block, 1: binary linesize, 2: binary dest),
	void ff_vc1_inv_trans_4x8_mmi (0: binary block, 1: binary linesize, 2: binary dest),
	void ff_vc1_inv_trans_8x4_dc_mmi (0: binary block, 1: binary linesize, 2: binary dest),
	void ff_vc1_inv_trans_8x4_mmi (0: binary block, 1: binary linesize, 2: binary dest),
	void ff_vc1_inv_trans_8x8_dc_mmi (0: binary block, 1: binary linesize, 2: binary dest),
	void ff_vc1_inv_trans_8x8_mmi (0: binary block),
	void ff_vc1_v_loop_filter16_mmi (0: i32 pq, 1: i32 stride, 2: binary src),
	void ff_vc1_v_loop_filter4_mmi (0: i32 pq, 1: i32 stride, 2: binary src),
	void ff_vc1_v_loop_filter8_mmi (0: i32 pq, 1: i32 stride, 2: binary src),
	void ff_vc1_v_overlap_mmi (0: i32 stride, 1: binary src),
	void ff_vc1_v_s_overlap_mmi (0: binary bottom, 1: binary top),
	void vc1_loop_filter (0: i32 len, 1: i32 pq, 2: i32 step, 3: i32 stride, 4: binary src),
	binary ff_videodsp_init_mips (0: binary ctx, 1: i32 bpc),
	void ff_put_no_rnd_pixels_l2_mmi (0: binary src1, 1: binary src2, 2: i32 h, 3: binary stride, 4: binary dst),
	void ff_vp3_idct_add_mmi (0: binary block, 1: binary line_size, 2: binary dest),
	void ff_vp3_idct_dc_add_mmi (0: binary block, 1: binary line_size, 2: binary dest),
	void ff_vp3_idct_put_mmi (0: binary block, 1: binary line_size, 2: binary dest),
	void ff_put_no_rnd_pixels_l2_msa (0: binary src1, 1: binary src2, 2: i32 h, 3: binary stride, 4: binary dst),
	void ff_vp3_h_loop_filter_msa (0: binary bounding_values, 1: binary stride, 2: binary first_pixel),
	void ff_vp3_idct_add_msa (0: binary block, 1: binary line_size, 2: binary dest),
	void ff_vp3_idct_dc_add_msa (0: binary block, 1: binary line_size, 2: binary dest),
	void ff_vp3_idct_put_msa (0: binary block, 1: binary line_size, 2: binary dest),
	void ff_vp3_v_loop_filter_msa (0: binary bounding_values, 1: binary stride, 2: binary first_pixel),
	binary ff_vp3dsp_init_mips (0: binary c, 1: i32 flags),
	void ff_vp8_idct_add_msa (0: binary input, 1: binary stride, 2: binary dst),
	void ff_vp8_idct_dc_add4uv_msa (0: binary stride, 1: binary dst),
	void ff_vp8_idct_dc_add4y_msa (0: binary stride, 1: binary dst),
	void ff_vp8_idct_dc_add_msa (0: binary in_dc, 1: binary stride, 2: binary dst),
	void ff_vp8_luma_dc_wht_msa (0: binary input),
	void ff_vp8_h_loop_filter16_inner_msa (0: i32 e, 1: i32 h, 2: i32 i, 3: binary pitch, 4: binary src),
	void ff_vp8_h_loop_filter16_msa (0: i32 b_limit_in, 1: i32 limit_in, 2: i32 thresh_in, 3: binary pitch, 4: binary src),
	void ff_vp8_h_loop_filter8uv_inner_msa (0: i32 b_limit_in, 1: i32 limit_in, 2: i32 thresh_in, 3: binary pitch, 4: binary src_u, 5: binary src_v),
	void ff_vp8_h_loop_filter8uv_msa (0: i32 b_limit_in, 1: i32 limit_in, 2: i32 thresh_in, 3: binary pitch, 4: binary src_u, 5: binary src_v),
	void ff_vp8_h_loop_filter_simple_msa (0: i32 b_limit_ptr, 1: binary pitch, 2: binary src),
	void ff_vp8_v_loop_filter16_inner_msa (0: i32 e, 1: i32 h, 2: i32 i, 3: binary pitch, 4: binary src),
	void ff_vp8_v_loop_filter16_msa (0: i32 b_limit_in, 1: i32 limit_in, 2: i32 thresh_in, 3: binary pitch, 4: binary src),
	void ff_vp8_v_loop_filter8uv_inner_msa (0: i32 b_limit_in, 1: i32 limit_in, 2: i32 thresh_in, 3: binary pitch, 4: binary src_u, 5: binary src_v),
	void ff_vp8_v_loop_filter8uv_msa (0: i32 b_limit_in, 1: i32 limit_in, 2: i32 thresh_in, 3: binary pitch, 4: binary src_u, 5: binary src_v),
	void ff_vp8_v_loop_filter_simple_msa (0: i32 b_limit_ptr, 1: binary pitch, 2: binary src),
	void ff_put_vp8_bilinear16_h_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_bilinear16_hv_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_bilinear16_v_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_bilinear4_h_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_bilinear4_hv_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_bilinear4_v_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_bilinear8_h_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_bilinear8_hv_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_bilinear8_v_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel16_h4_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel16_h4v4_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel16_h4v6_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel16_h6_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel16_h6v4_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel16_h6v6_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel16_v4_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel16_v6_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel4_h4_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel4_h4v4_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel4_h4v6_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel4_h6_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel4_h6v4_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel4_h6v6_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel4_v4_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel4_v6_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel8_h4_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel8_h4v4_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel8_h4v6_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel8_h6_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel8_h6v4_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel8_h6v6_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel8_v4_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel8_v6_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_pixels16_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	void ff_put_vp8_pixels8_msa (0: i32 height, 1: i32 mx, 2: i32 my, 3: binary dst_stride, 4: binary src_stride, 5: binary dst, 6: binary src),
	binary ff_vp8dsp_init_mips (0: binary dsp),
	void ff_put_vp8_bilinear16_h_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dstride, 4: binary sstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_bilinear16_hv_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dstride, 4: binary sstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_bilinear16_v_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dstride, 4: binary sstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_bilinear4_h_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dstride, 4: binary sstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_bilinear4_hv_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dstride, 4: binary sstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_bilinear4_v_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dstride, 4: binary sstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_bilinear8_h_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dstride, 4: binary sstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_bilinear8_hv_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dstride, 4: binary sstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_bilinear8_v_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dstride, 4: binary sstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel16_h4_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dststride, 4: binary srcstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel16_h4v4_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dststride, 4: binary srcstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel16_h4v6_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dststride, 4: binary srcstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel16_h6_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dststride, 4: binary srcstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel16_h6v4_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dststride, 4: binary srcstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel16_h6v6_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dststride, 4: binary srcstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel16_v4_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dststride, 4: binary srcstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel16_v6_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dststride, 4: binary srcstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel4_h4_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dststride, 4: binary srcstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel4_h4v4_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dststride, 4: binary srcstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel4_h4v6_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dststride, 4: binary srcstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel4_h6_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dststride, 4: binary srcstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel4_h6v4_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dststride, 4: binary srcstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel4_h6v6_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dststride, 4: binary srcstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel4_v4_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dststride, 4: binary srcstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel4_v6_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dststride, 4: binary srcstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel8_h4_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dststride, 4: binary srcstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel8_h4v4_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dststride, 4: binary srcstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel8_h4v6_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dststride, 4: binary srcstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel8_h6_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dststride, 4: binary srcstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel8_h6v4_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dststride, 4: binary srcstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel8_h6v6_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dststride, 4: binary srcstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel8_v4_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dststride, 4: binary srcstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_epel8_v6_mmi (0: i32 h, 1: i32 mx, 2: i32 my, 3: binary dststride, 4: binary srcstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_pixels16_mmi (0: i32 h, 1: i32 x, 2: i32 y, 3: binary dststride, 4: binary srcstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_pixels4_mmi (0: i32 h, 1: i32 x, 2: i32 y, 3: binary dststride, 4: binary srcstride, 5: binary dst, 6: binary src),
	void ff_put_vp8_pixels8_mmi (0: i32 h, 1: i32 x, 2: i32 y, 3: binary dststride, 4: binary srcstride, 5: binary dst, 6: binary src),
	void ff_vp8_h_loop_filter16_inner_mmi (0: i32 flim_E, 1: i32 flim_I, 2: i32 hev_thresh, 3: binary stride, 4: binary dst),
	void ff_vp8_h_loop_filter16_mmi (0: i32 flim_E, 1: i32 flim_I, 2: i32 hev_thresh, 3: binary stride, 4: binary dst),
	void ff_vp8_h_loop_filter8uv_inner_mmi (0: i32 flim_E, 1: i32 flim_I, 2: i32 hev_thresh, 3: binary stride, 4: binary dstU, 5: binary dstV),
	void ff_vp8_h_loop_filter8uv_mmi (0: i32 flim_E, 1: i32 flim_I, 2: i32 hev_thresh, 3: binary stride, 4: binary dstU, 5: binary dstV),
	void ff_vp8_h_loop_filter_simple_mmi (0: i32 flim, 1: binary stride, 2: binary dst),
	void ff_vp8_idct_add_mmi (0: binary block, 1: binary stride, 2: binary dst),
	void ff_vp8_idct_dc_add4uv_mmi (0: binary stride, 1: binary dst),
	void ff_vp8_idct_dc_add4y_mmi (0: binary stride, 1: binary dst),
	void ff_vp8_idct_dc_add_mmi (0: binary block, 1: binary stride, 2: binary dst),
	void ff_vp8_luma_dc_wht_dc_mmi (0: binary dc),
	void ff_vp8_luma_dc_wht_mmi (0: binary dc),
	void ff_vp8_v_loop_filter16_inner_mmi (0: i32 flim_E, 1: i32 flim_I, 2: i32 hev_thresh, 3: binary stride, 4: binary dst),
	void ff_vp8_v_loop_filter16_mmi (0: i32 flim_E, 1: i32 flim_I, 2: i32 hev_thresh, 3: binary stride, 4: binary dst),
	void ff_vp8_v_loop_filter8uv_inner_mmi (0: i32 flim_E, 1: i32 flim_I, 2: i32 hev_thresh, 3: binary stride, 4: binary dstU, 5: binary dstV),
	void ff_vp8_v_loop_filter8uv_mmi (0: i32 flim_E, 1: i32 flim_I, 2: i32 hev_thresh, 3: binary stride, 4: binary dstU, 5: binary dstV),
	void ff_vp8_v_loop_filter_simple_mmi (0: i32 flim, 1: binary stride, 2: binary dst),
	void ff_iadst_iadst_16x16_add_msa (0: binary block, 1: i32 eob, 2: binary stride, 3: binary dst),
	void ff_iadst_iadst_4x4_add_msa (0: binary block, 1: i32 eob, 2: binary stride, 3: binary dst),
	void ff_iadst_iadst_8x8_add_msa (0: binary block, 1: i32 eob, 2: binary stride, 3: binary dst),
	void ff_iadst_idct_16x16_add_msa (0: binary block, 1: i32 eob, 2: binary stride, 3: binary dst),
	void ff_iadst_idct_4x4_add_msa (0: binary block, 1: i32 eob, 2: binary stride, 3: binary dst),
	void ff_iadst_idct_8x8_add_msa (0: binary block, 1: i32 eob, 2: binary stride, 3: binary dst),
	void ff_idct_iadst_16x16_add_msa (0: binary block, 1: i32 eob, 2: binary stride, 3: binary dst),
	void ff_idct_iadst_4x4_add_msa (0: binary block, 1: i32 eob, 2: binary stride, 3: binary dst),
	void ff_idct_iadst_8x8_add_msa (0: binary block, 1: i32 eob, 2: binary stride, 3: binary dst),
	void ff_idct_idct_16x16_add_msa (0: binary block, 1: i32 eob, 2: binary stride, 3: binary dst),
	void ff_idct_idct_32x32_add_msa (0: binary block, 1: i32 eob, 2: binary stride, 3: binary dst),
	void ff_idct_idct_4x4_add_msa (0: binary block, 1: i32 eob, 2: binary stride, 3: binary dst),
	void ff_idct_idct_8x8_add_msa (0: binary block, 1: i32 eob, 2: binary stride, 3: binary dst),
	void ff_dc_16x16_msa (0: binary src_left, 1: binary src_top, 2: binary dst_stride, 3: binary dst),
	void ff_dc_32x32_msa (0: binary src_left, 1: binary src_top, 2: binary dst_stride, 3: binary dst),
	void ff_dc_4x4_msa (0: binary src_left, 1: binary src_top, 2: binary dst_stride, 3: binary dst),
	void ff_dc_8x8_msa (0: binary src_left, 1: binary src_top, 2: binary dst_stride, 3: binary dst),
	void ff_hor_16x16_msa (0: binary src, 1: binary top, 2: binary dst_stride, 3: binary dst),
	void ff_hor_32x32_msa (0: binary src, 1: binary top, 2: binary dst_stride, 3: binary dst),
	void ff_tm_16x16_msa (0: binary src_left, 1: binary src_top_ptr, 2: binary dst_stride, 3: binary dst),
	void ff_tm_32x32_msa (0: binary src_left, 1: binary src_top_ptr, 2: binary dst_stride, 3: binary dst),
	void ff_tm_4x4_msa (0: binary src_left, 1: binary src_top_ptr, 2: binary dst_stride, 3: binary dst),
	void ff_tm_8x8_msa (0: binary src_left, 1: binary src_top_ptr, 2: binary dst_stride, 3: binary dst),
	void ff_vert_16x16_msa (0: binary left, 1: binary src, 2: binary dst_stride, 3: binary dst),
	void ff_vert_32x32_msa (0: binary left, 1: binary src, 2: binary dst_stride, 3: binary dst),
	void ff_loop_filter_h_16_16_msa (0: i32 b_limit_ptr, 1: i32 limit_ptr, 2: i32 thresh_ptr, 3: binary pitch, 4: binary src),
	void ff_loop_filter_h_16_8_msa (0: i32 b_limit_ptr, 1: i32 limit_ptr, 2: i32 thresh_ptr, 3: binary pitch, 4: binary src),
	void ff_loop_filter_h_44_16_msa (0: i32 b_limit_ptr, 1: i32 limit_ptr, 2: i32 thresh_ptr, 3: binary pitch, 4: binary src),
	void ff_loop_filter_h_48_16_msa (0: i32 b_limit_ptr, 1: i32 limit_ptr, 2: i32 thresh_ptr, 3: binary pitch, 4: binary src),
	void ff_loop_filter_h_4_8_msa (0: i32 b_limit_ptr, 1: i32 limit_ptr, 2: i32 thresh_ptr, 3: binary pitch, 4: binary src),
	void ff_loop_filter_h_84_16_msa (0: i32 b_limit_ptr, 1: i32 limit_ptr, 2: i32 thresh_ptr, 3: binary pitch, 4: binary src),
	void ff_loop_filter_h_88_16_msa (0: i32 b_limit_ptr, 1: i32 limit_ptr, 2: i32 thresh_ptr, 3: binary pitch, 4: binary src),
	void ff_loop_filter_h_8_8_msa (0: i32 b_limit_ptr, 1: i32 limit_ptr, 2: i32 thresh_ptr, 3: binary pitch, 4: binary src),
	void ff_loop_filter_v_16_16_msa (0: i32 b_limit_ptr, 1: i32 limit_ptr, 2: i32 thresh_ptr, 3: binary pitch, 4: binary src),
	void ff_loop_filter_v_16_8_msa (0: i32 b_limit_ptr, 1: i32 limit_ptr, 2: i32 thresh_ptr, 3: binary pitch, 4: binary src),
	void ff_loop_filter_v_44_16_msa (0: i32 b_limit_ptr, 1: i32 limit_ptr, 2: i32 thresh_ptr, 3: binary pitch, 4: binary src),
	void ff_loop_filter_v_48_16_msa (0: i32 b_limit_ptr, 1: i32 limit_ptr, 2: i32 thresh_ptr, 3: binary pitch, 4: binary src),
	void ff_loop_filter_v_4_8_msa (0: i32 b_limit_ptr, 1: i32 limit_ptr, 2: i32 thresh_ptr, 3: binary pitch, 4: binary src),
	void ff_loop_filter_v_84_16_msa (0: i32 b_limit_ptr, 1: i32 limit_ptr, 2: i32 thresh_ptr, 3: binary pitch, 4: binary src),
	void ff_loop_filter_v_88_16_msa (0: i32 b_limit_ptr, 1: i32 limit_ptr, 2: i32 thresh_ptr, 3: binary pitch, 4: binary src),
	void ff_loop_filter_v_8_8_msa (0: i32 b_limit_ptr, 1: i32 limit_ptr, 2: i32 thresh_ptr, 3: binary pitch, 4: binary src),
	void ff_avg_bilin_16h_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	void ff_avg_bilin_16hv_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	void ff_avg_bilin_16v_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	void ff_avg_bilin_32h_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	void ff_avg_bilin_32hv_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	void ff_avg_bilin_32v_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	void ff_avg_bilin_4h_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	void ff_avg_bilin_4hv_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	void ff_avg_bilin_4v_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	void ff_avg_bilin_64h_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	void ff_avg_bilin_64hv_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	void ff_avg_bilin_64v_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	void ff_avg_bilin_8h_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	void ff_avg_bilin_8hv_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	void ff_avg_bilin_8v_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	void ff_put_bilin_16h_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	void ff_put_bilin_16hv_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	void ff_put_bilin_16v_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	void ff_put_bilin_32h_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	void ff_put_bilin_32hv_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	void ff_put_bilin_32v_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	void ff_put_bilin_4h_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	void ff_put_bilin_4hv_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	void ff_put_bilin_4v_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	void ff_put_bilin_64h_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	void ff_put_bilin_64hv_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	void ff_put_bilin_64v_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	void ff_put_bilin_8h_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	void ff_put_bilin_8hv_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	void ff_put_bilin_8v_msa (0: binary src, 1: i32 height, 2: i32 mx, 3: i32 my, 4: binary dst_stride, 5: binary src_stride, 6: binary dst),
	binary ff_vp9dsp_init_mips (0: binary dsp, 1: i32 bpp),
	binary ff_wmv2dsp_init_mips (0: binary c),
	void ff_wmv2_idct_add_mmi (0: binary block, 1: i32 line_size, 2: binary dest),
	void ff_wmv2_idct_put_mmi (0: binary block, 1: i32 line_size, 2: binary dest),
	void ff_xvid_idct_add_mmi (0: binary block, 1: i32 line_size, 2: binary dest),
	void ff_xvid_idct_mmi (0: binary block),
	void ff_xvid_idct_put_mmi (0: binary block, 1: i32 line_size, 2: binary dest),
	binary ff_xvid_idct_init_mips (0: binary avctx, 1: binary c, 2: binary high_bit_depth),
	binary ff_mjpeg_decode_end (0: binary avctx),
	binary ff_mjpeg_decode_init (0: binary avctx),
	i32 ff_mjpeg_decode_dht (0: binary s),
	i32 ff_mjpeg_decode_dqt (0: binary s),
	i32 ff_mjpeg_decode_frame (0: binary avctx, 1: binary avpkt, 2: binary got_frame, 3: binary data),
	i32 ff_mjpeg_decode_sof (0: binary s),
	i32 ff_mjpeg_decode_sos (0: binary s, 1: binary reference, 2: binary mb_bitmask, 3: i32 mb_bitmask_size),
	i32 ff_mjpeg_find_marker (0: binary s, 1: binary buf_ptr, 2: binary unescaped_buf_ptr, 3: binary buf_end, 4: binary unescaped_buf_size),
	i32 mjpeg_decode_dc (0: binary s, 1: i32 dc_index),
	binary ff_mjpeg_encode_init (0: binary s),
	binary ff_mjpeg_encode_close (0: binary s),
	void ff_mjpeg_encode_code (0: binary s, 1: i32 code, 2: byte table_id),
	void ff_mjpeg_encode_mb (0: binary s),
	void put_marker (0: binary code, 1: binary p),
	binary ff_init_uni_ac_vlc (0: binary huff_size_ac, 1: binary uni_ac_vlc_len),
	i32 ff_mjpeg_encode_stuffing (0: binary s),
	void ff_mjpeg_encode_dc (0: binary pb, 1: i32 val, 2: binary huff_code, 3: binary huff_size),
	void ff_mjpeg_encode_picture_frame (0: binary s),
	void ff_mjpeg_encode_picture_header (0: binary avctx, 1: binary pb, 2: binary intra_scantable, 3: i32 pred, 4: binary chroma_intra_matrix, 5: binary luma_intra_matrix),
	void ff_mjpeg_encode_picture_trailer (0: binary pb, 1: i32 header_bits),
	void ff_mjpeg_escape_FF (0: binary pb, 1: i32 start),
	void ff_mjpeg_init_hvsample (0: binary avctx, 1: binary hsample, 2: binary vsample),
	void ff_mjpeg_encode_huffman_close (0: binary s, 1: i32 max_nval, 2: binary bits, 3: binary val),
	void ff_mjpeg_encode_huffman_init (0: binary s),
	void ff_mjpegenc_huffman_compute_bits (0: binary distincts, 1: binary prob_table, 2: i32 max_length, 3: i32 size),
	void ff_mjpeg_encode_huffman_increment (0: binary s, 1: byte val),
	binary ff_mlp_init_crc (),
	i16 ff_mlp_checksum16 (0: binary buf, 1: binary buf_size),
	byte ff_mlp_calculate_parity (0: binary buf, 1: binary buf_size),
	byte ff_mlp_checksum8 (0: binary buf, 1: binary buf_size),
	byte ff_mlp_restart_checksum (0: binary buf, 1: binary bit_size),
	byte xor_32_to_8 (0: i32 value),
	i32 ff_mlp_read_major_sync (0: binary gb, 1: binary mh, 2: binary log),
	i64 ff_truehd_layout (0: i32 chanmap),
	i32 calculate_sign_huff (0: binary m, 1: binary ch, 2: binary substr),
	i32 read_huff_channels (0: binary gbp, 1: binary m, 2: binary pos, 3: binary substr),
	binary ff_mlpdsp_init (0: binary c),
	i32 ff_mlp_pack_output (0: binary sample_buffer, 1: i32 lossless_check_data, 2: binary output_shift, 3: i32 is32, 4: i16 blockpos, 5: binary ch_assign, 6: byte max_matrix_channel, 7: binary data),
	void ff_mlp_rematrix_channel (0: binary coeffs, 1: binary noise_buffer, 2: binary bypassed_lsbs, 3: binary samples, 4: i32 mask, 5: i32 access_unit_size_pow2, 6: i32 index, 7: i32 matrix_noise_shift, 8: i16 blockpos, 9: binary dest_ch, 10: binary maxchan),
	i32 number_sbits (0: i32 number),
	void codebook_bits_offset (0: binary bo, 1: binary ctx, 2: i16 offset, 3: i32 sample_max, 4: i32 sample_min, 5: i32 codebook, 6: binary channel),
	void codebook_bits (0: binary bo, 1: binary ctx, 2: i32 max, 3: i32 min, 4: i32 codebook, 5: i32 direction, 6: i32 offset, 7: binary channel),
	binary ff_mlz_flush_dict (0: binary mlz),
	binary ff_mlz_init_dict (0: binary mlz, 1: binary context),
	i32 ff_mlz_decompression (0: binary gb, 1: binary mlz, 2: i32 size, 3: binary buff),
	i32 bidir_refine (0: binary s, 1: i32 mb_x, 2: i32 mb_y),
	i32 check_bidir_mv (0: binary s, 1: i32 h, 2: i32 motion_bx, 3: i32 motion_by, 4: i32 motion_fx, 5: i32 motion_fy, 6: i32 pred_bx, 7: i32 pred_by, 8: i32 pred_fx, 9: i32 pred_fy, 10: i32 size),
	i32 direct_search (0: binary s, 1: i32 mb_x, 2: i32 mb_y),
	i32 ff_get_best_fcode (0: binary s, 1: binary mv_table, 2: i32 type),
	i32 ff_init_me (0: binary s),
	i32 ff_pre_estimate_p_frame_motion (0: binary s, 1: i32 mb_x, 2: i32 mb_y),
	i32 get_penalty_factor (0: i32 lambda2, 1: i32 lambda, 2: i32 type),
	i32 h263_mv4_search (0: binary s, 1: i32 mx, 2: i32 my, 3: i32 shift),
	binary update_map_generation (0: binary c),
	void ff_estimate_b_frame_motion (0: binary s, 1: i32 mb_x, 2: i32 mb_y),
	void ff_estimate_p_frame_motion (0: binary s, 1: i32 mb_x, 2: i32 mb_y),
	void ff_fix_long_mvs (0: binary s, 1: binary mv_table, 2: i32 f_code, 3: i32 field_select, 4: i32 truncate, 5: i32 type, 6: binary field_select_table),
	void ff_fix_long_p_mvs (0: binary s),
	void get_limits (0: binary s, 1: i32 x, 2: i32 y),
	void init_interlaced_ref (0: binary s, 1: i32 ref_index),
	void init_mv4_ref (0: binary c),
	void init_ref (0: binary c, 1: i32 ref_index, 2: i32 x, 3: i32 y, 4: binary ref2, 5: binary ref, 6: binary src),
	void set_p_mv_tables (0: binary s, 1: i32 mv4, 2: i32 mx, 3: i32 my),
	i32 ff_h263_round_chroma (0: i32 x),
	i32 ff_epzs_motion_search (0: binary s, 1: binary mx_ptr, 2: binary my_ptr, 3: binary last_mv, 4: i32 h, 5: i32 ref_index, 6: i32 ref_mv_scale, 7: i32 size, 8: i32 src_index),
	i32 ff_get_mb_score (0: binary s, 1: i32 add_rate, 2: i32 h, 3: i32 mx, 4: i32 my, 5: i32 ref_index, 6: i32 size, 7: i32 src_index),
	i32 get_mb_score (0: binary s, 1: i32 add_rate, 2: i32 h, 3: i32 mx, 4: i32 my, 5: i32 ref_index, 6: i32 size, 7: i32 src_index),
	i32 main (),
	binary motionpixels_tableinit (),
	binary mp_build_rgb_yuv_table (0: binary p),
	binary mp_set_zero_yuv (0: binary p),
	i32 mp_yuv_to_rgb (0: i32 clip_rgb, 1: i32 u, 2: i32 v, 3: i32 y),
	binary ff_mpc_init (),
	void ff_mpc_dequantize_and_synth (0: binary c, 1: binary out, 2: i32 channels, 3: i32 maxband),
	void idx_to_quant (0: binary gb, 1: binary c, 2: binary dst, 3: i32 idx),
	i32 mpc8_dec_base (0: binary gb, 1: i32 k, 2: i32 n),
	i32 mpc8_dec_enum (0: binary gb, 1: i32 k, 2: i32 n),
	i32 mpc8_get_mod_golomb (0: binary gb, 1: i32 m),
	binary ff_init_2d_vlc_rl (0: binary rl, 1: i32 flags, 2: binary static_size),
	binary ff_mpeg12_common_init (0: binary s),
	binary ff_mpeg12_init_vlcs (),
	i32 ff_mpeg1_decode_block_intra (0: binary gb, 1: binary quant_matrix, 2: binary block, 3: binary last_dc, 4: i32 index, 5: i32 qscale, 6: binary scantable),
	i32 ff_mpeg1_find_frame_end (0: binary s, 1: binary pc, 2: binary buf, 3: i32 buf_size),
	void ff_mpeg1_clean_buffers (0: binary s),
	i32 decode_dc (0: binary gb, 1: i32 component),
	i32 get_dmv (0: binary s),
	i32 mpeg1_decode_block_inter (0: binary s, 1: binary block, 2: i32 n),
	i32 mpeg1_fast_decode_block_inter (0: binary s, 1: binary block, 2: i32 n),
	i32 mpeg2_decode_block_intra (0: binary s, 1: binary block, 2: i32 n),
	i32 mpeg2_decode_block_non_intra (0: binary s, 1: binary block, 2: i32 n),
	i32 mpeg2_fast_decode_block_intra (0: binary s, 1: binary block, 2: i32 n),
	i32 mpeg2_fast_decode_block_non_intra (0: binary s, 1: binary block, 2: i32 n),
	binary ff_mpeg1_encode_init (0: binary s),
	void encode_dc (0: binary s, 1: i32 component, 2: i32 diff),
	void encode_mb_skip_run (0: binary s, 1: i32 run),
	void ff_mpeg1_encode_mb (0: binary s, 1: i32 motion_x, 2: i32 motion_y),
	void ff_mpeg1_encode_picture_header (0: binary s, 1: i32 picture_number),
	void ff_mpeg1_encode_slice_header (0: binary s),
	void put_mb_modes (0: binary s, 1: i32 bits, 2: i32 field_motion, 3: i32 has_mv, 4: i32 n),
	void ff_mpeg12_find_best_frame_rate (0: AVRational frame_rate, 1: binary code, 2: binary ext_d, 3: binary ext_n, 4: i32 nonstandard),
	i32 avpriv_mpeg4audio_get_config (0: binary c, 1: binary buf, 2: i32 bit_size, 3: i32 sync_extension),
	i32 ff_mpeg4audio_get_config_gb (0: binary gb, 1: binary c, 2: i32 sync_extension),
	i32 get_object_type (0: binary gb),
	i32 get_sample_rate (0: binary gb, 1: binary index),
	binary ff_pce_copy_bits (0: binary gb, 1: binary pb, 2: i32 bits),
	i32 ff_copy_pce_data (0: binary gb, 1: binary pb),
	i32 ff_mpeg4_get_video_packet_prefix_length (0: binary s),
	i32 ff_mpeg4_set_direct_mv (0: binary s, 1: i32 mx, 2: i32 my),
	void ff_mpeg4_clean_buffers (0: binary s),
	void ff_mpeg4_init_direct_mv (0: binary s),
	void ff_mpeg4_set_one_direct_mv (0: binary s, 1: i32 i, 2: i32 mx, 3: i32 my),
	i32 ff_mpeg4_pred_dc (0: binary s, 1: binary dir_ptr, 2: i32 encoding, 3: i32 level, 4: i32 n),
	i32 ff_mpeg4_find_frame_end (0: binary pc, 1: binary buf, 2: i32 buf_size),
	binary ff_mpeg4videodec_static_init (),
	i32 ff_mpeg4_decode_partitions (0: binary ctx),
	i32 ff_mpeg4_decode_picture_header (0: binary gb, 1: binary ctx),
	i32 ff_mpeg4_decode_studio_slice_header (0: binary ctx),
	i32 ff_mpeg4_decode_video_packet_header (0: binary ctx),
	i32 ff_mpeg4_frame_end (0: binary avctx, 1: binary buf, 2: i32 buf_size),
	i32 ff_mpeg4_workaround_bugs (0: binary avctx),
	i32 get_amv (0: binary ctx, 1: i32 n),
	i32 mpeg4_decode_block (0: binary ctx, 1: binary block, 2: i32 coded, 3: i32 intra, 4: i32 n, 5: i32 rvlc),
	i32 mpeg4_decode_dc (0: binary s, 1: binary dir_ptr, 2: i32 n),
	i32 mpeg4_is_resync (0: binary ctx),
	void ff_mpeg4_pred_ac (0: binary s, 1: binary block, 2: i32 dir, 3: i32 n),
	i32 decide_ac_pred (0: binary s, 1: binary dir, 2: binary zigzag_last_index, 3: binary st),
	i32 ff_mpeg4_encode_picture_header (0: binary s, 1: i32 picture_number),
	i32 get_b_cbp (0: binary s, 1: i32 mb_type, 2: i32 motion_x, 3: i32 motion_y),
	i32 get_block_rate (0: binary s, 1: binary block, 2: i32 block_last_index, 3: binary scantable),
	i32 mpeg4_get_dc_length (0: i32 level, 1: i32 n),
	void ff_clean_mpeg4_qscales (0: binary s),
	void ff_mpeg4_encode_mb (0: binary s, 1: i32 motion_x, 2: i32 motion_y),
	void ff_mpeg4_encode_video_packet_header (0: binary s),
	void ff_mpeg4_init_partitions (0: binary s),
	void ff_mpeg4_merge_partitions (0: binary s),
	void ff_mpeg4_stuffing (0: binary pbc),
	void ff_set_mpeg4_time (0: binary s),
	void mpeg4_encode_blocks (0: binary s, 1: binary ac_pb, 2: binary dc_pb, 3: binary intra_dc, 4: binary scan_table),
	void mpeg4_encode_block (0: binary s, 1: binary ac_pb, 2: binary dc_pb, 3: binary block, 4: i32 intra_dc, 5: i32 n, 6: binary scan_table),
	void mpeg4_encode_dc (0: binary s, 1: i32 level, 2: i32 n),
	void restore_ac_coeffs (0: binary s, 1: binary dir, 2: binary zigzag_last_index, 3: binary st),
	i32 ff_mpeg_er_init (0: binary s),
	void ff_mpeg_er_frame_start (0: binary s),
	i32 ff_mpa_l2_select_table (0: i32 bitrate, 1: i32 freq, 2: i32 lsf, 3: i32 nb_channels),
	i32 main (),
	binary mpegaudio_tableinit (),
	i32 l1_unscale (0: i32 mant, 1: i32 n, 2: i32 scale_factor),
	i32 l2_unscale_group (0: i32 mant, 1: i32 scale_factor, 2: i32 steps),
	i32 l3_unscale (0: i32 exponent, 1: i32 value),
	i32 avpriv_mpegaudio_decode_header (0: binary s, 1: i32 header),
	i32 ff_mpa_decode_header (0: binary codec_id, 1: binary bit_rate, 2: binary channels, 3: binary frame_size, 4: binary sample_rate, 5: i32 head),
	i32 ff_mpa_check_header (0: i32 header),
	binary ff_mpadsp_init (0: binary s),
	binary RENAME (),
	binary RENAME (),
	double round_sample (0: binary sum, 1: binary sum),
	i32 round_sample (0: binary sum, 1: binary sum),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	i32 ff_alloc_picture (0: binary avctx, 1: binary me, 2: binary pic, 3: binary sc, 4: i32 b8_stride, 5: i32 chroma_x_shift, 6: i32 chroma_y_shift, 7: i32 encoding, 8: i32 mb_height, 9: i32 mb_stride, 10: i32 mb_width, 11: i32 out_format, 12: i32 shared, 13: binary linesize, 14: binary uvlinesize),
	i32 ff_find_unused_picture (0: binary avctx, 1: binary picture, 2: i32 shared),
	i32 ff_mpeg_framesize_alloc (0: binary avctx, 1: binary me, 2: binary sc, 3: i32 linesize),
	i32 ff_mpeg_ref_picture (0: binary avctx, 1: binary dst, 2: binary src),
	i32 ff_update_picture_tables (0: binary dst, 1: binary src),
	i32 pic_is_unused (0: binary pic),
	void ff_free_picture_tables (0: binary pic),
	void ff_mpeg_unref_picture (0: binary avctx, 1: binary pic),
	void ff_draw_horiz_band (0: binary avctx, 1: binary cur, 2: binary last, 3: i32 first_field, 4: i32 h, 5: i32 low_delay, 6: i32 picture_structure, 7: i32 y),
	void ff_print_debug_info2 (0: binary avctx, 1: binary pict, 2: binary low_delay, 3: binary motion_val, 4: binary qscale_table, 5: i32 mb_height, 6: i32 mb_stride, 7: i32 mb_width, 8: i32 quarter_sample, 9: binary mbtype_table, 10: binary mbskip_table),
	binary ff_mpv_common_init (0: binary s),
	binary ff_mpv_idct_init (0: binary s),
	i32 ff_mpeg_update_thread_context (0: binary dst, 1: binary src),
	i32 ff_mpv_common_frame_size_change (0: binary s),
	i32 ff_mpv_export_qp_table (0: binary f, 1: binary s, 2: binary p, 3: i32 qp_type),
	i32 ff_mpv_frame_start (0: binary avctx, 1: binary s),
	i32 ff_update_duplicate_context (0: binary dst, 1: binary src),
	i32 hpel_motion_lowres (0: binary s, 1: binary pix_op, 2: i32 field_based, 3: i32 field_select, 4: i32 h_edge_pos, 5: i32 height, 6: i32 h, 7: i32 motion_x, 8: i32 motion_y, 9: i32 src_x, 10: i32 src_y, 11: i32 v_edge_pos, 12: i32 width, 13: i32 w, 14: binary stride, 15: binary dest, 16: binary src),
	void MPV_motion_lowres (0: binary s, 1: binary pix_op, 2: i32 dir, 3: binary ref_picture, 4: binary dest_cb, 5: binary dest_cr, 6: binary dest_y),
	void add_dct (0: binary s, 1: binary block, 2: i32 i, 3: i32 line_size, 4: binary dest),
	void add_dequant_dct (0: binary s, 1: binary block, 2: i32 i, 3: i32 line_size, 4: i32 qscale, 5: binary dest),
	void chroma_4mv_motion_lowres (0: binary s, 1: binary pix_op, 2: i32 mx, 3: i32 my, 4: binary ref_picture, 5: binary dest_cb, 6: binary dest_cr),
	void ff_clean_intra_table_entries (0: binary s),
	void ff_init_block_index (0: binary s),
	void ff_mpeg_draw_horiz_band (0: binary s, 1: i32 h, 2: i32 y),
	void ff_mpeg_flush (0: binary avctx),
	void ff_mpv_common_defaults (0: binary s),
	void ff_mpv_common_end (0: binary s),
	void ff_mpv_decode_defaults (0: binary s),
	void ff_mpv_decode_init (0: binary avctx, 1: binary s),
	void ff_mpv_frame_end (0: binary s),
	void ff_mpv_reconstruct_mb (0: binary s),
	void ff_mpv_report_decode_progress (0: binary s),
	void ff_print_debug_info (0: binary pict, 1: binary s, 2: binary p),
	void ff_set_qscale (0: binary s, 1: i32 qscale),
	void put_dct (0: binary s, 1: binary block, 2: i32 i, 3: i32 line_size, 4: i32 qscale, 5: binary dest),
	i32 get_bits_diff (0: binary s),
	i32 mpeg_get_qscale (0: binary s),
	void ff_update_block_index (0: binary s),
	binary ff_dct_encode_init (0: binary s),
	binary ff_mpv_encode_end (0: binary avctx),
	binary ff_mpv_encode_init (0: binary avctx),
	i32 ff_dct_quantize_c (0: binary s, 1: binary overflow, 2: binary block, 3: i32 n, 4: i32 qscale),
	i32 ff_mpv_encode_picture (0: binary avctx, 1: binary pkt, 2: binary pic_arg, 3: binary got_packet),
	i32 ff_mpv_reallocate_putbitbuffer (0: binary s, 1: i64 size_increase, 2: i64 threshold),
	void clip_coeffs (0: binary s, 1: binary block, 2: i32 last_index),
	void copy_context_after_encode (0: binary d, 1: binary s, 2: i32 type),
	void copy_context_before_encode (0: binary d, 1: binary s, 2: i32 type),
	void dct_single_coeff_elimination (0: binary s, 1: i32 n, 2: i32 threshold),
	void encode_mb_hq (0: binary backup, 1: binary best, 2: binary s, 3: binary pb2, 4: binary pb, 5: binary tex_pb, 6: binary dmin, 7: binary next_block, 8: i32 motion_x, 9: i32 motion_y, 10: i32 type),
	void ff_block_permute (0: binary scantable, 1: binary block, 2: i32 last, 3: binary permutation),
	void ff_convert_matrix (0: binary s, 1: binary quant_matrix, 2: binary qmat, 3: i32 bias, 4: i32 intra, 5: i32 qmax, 6: i32 qmin),
	void ff_init_qscale_tab (0: binary s),
	void ff_write_quant_matrix (0: binary pb, 1: binary matrix),
	void update_qscale (0: binary s),
	i32 hpel_motion (0: binary s, 1: i32 motion_x, 2: i32 motion_y, 3: i32 src_x, 4: i32 src_y, 5: binary pix_op, 6: binary dest, 7: binary src),
	void apply_8x8 (0: binary s, 1: i32 dir, 2: binary pix_op, 3: binary qpix_op, 4: binary ref_picture, 5: binary dest_cb, 6: binary dest_cr, 7: binary dest_y),
	void apply_obmc (0: binary s, 1: binary pix_op, 2: binary ref_picture, 3: binary dest_cb, 4: binary dest_cr, 5: binary dest_y),
	void ff_mpv_motion (0: binary s, 1: i32 dir, 2: binary pix_op, 3: binary qpix_op, 4: binary ref_picture, 5: binary dest_cb, 6: binary dest_cr, 7: binary dest_y),
	void obmc_motion (0: binary s, 1: i32 src_x, 2: i32 src_y, 3: binary pix_op, 4: binary dest, 5: binary src),
	void prefetch_motion (0: binary s, 1: i32 dir, 2: binary pix),
	void put_obmc (0: i32 stride, 1: binary src, 2: binary dst),
	void qpel_motion (0: binary s, 1: i32 bottom_field, 2: i32 field_based, 3: i32 field_select, 4: i32 h, 5: i32 motion_x, 6: i32 motion_y, 7: binary pix_op, 8: binary qpix_op, 9: binary ref_picture, 10: binary dest_cb, 11: binary dest_cr, 12: binary dest_y),
	void ff_xvmc_init_block (0: binary s),
	void ff_xvmc_pack_pblocks (0: binary s, 1: i32 cbp),
	binary ff_mpegvideodsp_init (0: binary c),
	void ff_gmc_c (0: i32 dxx, 1: i32 dxy, 2: i32 dyx, 3: i32 dyy, 4: i32 height, 5: i32 h, 6: i32 ox, 7: i32 oy, 8: i32 r, 9: i32 shift, 10: i32 stride, 11: i32 width, 12: binary dst, 13: binary src),
	binary ff_mpegvideoencdsp_init (0: binary avctx, 1: binary c),
	binary ff_mqc_init_context_tables (),
	void ff_mqc_init_contexts (0: binary mqc),
	i32 ff_mqc_decode (0: binary mqc, 1: binary cxstate),
	void ff_mqc_initdec (0: binary mqc, 1: i32 raw, 2: i32 reset, 3: binary bp),
	i32 ff_mqc_flush_to (0: binary mqc, 1: binary dst_len, 2: binary dst),
	i32 ff_mqc_flush (0: binary mqc),
	i32 ff_mqc_length (0: binary mqc),
	void ff_mqc_encode (0: binary mqc, 1: i32 d, 2: binary cxstate),
	void ff_mqc_initenc (0: binary mqc, 1: binary bp),
	i32 ff_msgsm_decode_block (0: binary avctx, 1: binary buf, 2: binary samples, 3: i32 mode),
	binary ff_msmpeg4_common_init (0: binary s),
	i32 ff_msmpeg4_coded_block_pred (0: binary s, 1: i32 n, 2: binary coded_block_ptr),
	i32 ff_msmpeg4_pred_dc (0: binary s, 1: binary dir_ptr, 2: binary dc_val_ptr, 3: i32 n),
	binary ff_msmpeg4_decode_init (0: binary avctx),
	i32 ff_msmpeg4_decode_block (0: binary s, 1: binary scan_table, 2: binary block, 3: i32 coded, 4: i32 n),
	i32 ff_msmpeg4_decode_ext_header (0: binary s, 1: i32 buf_size),
	i32 ff_msmpeg4_decode_motion (0: binary s, 1: binary mx_ptr, 2: binary my_ptr),
	i32 ff_msmpeg4_decode_picture_header (0: binary s),
	i32 msmpeg4v1_pred_dc (0: binary s, 1: binary dc_val_ptr, 2: i32 n),
	binary ff_msmpeg4_encode_init (0: binary s),
	void ff_msmpeg4_code012 (0: binary pb, 1: i32 n),
	void ff_msmpeg4_encode_block (0: binary s, 1: binary block, 2: i32 n),
	void ff_msmpeg4_encode_ext_header (0: binary s),
	void ff_msmpeg4_encode_mb (0: binary s, 1: i32 motion_x, 2: i32 motion_y),
	void ff_msmpeg4_encode_motion (0: binary s, 1: i32 mx, 2: i32 my),
	void ff_msmpeg4_encode_picture_header (0: binary s, 1: i32 picture_number),
	void ff_msmpeg4_handle_slices (0: binary s),
	i32 ff_msrle_decode (0: binary avctx, 1: binary pic, 2: binary gb, 3: i32 depth),
	binary ff_mss12_decode_end (0: binary c),
	binary ff_mss12_decode_init (0: binary c, 1: binary sc1, 2: binary sc2, 3: i32 version),
	i32 ff_mss12_decode_rect (0: binary acoder, 1: binary sc, 2: i32 height, 3: i32 width, 4: i32 x, 5: i32 y),
	void ff_mss12_model_update (0: binary m, 1: i32 val),
	void ff_mss12_slicecontext_reset (0: binary sc),
	binary ff_mss2dsp_init (0: binary dsp),
	void ff_mss34_dct_put (0: binary block, 1: binary stride, 2: binary dst),
	void ff_mss34_gen_quant_mat (0: i32 luma, 1: i32 quality, 2: binary qmat),
	i32 get_coeff (0: binary gb, 1: binary vlc),
	void mss4_update_dc_cache (0: binary c, 1: i32 mb_x),
	i32 signed_shift (0: i32 i, 1: i32 shift),
	void ff_nelly_get_sample_bits (0: binary buf, 1: binary bits),
	double distance (0: double x, 1: double y, 2: i32 band),
	binary ff_mpv_common_init_neon (0: binary s),
	void ff_dct_unquantize_h263_neon (0: binary block, 1: i32 nCoeffs, 2: i32 qadd, 3: i32 qscale),
	i32 ff_nvdec_decode_init (0: binary avctx),
	i32 ff_nvdec_decode_uninit (0: binary avctx),
	i32 ff_nvdec_end_frame (0: binary avctx),
	i32 ff_nvdec_frame_params (0: binary hw_frames_ctx, 1: binary avctx, 2: i32 dpb_size, 3: i32 supports_444),
	i32 ff_nvdec_get_ref_idx (0: binary frame),
	i32 ff_nvdec_simple_decode_slice (0: binary avctx, 1: binary buffer, 2: i32 size),
	i32 ff_nvdec_simple_end_frame (0: binary avctx),
	i32 ff_nvdec_start_frame (0: binary avctx, 1: binary frame),
	binary ff_nvenc_encode_close (0: binary avctx),
	binary ff_nvenc_encode_init (0: binary avctx),
	i64 timestamp_queue_dequeue (0: binary queue),
	i32 ff_nvenc_encode_frame (0: binary avctx, 1: binary pkt, 2: binary frame, 3: binary got_packet),
	i32 ff_nvenc_receive_packet (0: binary avctx, 1: binary pkt),
	i32 ff_nvenc_send_frame (0: binary avctx, 1: binary frame),
	void timestamp_queue_enqueue (0: binary queue, 1: i64 timestamp),
	double on2avc_scale (0: double scale, 1: i32 v),
	i32 get_egolomb (0: binary gb),
	binary avcodec_alloc_context3 (0: binary codec),
	binary avcodec_get_class (),
	binary avcodec_get_frame_class (),
	binary avcodec_get_subtitle_rect_class (),
	i32 avcodec_copy_context (0: binary dest, 1: binary src),
	i32 avcodec_get_context_defaults3 (0: binary s, 1: binary codec),
	i32 main (),
	void avcodec_free_context (0: binary pavctx),
	binary ff_opus_parse_extradata (0: binary avctx, 1: binary s),
	i32 ff_opus_parse_packet (0: binary pkt, 1: binary buf, 2: i32 buf_size, 3: i32 self_delimiting),
	i32 xiph_lacing_16bit (0: binary ptr, 1: binary end),
	i32 xiph_lacing_full (0: binary ptr, 1: binary end),
	void ff_celt_bitalloc (0: binary f, 1: binary rc, 2: i32 encode),
	void ff_celt_quant_bands (0: binary f, 1: binary rc),
	i32 ff_celt_decode_frame (0: binary f, 1: binary rc, 2: binary output, 3: i32 channels, 4: i32 end_band, 5: i32 frame_size, 6: i32 start_band),
	i32 ff_celt_init (0: binary avctx, 1: binary f, 2: i32 apply_phase_inv, 3: i32 output_channels),
	void ff_celt_flush (0: binary f),
	void ff_celt_free (0: binary f),
	binary celt_rng (0: binary f),
	binary celt_renormalize_vector (0: binary X, 1: double gain, 2: i32 N),
	double celt_decode_pulses (0: binary rc, 1: binary y, 2: i32 K, 3: i32 N),
	binary ff_celt_pvq_init (0: binary pvq, 1: i32 encode),
	i16 celt_cos (0: i16 x),
	i32 celt_bits2pulses (0: binary cache, 1: i32 bits),
	i32 celt_compute_qn (0: i32 N, 1: i32 b, 2: i32 offset, 3: i32 pulse_cap, 4: i32 stereo),
	i32 celt_log2tan (0: i32 icos, 1: i32 isin),
	i32 celt_pulses2bits (0: binary cache, 1: i32 pulses),
	i32 celt_extract_collapse_mask (0: binary iy, 1: i32 B, 2: i32 N),
	i32 celt_icwrsi (0: binary y, 1: i32 K, 2: i32 N),
	i64 celt_cwrsi (0: binary y, 1: i32 K, 2: i32 N, 3: i32 i),
	binary ff_celt_pvq_uninit (0: binary pvq),
	void celt_encode_pulses (0: binary rc, 1: binary y, 2: i32 K, 3: i32 N),
	void celt_exp_rotation (0: binary spread, 1: binary encode, 2: binary X, 3: i32 K, 4: i32 len, 5: i32 stride),
	void celt_normalize_residual (0: binary iy, 1: binary X, 2: double g, 3: i32 N),
	void celt_stereo_merge (0: binary X, 1: binary Y, 2: double mid, 3: i32 N),
	i32 ff_opus_rc_dec_init (0: binary rc, 1: binary data, 2: i32 size),
	i32 ff_opus_rc_dec_laplace (0: binary rc, 1: i32 decay, 2: i32 symbol),
	i32 ff_opus_rc_dec_cdf (0: binary rc, 1: binary cdf),
	i32 ff_opus_rc_dec_log (0: binary rc, 1: i32 bits),
	i32 ff_opus_rc_dec_uint_step (0: binary rc, 1: i32 k0),
	i32 ff_opus_rc_dec_uint_tri (0: binary rc, 1: i32 qn),
	i32 ff_opus_rc_dec_uint (0: binary rc, 1: i32 size),
	i32 ff_opus_rc_get_raw (0: binary rc, 1: i32 count),
	void ff_opus_rc_dec_raw_init (0: binary rc, 1: binary rightend, 2: i32 bytes),
	void ff_opus_rc_enc_cdf (0: binary rc, 1: binary cdf, 2: i32 val),
	void ff_opus_rc_enc_end (0: binary rc, 1: i32 size, 2: binary dst),
	void ff_opus_rc_enc_init (0: binary rc),
	void ff_opus_rc_enc_laplace (0: binary rc, 1: binary value, 2: i32 decay, 3: i32 symbol),
	void ff_opus_rc_enc_log (0: binary rc, 1: i32 val, 2: i32 bits),
	void ff_opus_rc_enc_uint_step (0: binary rc, 1: i32 k0, 2: i32 val),
	void ff_opus_rc_enc_uint_tri (0: binary rc, 1: i32 qn, 2: i32 k),
	void ff_opus_rc_enc_uint (0: binary rc, 1: i32 size, 2: i32 val),
	void ff_opus_rc_put_raw (0: binary rc, 1: i32 count, 2: i32 val),
	binary opus_rc_tell_frac (0: binary rc),
	binary opus_rc_tell (0: binary rc),
	i32 ff_silk_decode_superframe (0: binary bandwidth, 1: binary rc, 2: binary s, 3: binary output, 4: i32 coded_channels, 5: i32 duration_ms),
	i32 ff_silk_init (0: binary avctx, 1: binary ps, 2: i32 output_channels),
	i32 silk_is_lpc_stable (0: binary lpc, 1: i32 order),
	void ff_silk_flush (0: binary s),
	void ff_silk_free (0: binary ps),
	void silk_count_children (0: binary rc, 1: binary child, 2: i32 total, 3: i32 model),
	void silk_decode_excitation (0: binary rc, 1: binary s, 2: binary excitationf, 3: i32 active, 4: i32 qoffset_high, 5: i32 voiced),
	void silk_decode_lpc (0: binary rc, 1: binary s, 2: binary frame, 3: binary lpc_leadin, 4: binary lpc, 5: binary has_lpc_leadin, 6: binary lpc_order, 7: i32 voiced),
	void silk_stabilize_lsf (0: binary min_delta, 1: binary nlsf, 2: i32 order),
	i32 write_opuslacing (0: i32 v, 1: binary dst),
	binary ff_opus_psy_end (0: binary s),
	binary ff_opus_psy_init (0: binary bufqueue, 1: binary avctx, 2: binary options, 3: binary s),
	i32 ff_opus_psy_celt_frame_process (0: binary f, 1: binary s, 2: i32 index),
	i32 ff_opus_psy_process (0: binary p, 1: binary s),
	void ff_opus_psy_celt_frame_init (0: binary f, 1: binary s, 2: i32 index),
	void ff_opus_psy_postencode_update (0: binary f, 1: binary s, 2: binary rc),
	void ff_opus_psy_signal_eof (0: binary s),
	double bessel_filter (0: binary s, 1: double x),
	i32 bessel_init (0: binary s, 1: double f0, 2: double fs, 3: double n, 4: i32 highpass),
	i32 bessel_reinit (0: binary s, 1: double f0, 2: double fs, 3: double n, 4: i32 highpass),
	binary av_parser_init (0: i32 codec_id),
	i32 av_parser_change (0: binary avctx, 1: binary s, 2: binary buf, 3: binary poutbuf_size, 4: i32 buf_size, 5: i32 keyframe, 6: binary poutbuf),
	i32 av_parser_parse2 (0: binary avctx, 1: binary s, 2: binary buf, 3: binary poutbuf_size, 4: i64 dts, 5: i64 pos, 6: i64 pts, 7: i32 buf_size, 8: binary poutbuf),
	i32 ff_combine_frame (0: binary pc, 1: binary buf, 2: binary buf_size, 3: i32 next),
	i32 ff_mpeg4video_split (0: binary avctx, 1: binary buf, 2: i32 buf_size),
	void av_parser_close (0: binary s),
	void ff_fetch_timestamp (0: binary s, 1: i32 fuzzy, 2: i32 off, 3: i32 remove),
	void ff_parse_close (0: binary s),
	binary av_parser_next (0: binary p),
	binary av_parser_iterate (0: binary opaque),
	void av_register_codec_parser (0: binary parser),
	i32 main (),
	binary alaw2linear (0: binary a_val),
	binary ulaw2linear (0: binary u_val),
	binary vidc2linear (0: binary u_val),
	binary build_xlaw_table (0: binary xlaw2linear, 1: i32 mask, 2: binary linear_to_xlaw),
	void pcm_alaw_tableinit (),
	void pcm_ulaw_tableinit (),
	void pcm_vidc_tableinit (),
	binary ff_pixblockdsp_init (0: binary avctx, 1: binary c),
	i32 ff_png_get_nb_channels (0: i32 color_type),
	i32 ff_png_pass_row_size (0: i32 bits_per_pixel, 1: i32 pass, 2: i32 width),
	binary ff_png_zalloc (0: binary items, 1: binary size, 2: binary opaque),
	void ff_png_zfree (0: binary opaque, 1: binary ptr),
	void ff_add_png_paeth_prediction (0: i32 bpp, 1: i32 w, 2: binary dst, 3: binary src, 4: binary top),
	binary ff_pngdsp_init (0: binary dsp),
	i32 ff_pnm_decode_header (0: binary avctx, 1: binary s),
	i32 pnm_space (0: i32 c),
	binary ff_audiodsp_init_ppc (0: binary c),
	binary ff_blockdsp_init_ppc (0: binary c),
	binary ff_fdctdsp_init_ppc (0: binary avctx, 1: binary c, 2: binary high_bit_depth),
	void ff_fdct_altivec (0: binary block),
	binary ff_fft_init_ppc (0: binary s),
	void ff_fft_calc_interleave_vsx (0: binary z, 1: binary s),
	void ff_fft_calc_vsx (0: binary z, 1: binary s),
	void fft16_vsx_interleave (0: binary z),
	void fft16_vsx (0: binary z),
	void fft2_vsx_interleave (0: binary z),
	void fft4_vsx_interleave (0: binary z),
	void fft4_vsx (0: binary z),
	void fft8_vsx_interleave (0: binary z),
	void fft8_vsx (0: binary z),
	void pass_vsx_interleave (0: binary z, 1: binary wre, 2: binary n),
	void pass_vsx (0: binary z, 1: binary wre, 2: binary n),
	binary ff_fmt_convert_init_ppc (0: binary avctx, 1: binary c),
	binary ff_h264chroma_init_ppc (0: binary c, 1: i32 bit_depth),
	binary ff_h264dsp_init_ppc (0: binary c, 1: binary bit_depth, 2: binary chroma_format_idc),
	vec_u8 diff_lt_altivec (0: binary a, 1: binary x, 2: binary y),
	vec_u8 h264_deblock_mask (0: binary alpha, 1: binary beta, 2: binary p0, 3: binary p1, 4: binary q0, 5: binary q1),
	vec_u8 h264_deblock_q1 (0: binary p0, 1: binary p1, 2: binary p2, 3: binary q0, 4: binary tc0),
	void write16x4 (0: i32 dst_stride, 1: binary r0, 2: binary r1, 3: binary r2, 4: binary r3, 5: binary dst),
	void avg_pixels16_l2_altivec (0: binary src1, 1: binary src2, 2: i32 dst_stride, 3: i32 h, 4: i32 src_stride1, 5: binary dst),
	void put_pixels16_l2_altivec (0: binary src1, 1: binary src2, 2: i32 dst_stride, 3: i32 h, 4: i32 src_stride1, 5: binary dst),
	binary ff_hevc_dsp_init_ppc (0: binary c, 1: binary bit_depth),
	binary ff_hpeldsp_init_ppc (0: binary c, 1: i32 flags),
	void ff_avg_pixels16_altivec (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	void ff_put_pixels16_altivec (0: binary pixels, 1: i32 h, 2: binary line_size, 3: binary block),
	binary ff_idctdsp_init_ppc (0: binary avctx, 1: binary c, 2: binary high_bit_depth),
	binary ff_llauddsp_init_ppc (0: binary c),
	binary ff_llviddsp_init_ppc (0: binary c),
	binary MAC64 (0: i64 d, 1: i32 a, 2: i32 b),
	binary MLS64 (0: i64 d, 1: i32 a, 2: i32 b),
	binary MULH (0: i32 a, 1: i32 b),
	binary ff_me_cmp_init_ppc (0: binary avctx, 1: binary c),
	binary ff_mpadsp_init_ppc (0: binary s),
	binary ff_mpv_common_init_ppc (0: binary s),
	binary ff_mpegvideodsp_init_ppc (0: binary c),
	binary ff_mpegvideoencdsp_init_ppc (0: binary avctx, 1: binary c),
	binary ff_pixblockdsp_init_ppc (0: binary avctx, 1: binary c, 2: binary high_bit_depth),
	binary ff_svq1enc_init_ppc (0: binary c),
	binary ff_vc1dsp_init_ppc (0: binary dsp),
	binary ff_videodsp_init_ppc (0: binary ctx, 1: i32 bpc),
	binary ff_vorbisdsp_init_ppc (0: binary c),
	binary ff_vp3dsp_init_ppc (0: binary c, 1: i32 flags),
	vec_s16 M15 (0: vec_s16 C, 1: vec_s16 a),
	vec_s16 M16 (0: vec_s16 C, 1: vec_s16 a),
	binary ff_vp78dsp_init_ppc (0: binary c),
	void unpack_alpha (0: binary gb, 1: binary decode_precision, 2: binary num_bits, 3: i32 num_coeffs, 4: binary dst),
	binary ff_proresdsp_init (0: binary avctx, 1: binary dsp),
	void put_pixel (0: binary in, 1: i32 bits_per_raw_sample, 2: binary linesize, 3: binary dst),
	void put_alpha_run (0: binary pb, 1: i32 run),
	void subimage_with_fill_template (0: i32 is_alpha_plane, 1: i32 is_interlaced, 2: i32 is_top_field, 3: binary dst, 4: binary src, 5: binary dst_height, 6: binary dst_width, 7: binary height, 8: binary stride, 9: binary width, 10: binary x, 11: binary y),
	i32 estimate_vlc (0: i32 val, 1: binary codebook),
	void encode_vlc_codeword (0: binary pb, 1: i32 val, 2: binary codebook),
	binary ff_psy_find_group (0: binary ctx, 1: i32 channel),
	binary ff_psy_init (0: binary avctx, 1: binary ctx, 2: binary num_bands, 3: binary bands, 4: binary group_map, 5: i32 num_groups, 6: i32 num_lens),
	binary ff_psy_preprocess_init (0: binary avctx),
	binary ff_psy_end (0: binary ctx),
	binary ff_psy_preprocess_end (0: binary ctx),
	void ff_psy_preprocess (0: binary ctx, 1: binary audio, 2: i32 channels),
	i32 ff_thread_init (0: binary avctx),
	void ff_thread_free (0: binary avctx),
	binary ff_thread_get_format (0: binary avctx, 1: binary fmt),
	i32 ff_frame_thread_init (0: binary avctx),
	i32 ff_thread_can_start_frame (0: binary avctx),
	i32 ff_thread_decode_frame (0: binary avctx, 1: binary picture, 2: binary avpkt, 3: binary got_picture_ptr),
	i32 ff_thread_get_buffer (0: binary avctx, 1: binary f, 2: i32 flags),
	void ff_frame_thread_free (0: binary avctx, 1: i32 thread_count),
	void ff_thread_await_progress (0: binary f, 1: i32 field, 2: i32 n),
	void ff_thread_finish_setup (0: binary avctx),
	void ff_thread_flush (0: binary avctx),
	void ff_thread_release_buffer (0: binary avctx, 1: binary f),
	void ff_thread_report_progress (0: binary f, 1: i32 field, 2: i32 n),
	i32 ff_alloc_entries (0: binary avctx, 1: i32 count),
	i32 ff_slice_thread_execute_with_mainfunc (0: binary avctx, 1: binary func2, 2: binary ret, 3: i32 job_count, 4: binary mainfunc, 5: binary arg),
	i32 ff_slice_thread_init (0: binary avctx),
	void ff_reset_entries (0: binary avctx),
	void ff_slice_thread_free (0: binary avctx),
	void ff_thread_await_progress2 (0: binary avctx, 1: i32 field, 2: i32 shift, 3: i32 thread),
	void ff_thread_report_progress2 (0: binary avctx, 1: i32 field, 2: i32 n, 3: i32 thread),
	i32 put_bits_count (0: binary s),
	i32 put_bits_left (0: binary s),
	binary put_bits_ptr (0: binary s),
	binary put_bits32 (0: binary s, 1: i32 value),
	void flush_put_bits_le (0: binary s),
	void flush_put_bits (0: binary s),
	void init_put_bits (0: binary s, 1: i32 buffer_size, 2: binary buffer),
	void put_bits64 (0: binary s, 1: i32 n, 2: i64 value),
	void put_bits_le (0: binary s, 1: i32 n, 2: binary value),
	void put_bits (0: binary s, 1: i32 n, 2: binary value),
	void put_sbits (0: binary pb, 1: i32 value, 2: i32 n),
	void rebase_put_bits (0: binary s, 1: i32 buffer_size, 2: binary buffer),
	void set_put_bits_buffer_size (0: binary s, 1: i32 size),
	void skip_put_bits (0: binary s, 1: i32 n),
	void skip_put_bytes (0: binary s, 1: i32 n),
	i32 main (),
	binary init_noise_samples (),
	binary qdm2_init_vlc (),
	binary rnd_table_init (),
	binary softclip_table_init (),
	binary DIRAC_MC (),
	void ff_avg_pixels16x16_c (0: binary src, 1: binary stride, 2: binary dst),
	void ff_avg_pixels8x8_c (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_pixels16x16_c (0: binary src, 1: binary stride, 2: binary dst),
	void ff_put_pixels8_l2_8 (0: binary src1, 1: binary src2, 2: i32 dst_stride, 3: i32 h, 4: i32 src_stride1, 5: i32 src_stride2, 6: binary dst),
	binary ff_qsv_map_pictype (0: i32 mfx_pic_type),
	i32 ff_qsv_codec_id_to_mfx (0: binary codec_id),
	i32 ff_qsv_find_surface_idx (0: binary frame, 1: binary ctx),
	i32 ff_qsv_init_internal_session (0: binary avctx, 1: binary load_plugins, 2: binary session),
	i32 ff_qsv_init_session_device (0: binary device_ref, 1: binary avctx, 2: binary load_plugins, 3: binary psession),
	i32 ff_qsv_init_session_frames (0: binary avctx, 1: binary qsv_frames_ctx, 2: binary load_plugins, 3: i32 opaque, 4: binary psession),
	i32 ff_qsv_map_error (0: binary desc, 1: binary mfx_err),
	i32 ff_qsv_map_pixfmt (0: binary format, 1: binary fourcc),
	i32 ff_qsv_print_error (0: binary error_string, 1: binary err, 2: binary log_ctx),
	i32 ff_qsv_print_warning (0: binary warning_string, 1: binary err, 2: binary log_ctx),
	i32 ff_qsv_profile_to_mfx (0: binary codec_id, 1: i32 profile),
	binary av_qsv_alloc_context (),
	binary av_qsv_alloc_context (),
	i32 ff_qsv_decode_close (0: binary q),
	i32 ff_qsv_process_data (0: binary avctx, 1: binary frame, 2: binary pkt, 3: binary q, 4: binary got_frame),
	binary qsv_fifo_item_size (),
	binary qsv_fifo_size (0: binary fifo),
	void ff_qsv_decode_flush (0: binary avctx, 1: binary q),
	i32 ff_qsv_enc_close (0: binary avctx, 1: binary q),
	i32 ff_qsv_enc_init (0: binary avctx, 1: binary q),
	i32 ff_qsv_encode (0: binary avctx, 1: binary pkt, 2: binary q, 3: binary frame, 4: binary got_packet),
	binary qsv_fifo_item_size (),
	binary qsv_fifo_size (0: binary fifo),
	void qtrle_decode_2n4bpp (0: binary s, 1: i32 bpp, 2: i32 lines_to_change, 3: i32 row_ptr),
	i32 ff_eval_refl (0: binary avctx, 1: binary coefs, 2: binary refl),
	i32 ff_interp (0: binary ractx, 1: binary out, 2: i32 a, 3: i32 copyold, 4: i32 energy),
	i32 ff_irms (0: binary adsp, 1: binary data),
	i32 ff_t_sqrt (0: binary x),
	binary ff_rescale_rms (0: binary energy, 1: binary rms),
	binary ff_rms (0: binary data),
	void ff_copy_and_dup (0: binary source, 1: binary target, 2: i32 offset),
	void ff_eval_coefs (0: binary refl, 1: binary coefs),
	void ff_int_to_int16 (0: binary inp, 1: binary out),
	void ff_subblock_synthesis (0: binary ractx, 1: binary lpc_coefs, 2: i32 cb1_idx, 3: i32 cb2_idx, 4: i32 cba_idx, 5: i32 gain, 6: i32 gval),
	i32 extend_code (0: binary gb, 1: i32 bits, 2: i32 range, 3: i32 val),
	binary ff_init_range_decoder (0: binary c, 1: binary buf, 2: i32 buf_size),
	binary ff_init_range_encoder (0: binary c, 1: i32 buf_size, 2: binary buf),
	i32 ff_rac_check_termination (0: binary c, 1: i32 version),
	i32 ff_rac_terminate (0: binary c, 1: i32 version),
	void ff_build_rac_states (0: binary c, 1: i32 factor, 2: i32 max_p),
	i32 get_rac_count (0: binary c),
	i32 get_rac (0: binary c, 1: binary state),
	void put_rac (0: binary c, 1: i32 bit, 2: binary state),
	void refill (0: binary c),
	void renorm_encoder (0: binary c),
	binary ff_rate_control_init (0: binary s),
	binary ff_rate_control_uninit (0: binary s),
	double bits2qp (0: binary rce, 1: double bits),
	double qp2bits (0: binary rce, 1: double qp),
	double ff_rate_estimate_qscale (0: binary s, 1: i32 dry_run),
	i32 ff_vbv_update (0: binary s, 1: i32 frame_size),
	void ff_get_2pass_fcode (0: binary s),
	void ff_write_pass1_stats (0: binary s),
	binary avpriv_get_raw_pix_fmt_tags (),
	binary avcodec_pix_fmt_to_codec_tag (0: binary fmt),
	binary ff_rdft_init (0: binary trans, 1: binary s, 2: i32 nbits),
	binary ff_rdft_end (0: binary s),
	binary fill_rectangle (0: i32 h, 1: i32 size, 2: i32 stride, 3: i32 w, 4: i32 val, 5: binary vp),
	binary ff_rl_init (0: binary rl),
	binary ff_rl_init_vlc (0: binary rl, 1: binary static_size),
	void ff_rl_free (0: binary rl),
	i32 get_rl_index (0: binary rl, 1: i32 last, 2: i32 level, 3: i32 run),
	i32 ff_rle_count_pixels (0: binary start, 1: i32 bpp, 2: i32 len, 3: i32 same),
	i32 ff_rle_encode (0: binary ptr, 1: i32 add_raw, 2: i32 add_rep, 3: i32 bpp, 4: i32 out_size, 5: i32 w, 6: i32 xor_raw, 7: i32 xor_rep, 8: binary outbuf),
	i32 no_rnd_avg32 (0: i32 a, 1: i32 b),
	i32 rnd_avg32 (0: i32 a, 1: i32 b),
	i64 no_rnd_avg64 (0: i64 a, 1: i64 b),
	i64 rnd_avg64 (0: i64 a, 1: i64 b),
	void apply_motion_generic (0: binary ri, 1: i32 deltax, 2: i32 deltay, 3: i32 sz, 4: i32 x, 5: i32 y),
	void block_copy (0: i32 instride, 1: i32 outstride, 2: i32 sz, 3: binary in, 4: binary out),
	void ff_apply_motion_4x4 (0: binary ri, 1: i32 deltax, 2: i32 deltay, 3: i32 x, 4: i32 y),
	void ff_apply_motion_8x8 (0: binary ri, 1: i32 deltax, 2: i32 deltay, 3: i32 x, 4: i32 y),
	void ff_apply_vector_2x2 (0: binary ri, 1: i32 x, 2: i32 y, 3: binary cell),
	void ff_apply_vector_4x4 (0: binary ri, 1: i32 x, 2: i32 y, 3: binary cell),
	i32 eval_sse (0: binary a, 1: binary b, 2: i32 count),
	i32 squared_diff_macroblock (0: i32 size, 1: binary a, 2: binary b),
	i32 square (0: i32 x),
	byte motion_arg (0: motion_vect mot),
	void frame_block_to_cell (0: binary stride, 1: i32 left, 2: i32 top, 3: binary data, 4: binary block),
	i32 ff_rtjpeg_decode_frame_yuv420 (0: binary f, 1: binary c, 2: binary buf, 3: i32 buf_size),
	i32 get_block (0: binary gb, 1: binary quant, 2: binary scan, 3: binary block),
	void ff_rtjpeg_decode_init (0: binary c, 1: binary cquant, 2: binary lquant, 3: i32 height, 4: i32 width),
	void ff_rtjpeg_init (0: binary avctx, 1: binary c),
	i32 ff_rv_decode_dc (0: binary s, 1: i32 n),
	i32 ff_rv10_encode_picture_header (0: binary s, 1: i32 picture_number),
	void ff_rv20_encode_picture_header (0: binary s, 1: i32 picture_number),
	void rv30_weak_loop_filter (0: binary lim, 1: binary step, 2: binary stride, 3: binary src),
	binary RV30_LOWPASS (),
	binary choose_vlc_set (0: i32 mod, 1: i32 quant, 2: i32 type),
	binary ff_rv34_decode_end (0: binary avctx),
	binary ff_rv34_decode_init (0: binary avctx),
	i32 adjust_pred16 (0: i32 itype, 1: i32 left, 2: i32 up),
	i32 ff_rv34_decode_frame (0: binary avctx, 1: binary avpkt, 2: binary got_picture_ptr, 3: binary data),
	i32 ff_rv34_decode_init_thread_copy (0: binary avctx),
	i32 ff_rv34_decode_update_thread_context (0: binary dst, 1: binary src),
	i32 ff_rv34_get_start_offset (0: binary gb, 1: i32 mb_size),
	void ZERO8x2 (0: i32 stride, 1: binary dst),
	void decode_coeff (0: binary gb, 1: binary vlc, 2: binary dst, 3: i32 coef, 4: i32 esc, 5: i32 q),
	void decode_subblock1 (0: binary gb, 1: binary vlc, 2: binary dst, 3: i32 code, 4: i32 q),
	void decode_subblock3 (0: binary gb, 1: binary vlc, 2: binary dst, 3: i32 code, 4: i32 q_ac1, 5: i32 q_ac2, 6: i32 q_dc),
	void decode_subblock (0: binary gb, 1: binary vlc, 2: binary is_block2, 3: binary dst, 4: i32 code, 5: i32 q),
	void rv34_mc (0: binary r, 1: binary block_type, 2: binary height, 3: binary thirdpel, 4: binary width, 5: binary xoff, 6: binary yoff, 7: binary chroma_mc, 8: i32 dir, 9: i32 mv_off, 10: i32 weighted, 11: binary qpel_mc),
	void rv34_pred_b_vector (0: binary mx, 1: binary my, 2: binary A, 3: binary B, 4: binary C, 5: i32 A_avail, 6: i32 B_avail, 7: i32 C_avail),
	void rv34_process_block (0: binary r, 1: i32 fc, 2: i32 q_ac, 3: i32 q_dc, 4: i32 sc, 5: i32 stride, 6: binary pdst),
	binary ff_rv34dsp_init (0: binary c),
	binary ff_rv40dsp_init (0: binary c),
	void codec37_mv (0: binary src, 1: i32 height, 2: i32 stride, 3: i32 x, 4: i32 y, 5: binary dst),
	byte ff_sbc_crc8 (0: binary ctx, 1: binary data, 2: i64 len),
	void ff_sbc_calculate_bits (0: binary frame, 1: binary bits),
	void sbc_synthesize_eight (0: binary state, 1: binary frame, 2: binary output_frame, 3: i32 blk, 4: i32 ch),
	void sbc_synthesize_four (0: binary state, 1: binary frame, 2: binary output_frame, 3: i32 blk, 4: i32 ch),
	binary ff_sbcdsp_init (0: binary s),
	void sbc_analyze_1b_8s_simd_even (0: binary s, 1: binary x, 2: binary out, 3: i32 out_stride),
	void sbc_analyze_1b_8s_simd_odd (0: binary s, 1: binary x, 2: binary out, 3: i32 out_stride),
	void sbc_analyze_4b_4s_simd (0: binary s, 1: binary x, 2: binary out, 3: i32 out_stride),
	void sbc_analyze_4b_8s_simd (0: binary s, 1: binary x, 2: binary out, 3: i32 out_stride),
	binary AAC_RENAME (),
	i32 decode_run_i (0: binary avctx, 1: binary cx1, 2: binary cx, 3: binary px, 4: binary py, 5: i32 linesize, 6: i32 off, 7: i32 run, 8: binary dst, 9: binary plx, 10: binary ply, 11: i32 backstep, 12: i32 clr, 13: i32 ptype),
	i32 decode_run_p (0: binary avctx, 1: binary cx1, 2: binary cx, 3: i32 linesize, 4: i32 plinesize, 5: i32 run, 6: i32 sx1, 7: i32 sx2, 8: i32 x, 9: i32 y, 10: binary bx, 11: binary by, 12: binary dst, 13: binary prev, 14: i32 backstep, 15: i32 clr, 16: i32 ptype),
	binary get_uint (0: binary s, 1: i32 k),
	void ff_prores_idct_10 (0: binary qmat, 1: binary block),
	void ff_prores_idct_12 (0: binary qmat, 1: binary block),
	void ff_simple_idct248_put (0: binary block, 1: binary line_size, 2: binary dest),
	void ff_simple_idct44_add (0: binary block, 1: binary line_size, 2: binary dest),
	void ff_simple_idct48_add (0: binary block, 1: binary line_size, 2: binary dest),
	void ff_simple_idct84_add (0: binary block, 1: binary line_size, 2: binary dest),
	void idct4col_add (0: binary col, 1: binary line_size, 2: binary dest),
	void idct4col_put (0: binary col, 1: binary line_size, 2: binary dest),
	void idct4row (0: binary row),
	void FUNC6 (),
	void FUNC6 (),
	void FUNC6 (),
	void FUNC (),
	void FUNC (),
	binary AAC_RENAME (),
	binary AAC_RENAME (),
	i32 main (),
	binary ff_sipr_init_16k (0: binary ctx),
	void ff_sipr_decode_frame_16k (0: binary ctx, 1: binary params, 2: binary out_data),
	void smv_img_pnt_plane (0: i32 height, 1: i32 nlines, 2: i32 src_linesize, 3: binary dst, 4: binary src),
	void smv_img_pnt (0: binary pix_fmt, 1: binary src_linesizes, 2: i32 height, 3: i32 nlines, 4: i32 width, 5: binary dst_data, 6: binary src_data),
	i64 ff_snappy_peek_uncompressed_length (0: binary gb),
	i32 ff_snappy_uncompress (0: binary gb, 1: binary size, 2: binary buf),
	binary ff_snow_common_init (0: binary avctx),
	binary ff_snow_common_end (0: binary s),
	i32 ff_snow_alloc_blocks (0: binary s),
	i32 ff_snow_common_init_after_header (0: binary avctx),
	i32 ff_snow_frame_start (0: binary s),
	i32 ff_snow_get_buffer (0: binary frame, 1: binary s),
	void ff_snow_inner_add_yblock (0: binary obmc_stride, 1: binary obmc, 2: i32 add, 3: i32 b_h, 4: i32 b_w, 5: i32 src_stride, 6: i32 src_x, 7: i32 src_y, 8: binary sb, 9: binary block, 10: binary dst8),
	void ff_snow_pred_block (0: binary s, 1: binary block, 2: i32 b_h, 3: i32 b_w, 4: i32 h, 5: i32 plane_index, 6: i32 sx, 7: i32 sy, 8: i32 w, 9: binary stride, 10: binary dst, 11: binary tmp),
	void ff_snow_release_buffer (0: binary avctx),
	void ff_snow_reset_contexts (0: binary s),
	binary same_block (0: binary a, 1: binary b),
	binary add_yblock (0: binary dst, 1: binary s, 2: binary obmc, 3: i32 add, 4: i32 b_h, 5: i32 b_w, 6: i32 b_x, 7: i32 b_y, 8: i32 dst_stride, 9: i32 h, 10: i32 obmc_stride, 11: i32 offset_dst, 12: i32 plane_index, 13: i32 sliced, 14: i32 src_stride, 15: i32 src_x, 16: i32 src_y, 17: i32 w, 18: binary sb, 19: binary dst8),
	binary predict_plane (0: binary buf, 1: binary s, 2: i32 add, 3: i32 plane_index),
	binary predict_slice (0: binary buf, 1: binary s, 2: i32 add, 3: i32 mb_y, 4: i32 plane_index),
	binary snow_horizontal_compose_liftS_lead_out (0: binary dst, 1: binary ref, 2: binary src, 3: i32 i, 4: i32 width, 5: i32 w),
	binary snow_horizontal_compose_lift_lead_out (0: binary dst, 1: binary ref, 2: binary src, 3: i32 add, 4: i32 i, 5: i32 lift_high, 6: i32 mul, 7: i32 shift, 8: i32 width, 9: i32 w),
	binary snow_interleave_line_footer (0: binary high, 1: binary low, 2: binary i),
	binary snow_interleave_line_header (0: binary high, 1: binary low, 2: binary i, 3: i32 width),
	i32 get_symbol2 (0: binary c, 1: i32 log2, 2: binary state),
	i32 get_symbol (0: binary c, 1: i32 is_signed, 2: binary state),
	void init_ref (0: binary c, 1: i32 ref_index, 2: i32 x, 3: i32 y, 4: binary ref2, 5: binary ref, 6: binary src),
	void pred_mv (0: binary s, 1: binary left, 2: binary top, 3: binary tr, 4: binary mx, 5: binary my, 6: i32 ref),
	void put_symbol2 (0: binary c, 1: i32 log2, 2: i32 v, 3: binary state),
	void put_symbol (0: binary c, 1: i32 is_signed, 2: i32 v, 3: binary state),
	void set_blocks (0: binary s, 1: i32 cb, 2: i32 cr, 3: i32 level, 4: i32 l, 5: i32 mx, 6: i32 my, 7: i32 ref, 8: i32 type, 9: i32 x, 10: i32 y),
	void unpack_coeffs (0: binary s, 1: binary b, 2: binary parent, 3: i32 orientation),
	binary ff_slice_buffer_load_line (0: i32 line, 1: binary buf),
	binary ff_dsputil_init_dwt (0: binary c),
	binary ff_dwt_init (0: binary c),
	i32 ff_slice_buffer_init (0: binary base_buffer, 1: i32 line_count, 2: i32 line_width, 3: i32 max_allocated_lines, 4: binary buf),
	i32 ff_w53_32_c (0: binary v, 1: i32 h, 2: binary line_size, 3: binary pix1, 4: binary pix2),
	i32 ff_w97_32_c (0: binary v, 1: i32 h, 2: binary line_size, 3: binary pix1, 4: binary pix2),
	i32 w_c (0: binary v, 1: i32 h, 2: i32 type, 3: i32 w, 4: binary line_size, 5: binary pix1, 6: binary pix2),
	void ff_slice_buffer_destroy (0: binary buf),
	void ff_slice_buffer_flush (0: binary buf),
	void ff_slice_buffer_release (0: i32 line, 1: binary buf),
	void ff_snow_horizontal_compose97i (0: binary b, 1: binary temp, 2: i32 width),
	void ff_snow_vertical_compose97i (0: binary b0, 1: binary b1, 2: binary b2, 3: binary b3, 4: binary b4, 5: binary b5, 6: i32 width),
	void ff_spatial_dwt (0: binary buffer, 1: binary temp, 2: i32 decomposition_count, 3: i32 height, 4: i32 stride, 5: i32 type, 6: i32 width),
	void ff_spatial_idwt_buffered_init (0: binary cs, 1: i32 decomposition_count, 2: i32 height, 3: i32 stride_line, 4: i32 type, 5: i32 width, 6: binary sb),
	void ff_spatial_idwt_buffered_slice (0: binary cs, 1: binary temp, 2: binary dsp, 3: i32 decomposition_count, 4: i32 height, 5: i32 stride_line, 6: i32 type, 7: i32 width, 8: i32 y, 9: binary slice_buf),
	void ff_spatial_idwt (0: binary buffer, 1: binary temp, 2: i32 decomposition_count, 3: i32 height, 4: i32 stride, 5: i32 type, 6: i32 width),
	void decode_subband_slice_buffered (0: binary s, 1: binary b, 2: binary save_state, 3: i32 h, 4: i32 start_y, 5: binary sb),
	i32 get_block_bits (0: binary s, 1: i32 w, 2: i32 x, 3: i32 y),
	i32 get_penalty_factor (0: i32 lambda2, 1: i32 lambda, 2: i32 type),
	binary get_symbol (0: binary c, 1: i32 is_signed, 2: binary state),
	i32 code_samplerate (0: i32 samplerate),
	i32 intlist_read (0: binary gb, 1: binary gb, 2: binary c, 3: binary buf, 4: binary buf, 5: binary buf, 6: i32 base_2_part, 7: i32 base_2_part, 8: i32 base_2_part, 9: i32 entries, 10: i32 entries, 11: i32 entries, 12: binary state),
	i32 intlist_read (0: binary gb, 1: binary gb, 2: binary c, 3: binary buf, 4: binary buf, 5: binary buf, 6: i32 base_2_part, 7: i32 base_2_part, 8: i32 base_2_part, 9: i32 entries, 10: i32 entries, 11: i32 entries, 12: binary state),
	i32 intlist_write (0: binary pb, 1: binary pb, 2: binary c, 3: binary buf, 4: binary buf, 5: binary buf, 6: i32 base_2_part, 7: i32 base_2_part, 8: i32 base_2_part, 9: i32 entries, 10: i32 entries, 11: i32 entries, 12: binary state),
	i32 intlist_write (0: binary pb, 1: binary pb, 2: binary c, 3: binary buf, 4: binary buf, 5: binary buf, 6: i32 base_2_part, 7: i32 base_2_part, 8: i32 base_2_part, 9: i32 entries, 10: i32 entries, 11: i32 entries, 12: binary state),
	i32 shift_down (0: i32 a, 1: i32 b),
	i32 shift (0: i32 a, 1: i32 b),
	i32 decode_alpha_block (0: binary gb, 1: binary s, 2: i32 linesize, 3: binary dest, 4: binary last_alpha),
	i32 decode_dc_le (0: binary gb, 1: i32 component),
	i32 decode_dct_block (0: binary gb, 1: binary s, 2: binary last_dc, 3: i32 component, 4: i32 linesize, 5: binary dest),
	i32 ff_startcode_find_candidate_c (0: binary buf, 1: i32 size),
	i16 ff_svq1_packet_checksum (0: binary length, 1: binary data, 2: i32 value),
	i32 svq3_decode_block (0: binary gb, 1: binary type, 2: binary block, 3: i32 index),
	i32 svq3_mc_dir (0: binary s, 1: i32 avg, 2: i32 dir, 3: i32 mode, 4: i32 size),
	void svq3_mc_dir_part (0: binary s, 1: i32 avg, 2: i32 dir, 3: i32 dxy, 4: i32 height, 5: i32 mx, 6: i32 my, 7: i32 thirdpel, 8: i32 width, 9: i32 x, 10: i32 y),
	binary ff_synth_filter_init (0: binary c),
	binary WRITE_2D_FUNC (),
	void write_VLC_TYPE_array (0: binary p, 1: i32 s),
	i32 avpriv_tak_parse_streaminfo (0: binary s, 1: binary buf, 2: i32 size),
	i32 ff_tak_check_crc (0: binary buf, 1: binary buf_size),
	i32 ff_tak_decode_frame_header (0: binary avctx, 1: binary gb, 2: binary ti, 3: i32 log_level_offset),
	void ff_tak_parse_streaminfo (0: binary gb, 1: binary s),
	binary ff_takdsp_init (0: binary c),
	void tdsc_yuv2rgb (0: i32 U, 1: i32 V, 2: i32 Y, 3: binary out),
	i32 main (),
	i32 main (),
	void put_cabac_bit (0: binary c, 1: i32 b),
	void renorm_cabac_encoder (0: binary c),
	i32 main (),
	void IsAlmostEqual (0: double A, 1: double B, 2: double epsilon),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	void dct_calc (0: binary d, 1: binary data),
	void dct_end (0: binary d),
	void dct_init (0: binary trans, 1: binary d, 2: i32 nbits),
	void fft_calc (0: binary z, 1: binary s),
	void fft_end (0: binary s),
	void fft_init (0: binary s, 1: i32 inverse, 2: i32 nbits),
	void fft_permute (0: binary z, 1: binary s),
	void imdct_calc (0: binary s, 1: binary output, 2: binary input),
	void mdct_calc (0: binary s, 1: binary output, 2: binary input),
	void mdct_end (0: binary s),
	void mdct_init (0: binary s, 1: double scale, 2: i32 inverse, 3: i32 nbits),
	void rdft_calc (0: binary tab, 1: binary r),
	void rdft_end (0: binary r),
	void rdft_init (0: binary trans, 1: binary r, 2: i32 nbits),
	i32 main (),
	i32 main (),
	i32 main (),
	i32 main (),
	binary main (),
	i32 main (),
	i32 main (),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (),
	i32 main (),
	i32 main (),
	i32 main (),
	i32 main (),
	binary ff_texturedsp_init (0: binary c),
	void dxt1_block_internal (0: binary block, 1: binary stride, 2: binary dst, 3: byte alpha),
	void dxt3_block_internal (0: binary block, 1: binary stride, 2: binary dst),
	void dxt5_block_internal (0: binary block, 1: binary stride, 2: binary dst),
	void rgtc1_block_internal (0: binary block, 1: i32 mono, 2: i32 offset, 3: i32 pix_size, 4: i32 sign, 5: binary stride, 6: binary dst),
	void rgtc2_block_internal (0: binary block, 1: i32 sign, 2: binary stride, 3: binary dst),
	void rgtc_block_internal (0: binary color_tab, 1: binary block, 2: i32 mono, 3: i32 offset, 4: i32 pix_size, 5: binary stride, 6: binary dst),
	binary ff_texturedspenc_init (0: binary c),
	void lerp13rgb (0: binary out, 1: binary p1, 2: binary p2),
	void rgb5652rgb (0: i16 v, 1: binary out),
	double ff_tget_double (0: binary gb, 1: i32 le),
	i32 ff_tadd_bytes_metadata (0: binary metadata, 1: binary gb, 2: binary name, 3: binary sep, 4: i32 count, 5: i32 is_signed, 6: i32 le),
	i32 ff_tadd_doubles_metadata (0: binary metadata, 1: binary gb, 2: binary name, 3: binary sep, 4: i32 count, 5: i32 le),
	i32 ff_tadd_long_metadata (0: binary metadata, 1: binary gb, 2: binary name, 3: binary sep, 4: i32 count, 5: i32 le),
	i32 ff_tadd_rational_metadata (0: binary metadata, 1: binary gb, 2: binary name, 3: binary sep, 4: i32 count, 5: i32 le),
	i32 ff_tadd_shorts_metadata (0: binary metadata, 1: binary gb, 2: binary name, 3: binary sep, 4: i32 count, 5: i32 is_signed, 6: i32 le),
	i32 ff_tadd_string_metadata (0: binary metadata, 1: binary gb, 2: binary name, 3: i32 count, 4: i32 le),
	i32 ff_tdecode_header (0: binary gb, 1: binary ifd_offset, 2: binary le),
	i32 ff_tis_ifd (0: binary tag),
	i32 ff_tread_tag (0: binary gb, 1: binary next, 2: i32 le, 3: binary count, 4: binary tag, 5: binary type),
	binary ff_tget_long (0: binary gb, 1: i32 le),
	binary ff_tget_short (0: binary gb, 1: i32 le),
	binary ff_tget (0: binary gb, 1: i32 le, 2: i32 type),
	i32 check_size (0: binary s, 1: i64 need),
	binary ff_tpeldsp_init (0: binary c),
	void avg_tpel_pixels_mc00_c (0: binary src, 1: i32 height, 2: i32 stride, 3: i32 width, 4: binary dst),
	void avg_tpel_pixels_mc01_c (0: binary src, 1: i32 height, 2: i32 stride, 3: i32 width, 4: binary dst),
	void avg_tpel_pixels_mc02_c (0: binary src, 1: i32 height, 2: i32 stride, 3: i32 width, 4: binary dst),
	void avg_tpel_pixels_mc10_c (0: binary src, 1: i32 height, 2: i32 stride, 3: i32 width, 4: binary dst),
	void avg_tpel_pixels_mc11_c (0: binary src, 1: i32 height, 2: i32 stride, 3: i32 width, 4: binary dst),
	void avg_tpel_pixels_mc12_c (0: binary src, 1: i32 height, 2: i32 stride, 3: i32 width, 4: binary dst),
	void avg_tpel_pixels_mc20_c (0: binary src, 1: i32 height, 2: i32 stride, 3: i32 width, 4: binary dst),
	void avg_tpel_pixels_mc21_c (0: binary src, 1: i32 height, 2: i32 stride, 3: i32 width, 4: binary dst),
	void avg_tpel_pixels_mc22_c (0: binary src, 1: i32 height, 2: i32 stride, 3: i32 width, 4: binary dst),
	void put_tpel_pixels_mc00_c (0: binary src, 1: i32 height, 2: i32 stride, 3: i32 width, 4: binary dst),
	void put_tpel_pixels_mc01_c (0: binary src, 1: i32 height, 2: i32 stride, 3: i32 width, 4: binary dst),
	void put_tpel_pixels_mc02_c (0: binary src, 1: i32 height, 2: i32 stride, 3: i32 width, 4: binary dst),
	void put_tpel_pixels_mc10_c (0: binary src, 1: i32 height, 2: i32 stride, 3: i32 width, 4: binary dst),
	void put_tpel_pixels_mc11_c (0: binary src, 1: i32 height, 2: i32 stride, 3: i32 width, 4: binary dst),
	void put_tpel_pixels_mc12_c (0: binary src, 1: i32 height, 2: i32 stride, 3: i32 width, 4: binary dst),
	void put_tpel_pixels_mc20_c (0: binary src, 1: i32 height, 2: i32 stride, 3: i32 width, 4: binary dst),
	void put_tpel_pixels_mc21_c (0: binary src, 1: i32 height, 2: i32 stride, 3: i32 width, 4: binary dst),
	void put_tpel_pixels_mc22_c (0: binary src, 1: i32 height, 2: i32 stride, 3: i32 width, 4: binary dst),
	i32 GET_TOK (0: binary ctx, 1: i32 type),
	i32 tm2_get_token (0: binary gb, 1: binary code),
	i32 tm2_read_header (0: binary ctx, 1: binary buf),
	void tm2_apply_deltas (0: binary ctx, 1: binary Y, 2: binary deltas, 3: binary last, 4: i32 stride),
	void tm2_hi_res_block (0: binary pic, 1: binary ctx, 2: i32 bx, 3: i32 by),
	void tm2_high_chroma (0: binary data, 1: binary deltas, 2: binary last, 3: i32 stride, 4: binary CD),
	void tm2_low_chroma (0: binary clast, 1: binary data, 2: binary deltas, 3: i32 bx, 4: i32 stride, 5: binary CD),
	void tm2_low_res_block (0: binary pic, 1: binary ctx, 2: i32 bx, 3: i32 by),
	void tm2_med_res_block (0: binary pic, 1: binary ctx, 2: i32 bx, 3: i32 by),
	void tm2_motion_block (0: binary pic, 1: binary ctx, 2: i32 bx, 3: i32 by),
	void tm2_null_res_block (0: binary pic, 1: binary ctx, 2: i32 bx, 3: i32 by),
	void tm2_still_block (0: binary pic, 1: binary ctx, 2: i32 bx, 3: i32 by),
	void tm2_update_block (0: binary pic, 1: binary ctx, 2: i32 bx, 3: i32 by),
	void ff_tta_filter_init (0: binary c, 1: i32 shift),
	void ff_tta_rice_init (0: binary c, 1: i32 k0, 2: i32 k1),
	binary ff_ttadsp_init (0: binary c),
	binary ff_ttaencdsp_init (0: binary c),
	binary ff_twinvq_decode_close (0: binary avctx),
	binary ff_twinvq_decode_init (0: binary avctx),
	double get_cos (0: binary cos_tab, 1: i32 idx, 2: i32 part, 3: i32 size),
	i32 ff_twinvq_decode_frame (0: binary avctx, 1: binary avpkt, 2: binary got_frame_ptr, 3: binary data),
	void eval_lpcenv_or_interp (0: binary ftype, 1: binary tctx, 2: binary in, 3: binary out, 4: i32 part, 5: i32 size, 6: i32 step),
	double twinvq_mulawinv (0: double clip, 1: double mu, 2: double y),
	void twinvq_memset_float (0: binary buf, 1: double val, 2: i32 size),
	i32 get_unary_0_33 (0: binary gb),
	i32 get_unary_0_9 (0: binary gb),
	i32 get_unary (0: binary gb, 1: i32 len, 2: i32 stop),
	binary MAKE_ACCESSORS (),
	binary avcodec_chroma_pos_to_enum (0: i32 xpos, 1: i32 ypos),
	binary av_get_pcm_codec (0: binary fmt, 1: i32 be),
	binary avpriv_find_pix_fmt (0: binary tags, 1: binary fourcc),
	binary ff_thread_get_format (0: binary avctx, 1: binary fmt),
	binary av_cpb_properties_alloc (0: binary size),
	binary ff_add_cpb_side_data (0: binary avctx),
	binary avcodec_parameters_alloc (),
	binary av_hwaccel_next (0: binary hwaccel),
	binary avcodec_close (0: binary avctx),
	binary avcodec_get_hw_config (0: binary codec, 1: i32 index),
	binary av_get_profile_name (0: binary codec, 1: i32 profile),
	binary avcodec_configuration (),
	binary avcodec_get_name (0: binary id),
	binary avcodec_license (),
	binary avcodec_profile_name (0: binary codec_id, 1: i32 profile),
	binary avpriv_find_start_code (0: binary p, 1: binary end, 2: binary state),
	binary avcodec_open2 (0: binary avctx, 1: binary options, 2: binary codec),
	binary ff_codec_open2_recursive (0: binary avctx, 1: binary options, 2: binary codec),
	i64 ff_guess_coded_bitrate (0: binary avctx),
	i32 av_codec_get_max_lowres (0: binary codec),
	i32 av_codec_is_decoder (0: binary codec),
	i32 av_codec_is_encoder (0: binary codec),
	i32 av_get_audio_frame_duration2 (0: binary par, 1: i32 frame_bytes),
	i32 av_get_audio_frame_duration (0: binary avctx, 1: i32 frame_bytes),
	i32 av_get_bits_per_sample (0: binary codec_id),
	i32 av_get_exact_bits_per_sample (0: binary codec_id),
	i32 av_lockmgr_register (0: binary cb),
	i32 avcodec_default_execute2 (0: binary c, 1: binary func, 2: binary ret, 3: i32 count, 4: binary arg),
	i32 avcodec_default_execute (0: binary c, 1: binary func, 2: binary ret, 3: i32 count, 4: i32 size, 5: binary arg),
	i32 avcodec_enum_to_chroma_pos (0: binary pos, 1: binary xpos, 2: binary ypos),
	i32 avcodec_fill_audio_frame (0: binary sample_fmt, 1: binary frame, 2: binary buf, 3: i32 align, 4: i32 buf_size, 5: i32 nb_channels),
	i32 avcodec_is_open (0: binary s),
	i32 avcodec_parameters_copy (0: binary dst, 1: binary src),
	i32 avcodec_parameters_from_context (0: binary par, 1: binary codec),
	i32 avcodec_parameters_to_context (0: binary codec, 1: binary par),
	i32 avpriv_bprint_to_extradata (0: binary buf, 1: binary avctx),
	i32 avpriv_codec_get_cap_skip_frame_fill_param (0: binary codec),
	i32 ff_alloc_a53_sei (0: binary frame, 1: binary sei_size, 2: i64 prefix_len, 3: binary data),
	i32 ff_alloc_entries (0: binary avctx, 1: i32 count),
	i32 ff_int_from_list_or_default (0: binary val_name, 1: binary array_valid_values, 2: i32 default_value, 3: i32 val, 4: binary ctx),
	i32 ff_match_2uint16 (0: binary tab, 1: i32 a, 2: i32 b, 3: i32 size),
	i32 ff_set_dimensions (0: binary s, 1: i32 height, 2: i32 width),
	i32 ff_set_sar (0: binary avctx, 1: AVRational sar),
	i32 ff_side_data_update_matrix_encoding (0: binary matrix_encoding, 1: binary frame),
	i32 ff_thread_can_start_frame (0: binary avctx),
	i32 ff_thread_get_buffer (0: binary avctx, 1: binary f, 2: i32 flags),
	i32 ff_thread_init (0: binary s),
	i32 ff_thread_ref_frame (0: binary dst, 1: binary src),
	i64 av_get_codec_tag_string (0: string buf, 1: i64 buf_size, 2: binary codec_tag),
	binary av_xiphlacing (0: binary s, 1: binary v),
	binary avpriv_toupper4 (0: binary x),
	binary avcodec_version (),
	void av_fast_padded_mallocz (0: i64 min_size, 1: binary size, 2: binary ptr),
	void av_fast_padded_malloc (0: i64 min_size, 1: binary size, 2: binary ptr),
	void av_register_hwaccel (0: binary hwaccel),
	void avcodec_align_dimensions2 (0: binary s, 1: binary height, 2: binary width, 3: binary linesize_align),
	void avcodec_align_dimensions (0: binary s, 1: binary height, 2: binary width),
	void avcodec_parameters_free (0: binary ppar),
	void avcodec_string (0: binary enc, 1: string buf, 2: i32 buf_size, 3: i32 encode),
	void avsubtitle_free (0: binary sub),
	void ff_color_frame (0: binary frame, 1: binary c),
	void ff_reset_entries (0: binary avctx),
	void ff_thread_await_progress2 (0: binary avctx, 1: i32 field, 2: i32 shift, 3: i32 thread),
	void ff_thread_await_progress (0: binary f, 1: i32 field, 2: i32 progress),
	void ff_thread_finish_setup (0: binary avctx),
	void ff_thread_release_buffer (0: binary avctx, 1: binary f),
	void ff_thread_report_progress2 (0: binary avctx, 1: i32 field, 2: i32 n, 3: i32 thread),
	void ff_thread_report_progress (0: binary f, 1: i32 field, 2: i32 progress),
	i32 ff_ut10_huff_cmp_len (0: binary a, 1: binary b),
	i32 ff_ut_huff_cmp_len (0: binary a, 1: binary b),
	binary ff_utvideodsp_init (0: binary c),
	binary ff_v210enc_init (0: binary s),
	binary logger (0: binary buf),
	binary buf_to_m2mctx (0: binary buf),
	i32 ff_v4l2_buffer_avframe_to_buf (0: binary out, 1: binary frame),
	i32 ff_v4l2_buffer_avpkt_to_buf (0: binary out, 1: binary pkt),
	i32 ff_v4l2_buffer_buf_to_avframe (0: binary frame, 1: binary avbuf),
	i32 ff_v4l2_buffer_buf_to_avpkt (0: binary pkt, 1: binary avbuf),
	i32 ff_v4l2_buffer_enqueue (0: binary avbuf),
	i32 ff_v4l2_buffer_initialize (0: binary avbuf, 1: i32 index),
	i64 v4l2_get_pts (0: binary avbuf),
	void v4l2_set_pts (0: binary out, 1: i64 pts),
	binary logger (0: binary ctx),
	binary ctx_to_m2mctx (0: binary ctx),
	i32 ff_v4l2_context_dequeue_frame (0: binary frame, 1: binary ctx),
	i32 ff_v4l2_context_dequeue_packet (0: binary pkt, 1: binary ctx),
	i32 ff_v4l2_context_enqueue_frame (0: binary ctx, 1: binary frame),
	i32 ff_v4l2_context_enqueue_packet (0: binary ctx, 1: binary pkt),
	i32 ff_v4l2_context_get_format (0: binary ctx),
	i32 ff_v4l2_context_init (0: binary ctx),
	i32 ff_v4l2_context_set_format (0: binary ctx),
	i32 ff_v4l2_context_set_status (0: binary ctx, 1: i32 cmd),
	i32 v4l2_get_framesize_compressed (0: binary ctx, 1: i32 height, 2: i32 width),
	i32 v4l2_try_raw_format (0: binary pixfmt, 1: binary ctx),
	i32 v4l2_type_supported (0: binary ctx),
	binary v4l2_get_height (0: binary fmt),
	binary v4l2_get_width (0: binary fmt),
	binary v4l2_resolution_changed (0: binary fmt2, 1: binary ctx),
	void ff_v4l2_context_release (0: binary ctx),
	void v4l2_save_to_context (0: binary fmt, 1: binary ctx),
	binary ff_v4l2_format_v4l2_to_avfmt (0: binary avcodec, 1: i32 v4l2_fmt),
	i32 ff_v4l2_format_avcodec_to_v4l2 (0: binary avcodec),
	i32 ff_v4l2_format_avfmt_to_v4l2 (0: binary avfmt),
	i32 ff_v4l2_m2m_codec_end (0: binary avctx),
	i32 ff_v4l2_m2m_codec_full_reinit (0: binary s),
	i32 ff_v4l2_m2m_codec_init (0: binary avctx),
	i32 ff_v4l2_m2m_codec_reinit (0: binary s),
	i32 ff_v4l2_m2m_create_context (0: binary avctx, 1: binary s),
	i32 v4l2_mplane_video (0: binary cap),
	i32 v4l2_splane_video (0: binary cap),
	i32 v4l2_get_ext_ctrl (0: binary s, 1: binary name, 2: binary value, 3: binary id),
	i32 v4l2_mpeg4_profile_from_ff (0: i32 p),
	binary v4l2_h264_profile_from_ff (0: i32 p),
	void v4l2_set_ext_ctrl (0: binary s, 1: binary name, 2: binary value, 3: binary id),
	void v4l2_set_timeperframe (0: binary s, 1: binary den, 2: binary num),
	i32 ff_vaapi_common_frame_params (0: binary hw_frames_ctx, 1: binary avctx),
	i32 ff_vaapi_decode_cancel (0: binary avctx, 1: binary pic),
	i32 ff_vaapi_decode_init (0: binary avctx),
	i32 ff_vaapi_decode_issue (0: binary avctx, 1: binary pic),
	i32 ff_vaapi_decode_make_param_buffer (0: binary avctx, 1: binary pic, 2: binary data, 3: i32 type, 4: i64 size),
	i32 ff_vaapi_decode_make_slice_buffer (0: binary avctx, 1: binary pic, 2: binary params_data, 3: binary slice_data, 4: i64 params_size, 5: i64 slice_size),
	i32 ff_vaapi_decode_uninit (0: binary avctx),
	binary ff_vaapi_get_surface_id (0: binary pic),
	binary ff_vaapi_encode_close (0: binary avctx),
	binary ff_vaapi_encode_init (0: binary avctx),
	i32 ff_vaapi_encode2 (0: binary avctx, 1: binary pkt, 2: binary input_image, 3: binary got_packet),
	i32 ff_vaapi_encode_receive_packet (0: binary avctx, 1: binary pkt),
	i32 ff_vaapi_encode_send_frame (0: binary avctx, 1: binary frame),
	i32 mpeg2_get_f_code (0: binary s),
	i32 mpeg2_get_is_frame_start (0: binary s),
	binary vc1_get_MVMODE2 (0: binary v),
	binary vc1_get_MVMODE (0: binary v),
	binary vc1_get_INTCOMPFIELD (0: binary v),
	binary vc1_get_LUMSCALE2 (0: binary v),
	binary vc1_get_LUMSHIFT2 (0: binary v),
	i32 vc1_get_LUMSCALE (0: binary v),
	i32 vc1_get_LUMSHIFT (0: binary v),
	i32 vc1_get_TTFRM (0: binary v),
	i32 vc1_has_ACPRED_bitplane (0: binary v),
	i32 vc1_has_DIRECTMB_bitplane (0: binary v),
	i32 vc1_has_FIELDTX_bitplane (0: binary v),
	i32 vc1_has_FORWARDMB_bitplane (0: binary v),
	i32 vc1_has_MVTYPEMB_bitplane (0: binary v),
	i32 vc1_has_OVERFLAGS_bitplane (0: binary v),
	i32 vc1_has_SKIPMB_bitplane (0: binary v),
	void vc1_pack_bitplanes (0: binary ff_bp, 1: i32 n, 2: i32 stride, 3: i32 x, 4: i32 y, 5: binary bitplane),
	i32 check_line (0: binary buf, 1: binary end, 2: binary start),
	i32 check_pixel (0: binary buf, 1: binary end, 2: binary start),
	binary ff_vc1_init_common (0: binary v),
	i32 ff_vc1_decode_entry_point (0: binary avctx, 1: binary gb, 2: binary v),
	i32 ff_vc1_decode_sequence_header (0: binary avctx, 1: binary gb, 2: binary v),
	i32 ff_vc1_parse_frame_header_adv (0: binary gb, 1: binary v),
	i32 ff_vc1_parse_frame_header (0: binary gb, 1: binary v),
	i32 ff_vc1_pred_dc (0: binary s, 1: binary dir_ptr, 2: binary dc_val_ptr, 3: i32 a_avail, 4: i32 c_avail, 5: i32 n, 6: i32 overlap, 7: i32 pq),
	i32 vc1_coded_block_pred (0: binary s, 1: i32 n, 2: binary coded_block_ptr),
	i32 vc1_i_pred_dc (0: binary s, 1: binary dir_ptr, 2: binary dc_val_ptr, 3: i32 n, 4: i32 overlap, 5: i32 pq),
	void ff_vc1_decode_blocks (0: binary v),
	void init_block_index (0: binary v),
	void vc1_b_mc (0: binary v, 1: binary dmv_x, 2: binary dmv_y, 3: i32 direct, 4: i32 mode),
	binary find_next_marker (0: binary end, 1: binary src),
	binary vc1_unescape_buffer (0: binary src, 1: i32 size, 2: binary dst),
	void ff_vc1_b_intfi_loop_filter (0: binary v),
	void ff_vc1_i_loop_filter (0: binary v),
	void ff_vc1_i_overlap_filter (0: binary v),
	void ff_vc1_p_intfr_loop_filter (0: binary v),
	void ff_vc1_p_loop_filter (0: binary v),
	void ff_vc1_p_overlap_filter (0: binary v),
	void ff_vc1_interp_mc (0: binary v),
	void ff_vc1_mc_1mv (0: binary v, 1: i32 dir),
	void ff_vc1_mc_4mv_chroma4 (0: binary v, 1: i32 avg, 2: i32 dir2, 3: i32 dir),
	void ff_vc1_mc_4mv_chroma (0: binary v, 1: i32 dir),
	void ff_vc1_mc_4mv_luma (0: binary v, 1: i32 avg, 2: i32 dir, 3: i32 n),
	void ff_vc1_pred_b_mv_intfi (0: binary v, 1: binary dmv_x, 2: binary dmv_y, 3: binary pred_flag, 4: i32 mv1, 5: i32 n),
	void ff_vc1_pred_b_mv (0: binary v, 1: binary dmv_x, 2: binary dmv_y, 3: i32 direct, 4: i32 mvtype),
	void ff_vc1_pred_mv_intfr (0: binary v, 1: i32 dir, 2: i32 dmv_x, 3: i32 dmv_y, 4: i32 mvn, 5: i32 n, 6: i32 r_x, 7: i32 r_y, 8: binary is_intra),
	void ff_vc1_pred_mv (0: binary v, 1: i32 dir, 2: i32 dmv_x, 3: i32 dmv_y, 4: i32 mv1, 5: i32 n, 6: i32 pred_flag, 7: i32 r_x, 8: i32 r_y, 9: binary is_intra),
	binary scale_mv (0: i32 bfrac, 1: i32 inv, 2: i32 qs, 3: i32 value),
	binary ff_vc1_decode_end (0: binary avctx),
	binary ff_vc1_decode_init_alloc_tables (0: binary v),
	binary ff_vc1_init_transposed_scantables (0: binary v),
	i32 get_fp_val (0: binary gb),
	binary ff_vc1dsp_init (0: binary dsp),
	void vc1_loop_filter (0: i32 len, 1: i32 pq, 2: i32 step, 3: i32 stride, 4: binary src),
	binary ff_vc2enc_init_transforms (0: binary s, 1: i32 p_height, 2: i32 p_stride, 3: i32 slice_h, 4: i32 slice_w),
	binary ff_vc2enc_free_transforms (0: binary s),
	binary MAKE_ACCESSORS (),
	binary av_alloc_vdpaucontext (),
	binary av_vdpau_alloc_context (),
	i32 av_vdpau_bind_context (0: binary avctx, 1: binary device, 2: binary get_proc, 3: binary flags),
	i32 av_vdpau_get_profile (0: binary avctx, 1: binary profile),
	i32 ff_vdpau_add_buffer (0: binary pic_ctx, 1: binary buf, 2: i32 size),
	i32 ff_vdpau_common_end_frame (0: binary pic_ctx, 1: binary avctx, 2: binary frame),
	i32 ff_vdpau_common_frame_params (0: binary hw_frames_ctx, 1: binary avctx),
	i32 ff_vdpau_common_init (0: binary avctx, 1: binary profile, 2: i32 level),
	i32 ff_vdpau_common_start_frame (0: binary pic_ctx, 1: binary buffer, 2: binary size),
	i32 ff_vdpau_common_uninit (0: binary avctx),
	i32 ff_vdpau_mpeg_end_frame (0: binary avctx),
	binary ff_vdpau_get_surface_id (0: binary pic),
	binary ff_videodsp_init (0: binary ctx, 1: i32 bpc),
	void FUNC (),
	binary av_videotoolbox_alloc_context (),
	binary ff_videotoolbox_avcc_extradata_create (0: binary avctx),
	binary ff_videotoolbox_hvcc_extradata_create (0: binary avctx),
	i32 av_videotoolbox_default_init2 (0: binary avctx, 1: binary vtctx),
	i32 av_videotoolbox_default_init (0: binary avctx),
	i32 ff_videotoolbox_alloc_frame (0: binary avctx, 1: binary frame),
	i32 ff_videotoolbox_h264_decode_slice (0: binary avctx, 1: binary buffer, 2: i32 size),
	i32 ff_videotoolbox_h264_start_frame (0: binary avctx, 1: binary buffer, 2: i32 size),
	i32 ff_videotoolbox_uninit (0: binary avctx),
	void av_videotoolbox_default_free (0: binary avctx),
	i32 ff_vorbis_len2vlc (0: binary codes, 1: binary bits, 2: binary num),
	i32 ff_vorbis_ready_floor1_list (0: binary avctx, 1: i32 values, 2: binary list),
	binary ff_vorbis_nth_root (0: binary n, 1: binary x),
	void ff_vorbis_floor1_render_list (0: binary out, 1: binary flag, 2: i32 multiplier, 3: i32 samples, 4: i32 values, 5: binary y_list, 6: binary list),
	void render_line_unrolled (0: binary buf, 1: binary sy, 2: binary x, 3: i32 adx, 4: i32 ady, 5: i32 x1, 6: i32 y),
	binary av_vorbis_parse_init (0: binary extradata, 1: i32 extradata_size),
	i32 av_vorbis_parse_frame_flags (0: binary s, 1: binary buf, 2: binary flags, 3: i32 buf_size),
	i32 av_vorbis_parse_frame (0: binary s, 1: binary buf, 2: i32 buf_size),
	void av_vorbis_parse_free (0: binary s),
	void av_vorbis_parse_reset (0: binary s),
	i32 vorbis_residue_decode (0: binary vec, 1: binary do_not_decode, 2: binary ch_left, 3: binary ch, 4: binary vlen, 5: binary vc, 6: binary vr),
	void ff_vorbis_inverse_coupling (0: binary ang, 1: binary mag, 2: binary blocksize),
	binary ff_vorbisdsp_init (0: binary dsp),
	i32 put_codeword (0: binary pb, 1: i32 entry, 2: binary cb),
	i32 vp3_dequant (0: binary s, 1: binary frag, 2: binary block, 3: i32 inter, 4: i32 plane),
	binary ff_vp3dsp_init (0: binary c, 1: i32 flags),
	void ff_vp3dsp_idct10_add (0: binary block, 1: binary stride, 2: binary dest),
	void ff_vp3dsp_idct10_put (0: binary block, 1: binary stride, 2: binary dest),
	void ff_vp3dsp_set_bounding_values (0: binary bounding_values_array, 1: i32 filter_limit),
	binary ff_vp56_free_context (0: binary s),
	binary ff_vp56_free (0: binary avctx),
	binary ff_vp56_init_context (0: binary avctx, 1: binary s, 2: i32 flip, 3: i32 has_alpha),
	binary ff_vp56_init (0: binary avctx, 1: i32 flip, 2: i32 has_alpha),
	i32 ff_vp56_decode_frame (0: binary avctx, 1: binary avpkt, 2: binary got_frame, 3: binary data),
	void ff_vp56_init_dequant (0: binary s, 1: i32 quantizer),
	binary vp56_rac_get_prob_branchy (0: binary c, 1: i32 prob),
	binary vp56_rac_get_prob (0: binary c, 1: byte prob),
	binary vp56_rac_get_tree (0: binary c, 1: binary tree, 2: binary probs),
	binary vp56_rac_get (0: binary c),
	binary vp8_rac_get_coeff (0: binary c, 1: binary prob),
	binary vp8_rac_get_tree (0: binary c, 1: binary tree, 2: binary probs),
	binary vp8_rac_get (0: binary c),
	binary vpX_rac_is_end (0: binary c),
	binary vp56_rac_renorm (0: binary c),
	binary vp56_rac_gets_nn (0: binary c, 1: i32 bits),
	binary vp8_rac_get_nn (0: binary c),
	binary vp8_rac_get_sint (0: binary c, 1: i32 bits),
	i32 vp56_rac_gets (0: binary c, 1: i32 bits),
	i32 vp8_rac_get_uint (0: binary c, 1: i32 bits),
	binary ff_vp6dsp_init (0: binary s),
	i32 ff_vp56_init_range_decoder (0: binary c, 1: binary buf, 2: i32 buf_size),
	void ff_vp6_filter_diag4_c (0: binary h_weights, 1: binary v_weights, 2: binary stride, 3: binary dst, 4: binary src),
	binary ff_vp8_decode_free (0: binary avctx),
	binary ff_vp8_decode_init (0: binary avctx),
	i32 ff_vp8_decode_frame (0: binary avctx, 1: binary avpkt, 2: binary got_frame, 3: binary data),
	binary LOOP_FILTERS (),
	binary LOOP_FILTERS (),
	binary ff_vp78dsp_init (0: binary dsp),
	void ff_vp9_decode_block (0: binary bl, 1: binary bp, 2: binary lflvl, 3: binary td, 4: i32 col, 5: i32 row, 6: binary uvoff, 7: binary yoff),
	binary ff_vp9dsp_init (0: binary dsp, 1: i32 bitexact, 2: i32 bpp),
	binary FUNC (),
	void memset_bpc (0: i32 len, 1: i32 val, 2: binary dst),
	void ff_vp9_loopfilter_sb (0: binary avctx, 1: binary lflvl, 2: i32 col, 3: i32 row, 4: binary uvoff, 5: binary yoff),
	void ff_vp9_fill_mv (0: binary mv, 1: binary td, 2: i32 mode, 3: i32 sb),
	void ff_vp9_adapt_probs (0: binary s),
	void ff_vp9_inter_recon_16bpp (0: binary td),
	void ff_vp9_inter_recon_8bpp (0: binary td),
	void ff_vp9_intra_recon_16bpp (0: binary td, 1: binary uv_off, 2: binary y_off),
	void ff_vp9_intra_recon_8bpp (0: binary td, 1: binary uv_off, 2: binary y_off),
	i32 wv_check_crc (0: binary s, 1: i32 crc_extra_bits, 2: i32 crc),
	i32 wv_get_value_integer (0: binary s, 1: binary crc, 2: binary S),
	i32 wv_unpack_mono (0: binary gb, 1: binary s, 2: binary type, 3: binary dst),
	i32 wv_unpack_stereo (0: binary gb, 1: binary s, 2: binary type, 3: binary dst_l, 4: binary dst_r),
	binary wp_exp2 (0: i16 val),
	binary wp_log2 (0: i32 val),
	binary ff_wma_init (0: binary avctx, 1: i32 flags2),
	i32 ff_wma_end (0: binary avctx),
	i32 ff_wma_run_level_decode (0: binary avctx, 1: binary gb, 2: binary vlc, 3: binary ptr, 4: binary level_table, 5: binary run_table, 6: i32 block_len, 7: i32 coef_nb_bits, 8: i32 frame_len_bits, 9: i32 num_coefs, 10: i32 offset, 11: i32 version),
	i32 ff_wma_total_gain_to_bits (0: i32 total_gain),
	binary ff_wma_get_large_val (0: binary gb),
	binary ff_wma_get_frame_len_bits (0: i32 sample_rate, 1: i32 version, 2: binary decode_flags),
	double pow_m1_4 (0: binary s, 1: double x),
	binary ff_wmv2_common_init (0: binary w),
	void ff_mspel_motion (0: binary s, 1: i32 h, 2: i32 motion_x, 3: i32 motion_y, 4: binary pix_op, 5: binary ref_picture, 6: binary dest_cb, 7: binary dest_cr, 8: binary dest_y),
	void ff_wmv2_add_mb (0: binary s, 1: binary dest_cb, 2: binary dest_cr, 3: binary dest_y),
	binary wmv2_get_cbp_table_index (0: binary s, 1: i32 cbp_index),
	i32 ff_wmv2_decode_mb (0: binary s),
	i32 ff_wmv2_decode_picture_header (0: binary s),
	i32 ff_wmv2_decode_secondary_picture_header (0: binary s),
	i32 wmv2_decode_inter_block (0: binary w, 1: binary block, 2: i32 cbp, 3: i32 n),
	i32 wmv2_decode_motion (0: binary w, 1: binary mx_ptr, 2: binary my_ptr),
	binary ff_wmv2dsp_init (0: binary c),
	i32 ff_wmv2_encode_picture_header (0: binary s, 1: i32 picture_number),
	void ff_wmv2_encode_mb (0: binary s, 1: i32 motion_x, 2: i32 motion_y),
	i32 wnv1_get_code (0: binary w, 1: i32 base_value),
	binary ff_aac_dsp_init_x86 (0: binary s),
	binary ff_psdsp_init_x86 (0: binary s),
	binary ff_ac3dsp_init_x86 (0: binary c, 1: i32 bit_exact),
	binary DOWNMIX_FUNCS (),
	binary ff_alacdsp_init_x86 (0: binary c),
	binary ff_audiodsp_init_x86 (0: binary c),
	binary ff_blockdsp_init_x86 (0: binary avctx, 1: binary c),
	binary ff_bswapdsp_init_x86 (0: binary c),
	binary get_cabac_bypass_sign_x86 (0: binary c, 1: i32 val),
	binary get_cabac_bypass_x86 (0: binary c),
	binary get_cabac_inline_x86 (0: binary c, 1: binary state),
	binary ff_cavsdsp_init_x86 (0: binary avctx, 1: binary c),
	binary LFE_FIR_FLOAT_FUNC (),
	binary ff_dct_init_x86 (0: binary s),
	void ff_spatial_idwt_init_x86 (0: binary type, 1: binary d),
	binary DIRAC_PIXOP (),
	void ff_avg_dirac_pixels16_sse2 (0: binary src, 1: i32 h, 2: i32 stride, 3: binary dst),
	void ff_avg_dirac_pixels32_sse2 (0: binary src, 1: i32 h, 2: i32 stride, 3: binary dst),
	void ff_put_dirac_pixels32_sse2 (0: binary src, 1: i32 h, 2: i32 stride, 3: binary dst),
	binary ff_dnxhdenc_init_x86 (0: binary ctx),
	binary ff_exrdsp_init_x86 (0: binary dsp),
	void ff_fdct_mmxext (0: binary block),
	void ff_fdct_mmx (0: binary block),
	void ff_fdct_sse2 (0: binary block),
	binary ff_fdctdsp_init_x86 (0: binary avctx, 1: binary c, 2: binary high_bit_depth),
	binary ff_fft_init_x86 (0: binary s),
	binary ff_flacdsp_init_x86 (0: binary fmt, 1: binary c, 2: i32 bps, 3: i32 channels),
	binary ff_fmt_convert_init_x86 (0: binary avctx, 1: binary c),
	binary ff_g722dsp_init_x86 (0: binary dsp),
	binary ff_h263dsp_init_x86 (0: binary c),
	binary QPEL_H264 (),
	binary IDCT_FUNCS (),
	binary ff_hpeldsp_init_x86 (0: binary c, 1: i32 flags),
	binary ff_hpeldsp_vp3_init_x86 (0: binary c, 1: i32 cpu_flags, 2: i32 flags),
	binary ff_huffyuvdsp_init_x86 (0: binary pix_fmt, 1: binary c),
	binary ff_huffyuvencdsp_init_x86 (0: binary avctx, 1: binary c),
	binary ff_init_scantable_permutation_x86 (0: binary perm_type, 1: binary idct_permutation),
	binary ff_idctdsp_init_x86 (0: binary avctx, 1: binary c, 2: binary high_bit_depth),
	binary ff_jpeg2000dsp_init_x86 (0: binary c),
	binary ff_llauddsp_init_x86 (0: binary c),
	void ff_llviddsp_init_x86 (0: binary c),
	binary ff_llvidencdsp_init_x86 (0: binary c),
	binary ff_lpc_init_x86 (0: binary c),
	binary MUL64 (0: i32 a, 1: i32 b),
	binary MULH (0: i32 a, 1: i32 b),
	binary MULL (0: i32 a, 1: i32 b, 2: binary shift),
	binary mid_pred (0: i32 a, 1: i32 b, 2: i32 c),
	i32 NEG_SSR32 (0: i32 a, 1: byte s),
	i32 NEG_USR32 (0: byte s, 1: i32 a),
	binary ff_mdct15_init_x86 (0: binary s),
	binary PIX_SAD (),
	i32 sum_mmx (),
	void sad8_1_mmx (0: i32 h, 1: binary stride, 2: binary blk1, 3: binary blk2),
	void sad8_2_mmx (0: i32 h, 1: binary stride, 2: binary blk1a, 3: binary blk1b, 4: binary blk2),
	void sad8_4_mmx (0: i32 h, 1: binary stride, 2: binary blk1, 3: binary blk2),
	void sad8_x2a_mmx (0: i32 h, 1: binary stride, 2: binary blk1, 3: binary blk2),
	void sad8_y2a_mmx (0: i32 h, 1: binary stride, 2: binary blk1, 3: binary blk2),
	binary ff_mlpdsp_init_x86 (0: binary c),
	binary DECL_IMDCT_BLOCKS (),
	binary ff_mpv_common_init_x86 (0: binary s),
	binary ff_mpegvideodsp_init_x86 (0: binary c),
	binary ff_dct_encode_init_x86 (0: binary s),
	binary ff_mpegvideoencdsp_init_x86 (0: binary avctx, 1: binary c),
	binary ff_opus_dsp_init_x86 (0: binary s),
	binary ff_pixblockdsp_init_x86 (0: binary avctx, 1: binary c, 2: binary high_bit_depth),
	binary ff_pngdsp_init_x86 (0: binary dsp),
	binary ff_proresdsp_init_x86 (0: binary avctx, 1: binary dsp),
	binary QPEL_OP (),
	binary DEF (),
	binary DEF (),
	binary ff_rv34dsp_init_x86 (0: binary c),
	binary DECLARE_WEIGHT (),
	binary ff_sbcdsp_init_x86 (0: binary s),
	binary ff_sbrdsp_init_x86 (0: binary s),
	binary ff_dwt_init_x86 (0: binary c),
	binary ff_svq1enc_init_x86 (0: binary c),
	binary SYNTH_FILTER_FUNC (),
	binary ff_takdsp_init_x86 (0: binary c),
	binary ff_ttadsp_init_x86 (0: binary c),
	binary ff_ttaencdsp_init_x86 (0: binary c),
	binary ff_utvideodsp_init_x86 (0: binary c),
	binary ff_v210_x86_init (0: binary s),
	binary ff_v210enc_init_x86 (0: binary s),
	binary ff_vc1dsp_init_x86 (0: binary dsp),
	binary VC1_MSPEL_MC (),
	binary ff_vc1dsp_init_mmxext (0: binary dsp),
	binary ff_videodsp_init_x86 (0: binary ctx, 1: i32 bpc),
	binary ff_vorbisdsp_init_x86 (0: binary dsp),
	binary ff_vp3dsp_init_x86 (0: binary c, 1: i32 flags),
	binary vp56_rac_get_prob (0: binary c, 1: byte prob),
	binary ff_vp6dsp_init_x86 (0: binary c),
	binary ff_vp8dsp_init_x86 (0: binary c),
	binary DECLARE_LOOP_FILTER (),
	binary ff_vp9dsp_init_x86 (0: binary dsp, 1: i32 bitexact, 2: i32 bpp),
	binary ff_vp9dsp_init_16bpp_x86 (0: binary dsp),
	binary INIT_FUNC (0: binary dsp, 1: i32 bitexact),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary wrap (0: binary avpkt, 1: binary avpkt, 2: binary avpkt, 3: binary got_packet_ptr, 4: binary sub, 5: binary got_packet_ptr, 6: binary options, 7: binary frame, 8: binary avpkt, 9: binary frame, 10: binary avpkt),
	binary ff_xvid_idct_init_x86 (0: binary avctx, 1: binary c, 2: binary high_bit_depth),
	binary mul (0: binary a, 1: binary b),
	binary pow4 (0: binary a),
	binary pow5 (0: binary a),
	void xan_wc3_copy_pixel_run (0: binary frame, 1: binary s, 2: i32 motion_x, 3: i32 motion_y, 4: i32 pixel_count, 5: i32 x, 6: i32 y),
	void xan_wc3_output_pixel_run (0: binary frame, 1: binary s, 2: binary pixel_buffer, 3: i32 pixel_count, 4: i32 x, 5: i32 y),
	void ff_big_add (0: binary b, 1: byte a),
	void ff_big_div (0: binary b, 1: binary r, 2: byte a),
	void ff_big_mul (0: binary b, 1: byte a),
	void ff_xface_generate_face (0: binary src, 1: binary dst),
	i32 pq_push (0: binary pq, 1: binary p),
	i32 avpriv_split_xiph_headers (0: binary header_start, 1: binary extradata, 2: binary header_len, 3: i32 extradata_size, 4: i32 first_header_size),
	binary ff_xvid_idct_init (0: binary avctx, 1: binary c),
	void ff_xvid_idct (0: binary in),
	i32 block_cmp (0: binary c, 1: binary xored, 2: i32 bh, 3: i32 bw, 4: i32 stride2, 5: i32 stride, 6: binary src2, 7: binary src),
	void avdevice_register_all (),
	binary ff_alsa_close (0: binary s1),
	binary ff_alsa_open (0: binary codec_id, 1: binary ctx, 2: i32 channels, 3: binary mode, 4: binary sample_rate),
	i32 ff_alsa_extend_reorder_buf (0: binary s, 1: i32 min_size),
	i32 ff_alsa_get_device_list (0: binary device_list, 1: binary stream_type),
	i32 ff_alsa_xrun_recover (0: binary s1, 1: i32 err),
	binary av_input_audio_device_next (0: binary d),
	binary av_input_video_device_next (0: binary d),
	binary av_output_audio_device_next (0: binary d),
	binary av_output_video_device_next (0: binary d),
	binary avdevice_configuration (),
	binary avdevice_license (),
	i32 avdevice_app_to_dev_control_message (0: binary type, 1: binary s, 2: i64 data_size, 3: binary data),
	i32 avdevice_capabilities_create (0: binary caps, 1: binary device_options, 2: binary s),
	i32 avdevice_dev_to_app_control_message (0: binary type, 1: binary s, 2: i64 data_size, 3: binary data),
	i32 avdevice_list_devices (0: binary device_list, 1: binary s),
	i32 avdevice_list_input_sources (0: binary device_list, 1: binary device_options, 2: binary device, 3: binary device_name),
	i32 avdevice_list_output_sinks (0: binary device_list, 1: binary device_options, 2: binary device, 3: binary device_name),
	binary avdevice_version (),
	void avdevice_capabilities_free (0: binary caps, 1: binary s),
	void avdevice_free_list_devices (0: binary device_list),
	binary add_audio_device (),
	binary add_video_device (),
	binary avf_close (),
	binary avf_read_header (),
	binary avf_read_packet (),
	binary configure_video_device (),
	binary copy_cvpixelbuffer (),
	binary destroy_context (),
	binary get_audio_config (),
	binary get_video_config (),
	binary lock_frames (),
	binary parse_device_name (),
	binary unlock_frames (),
	DECKLINK_BOOL field_order_eq (0: binary field_order, 1: binary bmd_field_order),
	binary decklink_create_iterator (0: binary avctx),
	i32 decklink_get_attr_string (0: binary cfg_id, 1: binary dl, 2: binary s),
	i32 decklink_select_input (0: binary avctx, 1: binary cfg_id),
	i32 ff_decklink_init_device (0: binary avctx, 1: binary name),
	i32 ff_decklink_list_devices (0: binary device_list, 1: binary avctx, 2: i32 show_inputs, 3: i32 show_outputs),
	i32 ff_decklink_list_formats (0: binary avctx, 1: decklink_direction_t direction),
	i32 ff_decklink_set_configs (0: binary avctx, 1: decklink_direction_t direction),
	i32 ff_decklink_set_format (0: binary field_order, 1: binary avctx, 2: binary avctx, 3: decklink_direction_t direction, 4: decklink_direction_t direction, 5: i32 height, 6: i32 num, 7: i32 num, 8: i32 tb_den, 9: i32 tb_num, 10: i32 width),
	i32 ff_decklink_set_format (0: binary field_order, 1: binary avctx, 2: binary avctx, 3: decklink_direction_t direction, 4: decklink_direction_t direction, 5: i32 height, 6: i32 num, 7: i32 num, 8: i32 tb_den, 9: i32 tb_num, 10: i32 width),
	void ff_decklink_cleanup (0: binary avctx),
	void ff_decklink_list_devices_legacy (0: binary avctx, 1: i32 show_inputs, 2: i32 show_outputs),
	string dup_cfstring_to_utf8 (0: binary w),
	string dup_wchar_to_utf8 (0: binary w),
	binary decklink_allocator (),
	binary decklink_input_callback (),
	binary ~decklink_allocator (),
	binary ~decklink_input_callback (),
	binary AllocateBuffer (),
	binary Commit (),
	binary Decommit (),
	binary QueryInterface (),
	binary QueryInterface (),
	binary ReleaseBuffer (),
	HRESULT VideoInputFormatChanged (),
	HRESULT VideoInputFrameArrived (),
	binary AddRef (),
	binary Release (),
	ULONG AddRef (),
	ULONG Release (),
	binary ff_decklink_read_close (0: binary avctx),
	binary ff_decklink_read_header (0: binary avctx),
	i64 get_pkt_pts (0: AVRational time_base, 1: DecklinkPtsSource pts_src, 2: binary audioFrame, 3: binary videoFrame, 4: binary initial_pts, 5: i64 abs_wallclock, 6: i64 wallclock, 7: i32 copyts),
	i32 avpacket_queue_get (0: binary pkt, 1: binary q, 2: i32 block),
	i32 avpacket_queue_put (0: binary pkt, 1: binary q),
	i32 check_vanc_parity_checksum (0: i32 len, 1: binary buf, 2: i16 checksum),
	i32 decklink_autodetect (0: binary cctx),
	i32 ff_decklink_list_input_devices (0: binary device_list, 1: binary avctx),
	i32 ff_decklink_read_packet (0: binary avctx, 1: binary pkt),
	i32 get_vanc_line_idx (0: binary mode),
	i32 linemask_matches (0: i64 mask, 1: i32 line),
	binary get_metadata (0: binary avctx, 1: binary pkt, 2: binary tgt_size, 3: binary width, 4: binary buf, 5: binary tgt),
	binary teletext_data_unit_from_ancillary_packet (0: i64 wanted_lines, 1: i32 allow_multipacket, 2: binary pend, 3: binary py, 4: binary tgt),
	binary teletext_data_unit_from_op47_data (0: i64 wanted_lines, 1: binary pend, 2: binary py, 3: binary tgt),
	binary teletext_data_unit_from_op47_vbi_packet (0: i32 line, 1: binary py, 2: binary tgt),
	binary teletext_data_unit_from_vbi_data_10bit (0: i32 line, 1: binary src, 2: binary tgt),
	binary teletext_data_unit_from_vbi_data (0: i32 line, 1: binary src, 2: binary tgt, 3: binary fmt),
	binary vanc_to_cc (0: binary avctx, 1: binary words, 2: binary buf, 3: binary cc_count),
	byte calc_parity_and_line_offset (0: i32 line),
	binary avpacket_queue_size (0: binary q),
	void avpacket_queue_end (0: binary q),
	void avpacket_queue_flush (0: binary q),
	void avpacket_queue_init (0: binary avctx, 1: binary q),
	void clear_parity_bits (0: i32 len, 1: binary buf),
	void decklink_object_free (0: binary data, 1: binary opaque),
	void extract_luma_from_v210 (0: binary src, 1: i32 width, 2: binary dst),
	void fill_data_unit_head (0: i32 line, 1: binary tgt),
	void unpack_v210 (0: binary src, 1: i32 width, 2: binary dst),
	binary decklink_frame (),
	binary decklink_frame (),
	binary GetFlags (),
	binary GetPixelFormat (),
	binary GetAncillaryData (),
	binary GetBytes (),
	binary GetTimecode (),
	binary QueryInterface (),
	binary QueryInterface (),
	binary ScheduledFrameCompleted (),
	binary ScheduledPlaybackHasStopped (),
	binary SetAncillaryData (),
	binary AddRef (),
	binary AddRef (),
	binary Release (),
	binary Release (),
	binary ff_decklink_write_header (0: binary avctx),
	binary ff_decklink_write_trailer (0: binary avctx),
	i32 decklink_construct_vanc (0: binary ctx, 1: binary avctx, 2: binary pkt, 3: binary frame),
	i32 decklink_setup_audio (0: binary avctx, 1: binary st),
	i32 decklink_setup_video (0: binary avctx, 1: binary st),
	i32 decklink_write_audio_packet (0: binary avctx, 1: binary pkt),
	i32 decklink_write_video_packet (0: binary avctx, 1: binary pkt),
	i32 ff_decklink_list_output_devices (0: binary device_list, 1: binary avctx),
	i32 ff_decklink_write_packet (0: binary avctx, 1: binary pkt),
	binary GetHeight (),
	binary GetRowBytes (),
	binary GetWidth (),
	void construct_cc (0: binary ctx, 1: binary vanc_lines, 2: binary avctx, 3: binary pkt),
	void dshow_show_filter_properties (0: binary avctx, 1: binary device_filter),
	void nothing (0: binary foo),
	i32 ff_copy_dshow_media_type (0: binary dst, 1: binary src),
	void ff_printGUID (0: binary g),
	void ff_print_AM_MEDIA_TYPE (0: binary type),
	void ff_print_AUDIO_STREAM_CONFIG_CAPS (0: binary caps),
	void ff_print_VIDEO_STREAM_CONFIG_CAPS (0: binary caps),
	HRESULT dshow_try_setup_crossbar_options (0: binary devtype, 1: binary avctx, 2: binary device_filter, 3: binary graph_builder2),
	binary libAVEnumMediaTypes_Clone (0: binary enums, 1: binary this),
	binary libAVEnumMediaTypes_Reset (0: binary this),
	binary libAVEnumMediaTypes_Skip (0: binary this, 1: i32 n),
	binary libAVEnumPins_Clone (0: binary pins, 1: binary this),
	binary libAVEnumPins_Reset (0: binary this),
	binary libAVEnumPins_Skip (0: binary this, 1: i32 n),
	binary libAVFilter_EnumPins (0: binary enumpin, 1: binary this),
	binary libAVFilter_FindPin (0: binary pin, 1: binary id, 2: binary this),
	binary libAVFilter_GetState (0: DWORD ms, 1: binary state, 2: binary this),
	binary libAVFilter_GetSyncSource (0: binary clock, 1: binary this),
	binary libAVFilter_JoinFilterGraph (0: binary graph, 1: binary name, 2: binary this),
	binary libAVFilter_Pause (0: binary this),
	binary libAVFilter_QueryFilterInfo (0: binary info, 1: binary this),
	binary libAVFilter_QueryVendorInfo (0: binary this, 1: binary info),
	binary libAVFilter_Run (0: binary start, 1: binary this),
	binary libAVFilter_SetSyncSource (0: binary clock, 1: binary this),
	binary libAVFilter_Stop (0: binary this),
	binary DECLARE_CREATE (0: binary filter, 1: binary filter),
	binary libAVMemInputPin_GetAllocatorRequirements (0: binary props, 1: binary this),
	binary libAVMemInputPin_GetAllocator (0: binary alloc, 1: binary this),
	binary libAVMemInputPin_NotifyAllocator (0: BOOL rdwr, 1: binary alloc, 2: binary this),
	binary libAVMemInputPin_ReceiveCanBlock (0: binary this),
	binary libAVMemInputPin_ReceiveMultiple (0: binary samples, 1: binary this, 2: binary nproc, 3: i32 n),
	binary libAVMemInputPin_Receive (0: binary sample, 1: binary this),
	binary libAVPin_BeginFlush (0: binary this),
	binary libAVPin_ConnectedTo (0: binary pin, 1: binary this),
	binary libAVPin_ConnectionMediaType (0: binary type, 1: binary this),
	binary libAVPin_Disconnect (0: binary this),
	binary libAVPin_EndFlush (0: binary this),
	binary libAVPin_EndOfStream (0: binary this),
	binary libAVPin_EnumMediaTypes (0: binary enumtypes, 1: binary this),
	binary libAVPin_NewSegment (0: binary start, 1: binary stop, 2: double rate, 3: binary this),
	binary libAVPin_QueryAccept (0: binary type, 1: binary this),
	binary libAVPin_QueryDirection (0: binary dir, 1: binary this),
	binary libAVPin_QueryId (0: binary this, 1: binary id),
	binary libAVPin_QueryInternalConnections (0: binary pin, 1: binary this, 2: binary npin),
	binary libAVPin_QueryPinInfo (0: binary info, 1: binary this),
	binary libAVPin_ReceiveConnection (0: binary pin, 1: binary type, 2: binary this),
	binary libAVMemInputPin_AddRef (0: binary this),
	binary libAVMemInputPin_Release (0: binary this),
	void libAVMemInputPin_Destroy (0: binary this),
	binary ff_get_pixfmt_from_fb_varinfo (0: binary varinfo),
	binary ff_fbdev_default_device (),
	i32 ff_fbdev_get_device_list (0: binary device_list),
	i32 dc1394_read_common (0: binary c, 1: binary select_fmt, 2: binary select_fps),
	binary get_al_format_info (0: binary al_fmt),
	i32 al_get_error (0: binary device, 1: binary error_msg_ret),
	void print_al_capture_devices (0: binary log_ctx),
	i32 ff_oss_audio_close (0: binary s),
	i32 ff_oss_audio_open (0: binary s1, 1: binary audio_device, 2: i32 is_output),
	i32 ff_pulse_audio_connect_context (0: binary description, 1: binary server, 2: binary pa_ctx, 3: binary pa_ml),
	i32 ff_pulse_audio_get_devices (0: binary devices, 1: binary server, 2: i32 output),
	binary ff_codec_id_to_pulse_format (0: binary codec_id),
	void ff_pulse_audio_disconnect_context (0: binary pa_ctx, 1: binary pa_ml),
	binary ff_sndio_open (0: binary s1, 1: binary audio_device, 2: i32 is_output),
	i32 ff_sndio_close (0: binary s),
	void movecb (0: i32 delta, 1: binary addr),
	i32 main (),
	binary ff_timefilter_new (0: double bandwidth, 1: double period, 2: double time_base),
	double ff_timefilter_eval (0: binary self, 1: double delta),
	double ff_timefilter_update (0: binary self, 1: double period, 2: double system_time),
	void ff_timefilter_destroy (0: binary self),
	void ff_timefilter_reset (0: binary self),
	i32 ff_alloc_input_device_context (0: binary avctx, 1: binary iformat, 2: binary format),
	binary ff_fmt_v4l2codec (0: i32 v4l2_fmt),
	binary ff_fmt_v4l2ff (0: binary codec_id, 1: i32 v4l2_fmt),
	i32 ff_fmt_ff2v4l (0: binary codec_id, 1: binary pix_fmt),
	binary ff_nlmeans_init_aarch64 (0: binary dsp),
	double factor (0: double aa1, 1: double aa, 2: double k, 3: double y),
	double biquad (0: binary bq, 1: double in),
	void set_highshelf_rbj (0: binary bq, 1: double freq, 2: double peak, 3: double q, 4: double sr),
	void set_lp_rbj (0: binary bq, 1: double fc, 2: double gain, 3: double q, 4: double sr),
	double getimag (0: double ch, 1: double x, 2: binary priv),
	double getreal (0: double ch, 1: double x, 2: binary priv),
	void ff_afir_init (0: binary dsp),
	void copy_samples (0: binary in, 1: binary route, 2: i32 bps, 3: i32 nb_inputs, 4: i32 ns, 5: binary ins, 6: binary outs),
	double hz_2_rad (0: double fs, 1: double x),
	double section_process (0: binary S, 1: double in),
	void ff_anlmdn_init (0: binary dsp),
	void update_stat (0: binary s, 1: binary p, 2: double d, 3: double nd, 4: i64 i),
	binary yae_curr_frag (0: binary atempo),
	binary yae_prev_frag (0: binary atempo),
	double bound (0: binary threshold, 1: binary val),
	double fade (0: binary fade_factors, 1: double next, 2: double prev, 3: i32 pos),
	double pow_2 (0: binary value),
	double update_value (0: double aggressiveness, 1: double new, 2: double old),
	i32 frame_size (0: i32 frame_len_msec, 1: i32 sample_rate),
	binary scalarproduct (0: binary endin, 1: binary in, 2: binary out),
	i32 frame_size (0: i32 frame_len_msec, 1: i32 sample_rate),
	void get_lfe (0: binary lfe_mag, 1: binary mag_total, 2: double highcut, 3: double lowcut, 4: i32 n, 5: i32 output_lfe),
	void scale_samples_s16_small (0: binary src, 1: i32 nb_samples, 2: i32 volume, 3: binary dst),
	void scale_samples_s16 (0: binary src, 1: i32 nb_samples, 2: i32 volume, 3: binary dst),
	void scale_samples_s32 (0: binary src, 1: i32 nb_samples, 2: i32 volume, 3: binary dst),
	void scale_samples_u8_small (0: binary src, 1: i32 nb_samples, 2: i32 volume, 3: binary dst),
	void scale_samples_u8 (0: binary src, 1: i32 nb_samples, 2: i32 volume, 3: binary dst),
	double logdb (0: i64 v),
	binary av_filter_iterate (0: binary opaque),
	binary avfilter_get_by_name (0: binary name),
	binary avfilter_next (0: binary prev),
	i32 avfilter_register (0: binary filter),
	void avfilter_register_all (),
	binary ff_default_get_audio_buffer (0: binary link, 1: i32 nb_samples),
	binary ff_get_audio_buffer (0: binary link, 1: i32 nb_samples),
	binary ff_null_get_audio_buffer (0: binary link, 1: i32 nb_samples),
	i32 get_x (0: double phase, 1: i32 w),
	void draw_dot (0: binary out, 1: i32 x, 2: i32 y, 3: binary fg),
	void plot_freq (0: binary outlink, 1: binary out, 2: binary s, 3: double a, 4: binary prev_y, 5: i32 ch, 6: i32 f, 7: binary fg),
	i32 calc_max_draw (0: binary outlink, 1: binary s, 2: double max),
	void calc_persistent_max (0: binary s, 1: double max, 2: i32 channel),
	void draw_max_line (0: binary s, 1: i32 channel, 2: i32 max_draw),
	i32 push_frame (0: binary outlink),
	binary avfilter_pad_get_type (0: binary pads, 1: i32 pad_idx),
	binary ff_filter_alloc (0: binary filter, 1: binary inst_name),
	binary ff_inlink_peek_frame (0: binary link, 1: i64 idx),
	binary avfilter_get_class (),
	binary avfilter_configuration (),
	binary avfilter_license (),
	binary avfilter_pad_get_name (0: binary pads, 1: i32 pad_idx),
	i32 avfilter_config_links (0: binary filter),
	i32 avfilter_init_dict (0: binary options, 1: binary ctx),
	i32 avfilter_init_str (0: binary filter, 1: binary args),
	i32 avfilter_insert_filter (0: binary filt, 1: binary link, 2: binary filt_dstpad_idx, 3: binary filt_srcpad_idx),
	i32 avfilter_link_get_channels (0: binary link),
	i32 avfilter_link (0: binary dst, 1: binary src, 2: binary dstpad, 3: binary srcpad),
	i32 avfilter_pad_count (0: binary pads),
	i32 avfilter_process_command (0: binary filter, 1: string res, 2: binary arg, 3: binary cmd, 4: i32 flags, 5: i32 res_len),
	i32 ff_filter_activate (0: binary filter),
	i32 ff_filter_frame (0: binary link, 1: binary frame),
	i32 ff_filter_get_nb_threads (0: binary ctx),
	i32 ff_filter_init_hw_frames (0: binary avctx, 1: binary link, 2: i32 default_pool_size),
	i32 ff_inlink_acknowledge_status (0: binary link, 1: binary rstatus, 2: binary rpts),
	i32 ff_inlink_check_available_frame (0: binary link),
	i32 ff_inlink_check_available_samples (0: binary link, 1: binary min),
	i32 ff_inlink_consume_frame (0: binary link, 1: binary rframe),
	i32 ff_inlink_consume_samples (0: binary link, 1: binary rframe, 2: binary max, 3: binary min),
	i32 ff_inlink_evaluate_timeline_at_frame (0: binary link, 1: binary frame),
	i32 ff_inlink_make_frame_writable (0: binary link, 1: binary rframe),
	i32 ff_inlink_process_commands (0: binary link, 1: binary frame),
	i32 ff_inlink_queued_samples (0: binary link),
	i32 ff_insert_pad (0: binary links, 1: binary pads, 2: binary newpad, 3: i64 padidx_off, 4: binary count, 5: binary idx),
	i32 ff_outlink_get_status (0: binary link),
	i32 ff_poll_frame (0: binary link),
	i32 ff_request_frame (0: binary link),
	i64 ff_inlink_queued_frames (0: binary link),
	binary avfilter_version (),
	void avfilter_free (0: binary filter),
	void avfilter_link_free (0: binary link),
	void avfilter_link_set_closed (0: binary link, 1: i32 closed),
	void ff_avfilter_link_set_in_status (0: binary link, 1: i64 pts, 2: i32 status),
	void ff_avfilter_link_set_out_status (0: binary link, 1: i64 pts, 2: i32 status),
	void ff_command_queue_pop (0: binary filter),
	void ff_filter_set_ready (0: binary filter, 1: binary priority),
	void ff_inlink_request_frame (0: binary link),
	void ff_inlink_set_status (0: binary link, 1: i32 status),
	void ff_tlog_link (0: binary link, 1: i32 end, 2: binary ctx),
	void ff_tlog_ref (0: binary ref, 1: i32 end, 2: binary ctx),
	void ff_update_link_current_pts (0: binary link, 1: i64 pts),
	binary avfilter_graph_alloc_filter (0: binary graph, 1: binary filter, 2: binary name),
	binary avfilter_graph_get_filter (0: binary graph, 1: binary name),
	binary avfilter_graph_alloc (),
	i32 avfilter_graph_config (0: binary graphctx, 1: binary log_ctx),
	i32 avfilter_graph_create_filter (0: binary filt_ctx, 1: binary graph_ctx, 2: binary filt, 3: binary args, 4: binary name, 5: binary opaque),
	i32 avfilter_graph_queue_command (0: binary graph, 1: binary arg, 2: binary command, 3: binary target, 4: double ts, 5: i32 flags),
	i32 avfilter_graph_request_oldest (0: binary graph),
	i32 avfilter_graph_send_command (0: binary graph, 1: string res, 2: binary arg, 3: binary cmd, 4: binary target, 5: i32 flags, 6: i32 res_len),
	i32 ff_filter_graph_run_once (0: binary graph),
	i32 ff_graph_thread_init (0: binary graph),
	void avfilter_graph_free (0: binary graph),
	void avfilter_graph_set_auto_convert (0: binary graph, 1: binary flags),
	void ff_avfilter_graph_update_heap (0: binary graph, 1: binary link),
	void ff_filter_graph_remove_filter (0: binary filter, 1: binary graph),
	void ff_graph_thread_free (0: binary graph),
	i32 ff_calculate_bounding_box (0: binary bbox, 1: binary data, 2: i32 h, 3: i32 linesize, 4: i32 min_val, 5: i32 w),
	i32 ff_boxblur_eval_filter_params (0: binary inlink, 1: binary alpha_param, 2: binary chroma_param, 3: binary luma_param),
	binary ff_bufqueue_get (0: binary queue),
	binary ff_bufqueue_peek (0: binary queue, 1: binary index),
	i32 ff_bufqueue_is_full (0: binary queue),
	void ff_bufqueue_add (0: binary queue, 1: binary buf, 2: binary log),
	void ff_bufqueue_discard_all (0: binary queue),
	binary av_abuffersink_params_alloc (),
	binary av_buffersink_params_alloc (),
	binary av_buffersink_get_frame_flags (0: binary ctx, 1: binary frame, 2: i32 flags),
	binary av_buffersink_get_frame (0: binary ctx, 1: binary frame),
	binary av_buffersink_get_samples (0: binary ctx, 1: binary frame, 2: i32 nb_samples),
	void av_buffersink_set_frame_size (0: binary ctx, 1: binary frame_size),
	binary av_buffersrc_parameters_alloc (),
	binary av_buffersrc_add_frame_flags (0: binary ctx, 1: binary frame, 2: i32 flags),
	binary av_buffersrc_add_frame (0: binary ctx, 1: binary frame),
	binary av_buffersrc_write_frame (0: binary ctx, 1: binary frame),
	i32 av_buffersrc_close (0: binary ctx, 1: i64 pts, 2: binary flags),
	i32 av_buffersrc_parameters_set (0: binary param, 1: binary ctx),
	binary av_buffersrc_get_nb_failed_requests (0: binary buffer_src),
	double ff_determine_signal_peak (0: binary in),
	void ff_fill_rgb2xyz_table (0: binary coeffs, 1: binary wp),
	void ff_matrix_invert_3x3 (),
	void ff_matrix_mul_3x3 (),
	void ff_update_hdr_metadata (0: binary in, 1: double peak),
	void ff_colorspacedsp_init (0: binary dsp),
	binary ff_dnn_load_model_native (0: binary model_filename),
	DNNReturnType ff_dnn_execute_model_native (0: binary model),
	void ff_dnn_free_model_native (0: binary model),
	binary ff_dnn_load_model_tf (0: binary model_filename),
	DNNReturnType ff_dnn_execute_model_tf (0: binary model),
	void ff_dnn_free_model_tf (0: binary model),
	binary ff_get_dnn_module (0: DNNBackendType backend_type),
	binary ff_draw_supported_pixel_formats (0: binary flags),
	i32 ff_draw_init (0: binary format, 1: binary draw, 2: binary flags),
	i32 ff_draw_round_to_sub (0: binary draw, 1: i32 round_dir, 2: i32 sub_dir, 3: i32 value),
	i32 ff_fill_line_with_color (0: binary pix_fmt, 1: binary is_packed_rgba, 2: binary pixel_step, 3: i32 w, 4: binary line, 5: binary dst_color, 6: binary rgba_color, 7: binary rgba_map_ptr),
	i32 ff_fill_rgba_map (0: binary pix_fmt, 1: binary rgba_map),
	void ff_blend_mask (0: binary color, 1: binary draw, 2: binary mask, 3: binary dst_linesize, 4: i32 dst_h, 5: i32 dst_w, 6: i32 l2depth, 7: i32 mask_h, 8: i32 mask_linesize, 9: i32 mask_w, 10: i32 x0, 11: i32 y0, 12: binary dst, 13: binary endianness),
	void ff_blend_rectangle (0: binary color, 1: binary draw, 2: binary dst_linesize, 3: i32 dst_h, 4: i32 dst_w, 5: i32 h, 6: i32 w, 7: i32 x0, 8: i32 y0, 9: binary dst),
	void ff_copy_rectangle2 (0: binary draw, 1: binary dst_linesize, 2: binary src_linesize, 3: i32 dst_x, 4: i32 dst_y, 5: i32 h, 6: i32 src_x, 7: i32 src_y, 8: i32 w, 9: binary dst, 10: binary src),
	void ff_copy_rectangle (0: binary dst_linesize, 1: binary pixelstep, 2: binary src_linesize, 3: i32 hsub, 4: i32 h, 5: i32 vsub, 6: i32 w, 7: i32 x, 8: i32 y2, 9: i32 y, 10: binary dst, 11: binary src),
	void ff_draw_color (0: binary color, 1: binary draw, 2: binary rgba),
	void ff_draw_rectangle (0: binary dst_linesize, 1: binary pixelstep, 2: i32 hsub, 3: i32 h, 4: i32 vsub, 5: i32 w, 6: i32 x, 7: i32 y, 8: binary dst, 9: binary src),
	void ff_fill_rectangle (0: binary color, 1: binary draw, 2: binary dst_linesize, 3: i32 dst_x, 4: i32 dst_y, 5: i32 h, 6: i32 w, 7: binary dst),
	binary ff_ebur128_init (0: i32 mode, 1: binary channels, 2: i32 samplerate, 3: i32 window),
	i32 ff_ebur128_loudness_global_multiple (0: binary sts, 1: binary out, 2: i64 size),
	i32 ff_ebur128_loudness_global (0: binary st, 1: binary out),
	i32 ff_ebur128_loudness_momentary (0: binary st, 1: binary out),
	i32 ff_ebur128_loudness_range_multiple (0: binary sts, 1: binary out, 2: i64 size),
	i32 ff_ebur128_loudness_range (0: binary st, 1: binary out),
	i32 ff_ebur128_loudness_shortterm (0: binary st, 1: binary out),
	i32 ff_ebur128_loudness_window (0: binary st, 1: binary out, 2: i32 window),
	i32 ff_ebur128_relative_threshold (0: binary st, 1: binary out),
	i32 ff_ebur128_sample_peak (0: binary st, 1: binary out, 2: binary channel_number),
	i32 ff_ebur128_set_channel (0: binary st, 1: i32 value, 2: binary channel_number),
	void ff_ebur128_destroy (0: binary st),
	void init_histogram (),
	void draw_dot (0: binary out, 1: i32 fg, 2: i32 x, 3: i32 y),
	i32 lu_to_y (0: binary ebur128, 1: double v),
	i32 push_frame (0: binary ctx),
	string make_command_flags_str (0: binary pbuf, 1: i32 flags),
	i32 ff_outlink_frame_wanted (0: binary link),
	void ff_outlink_set_status (0: binary link, 1: i64 pts, 2: i32 status),
	binary avfilter_make_format64_list (0: binary fmts),
	binary ff_all_channel_counts (),
	binary ff_all_channel_layouts (),
	binary ff_make_formatu64_list (0: binary fmts),
	binary ff_merge_channel_layouts (0: binary a, 1: binary b),
	binary ff_all_formats (0: binary type),
	binary ff_all_samplerates (),
	binary ff_make_format_list (0: binary fmts),
	binary ff_merge_formats (0: binary type, 1: binary a, 2: binary b),
	binary ff_merge_samplerates (0: binary a, 1: binary b),
	binary ff_planar_sample_fmts (),
	i32 ff_add_channel_layout (0: binary l, 1: i64 channel_layout),
	i32 ff_add_format (0: binary avff, 1: i64 fmt),
	i32 ff_channel_layouts_ref (0: binary ref, 1: binary f),
	i32 ff_default_query_formats (0: binary ctx),
	i32 ff_fmt_is_in (0: binary fmts, 1: i32 fmt),
	i32 ff_formats_ref (0: binary ref, 1: binary f),
	i32 ff_parse_channel_layout (0: binary arg, 1: binary nret, 2: binary ret, 3: binary log_ctx),
	i32 ff_parse_pixel_format (0: binary ret, 1: binary arg, 2: binary log_ctx),
	i32 ff_parse_sample_format (0: binary arg, 1: binary ret, 2: binary log_ctx),
	i32 ff_parse_sample_rate (0: binary arg, 1: binary ret, 2: binary log_ctx),
	i32 ff_parse_time_base (0: binary ret, 1: binary arg, 2: binary log_ctx),
	i32 ff_query_formats_all_layouts (0: binary ctx),
	i32 ff_set_common_channel_layouts (0: binary layouts, 1: binary ctx),
	i32 ff_set_common_formats (0: binary ctx, 1: binary formats),
	i32 ff_set_common_samplerates (0: binary ctx, 1: binary samplerates),
	void ff_channel_layouts_changeref (0: binary newref, 1: binary oldref),
	void ff_channel_layouts_unref (0: binary ref),
	void ff_formats_changeref (0: binary newref, 1: binary oldref),
	void ff_formats_unref (0: binary ref),
	binary ff_frame_pool_get (0: binary pool),
	binary ff_frame_pool_audio_init (0: binary format, 1: binary alloc, 2: i32 align, 3: i32 channels, 4: i32 nb_samples),
	binary ff_frame_pool_video_init (0: binary format, 1: binary alloc, 2: i32 align, 3: i32 height, 4: i32 width),
	i32 ff_frame_pool_get_audio_config (0: binary format, 1: binary pool, 2: binary align, 3: binary channels, 4: binary nb_samples),
	i32 ff_frame_pool_get_video_config (0: binary format, 1: binary pool, 2: binary align, 3: binary height, 4: binary width),
	void ff_frame_pool_uninit (0: binary pool),
	binary ff_framequeue_peek (0: binary fq, 1: i64 idx),
	binary ff_framequeue_take (0: binary fq),
	binary bucket (0: binary fq, 1: i64 idx),
	i32 ff_framequeue_add (0: binary frame, 1: binary fq),
	void ff_framequeue_free (0: binary fq),
	void ff_framequeue_global_init (0: binary fqg),
	void ff_framequeue_init (0: binary fq, 1: binary fqg),
	void ff_framequeue_skip_samples (0: AVRational time_base, 1: binary fq, 2: i64 samples),
	binary ff_framequeue_queued_frames (0: binary fq),
	i64 ff_framequeue_queued_samples (0: binary fq),
	void ff_framequeue_update_peeked (0: binary fq, 1: binary idx),
	binary ff_framesync_get_class (),
	i32 ff_framesync_activate (0: binary fs),
	i32 ff_framesync_configure (0: binary fs),
	i32 ff_framesync_dualinput_get_writable (0: binary f0, 1: binary f1, 2: binary fs),
	i32 ff_framesync_dualinput_get (0: binary f0, 1: binary f1, 2: binary fs),
	i32 ff_framesync_get_frame (0: binary rframe, 1: binary fs, 2: binary get, 3: binary in),
	i32 ff_framesync_init_dualinput (0: binary parent, 1: binary fs),
	i32 ff_framesync_init (0: binary parent, 1: binary fs, 2: binary nb_in),
	void ff_framesync_preinit (0: binary fs),
	void ff_framesync_uninit (0: binary fs),
	void ff_generate_wave_table (0: binary sample_fmt, 1: binary wave_type, 2: double max, 3: double min, 4: double phase, 5: i32 table_size, 6: binary table),
	string avfilter_graph_dump (0: binary graph, 1: binary options),
	binary avfilter_inout_alloc (),
	i32 avfilter_graph_parse2 (0: binary graph, 1: binary inputs, 2: binary outputs, 3: binary filters),
	i32 avfilter_graph_parse_ptr (0: binary graph, 1: binary open_inputs_ptr, 2: binary open_outputs_ptr, 3: binary filters, 4: binary log_ctx),
	i32 avfilter_graph_parse (0: binary graph, 1: binary open_inputs, 2: binary open_outputs, 3: binary filters, 4: binary log_ctx),
	void avfilter_inout_free (0: binary inout),
	double hermite_interpolation (0: double m0, 1: double m1, 2: double p0, 3: double p1, 4: double x0, 5: double x1, 6: double x),
	i32 ff_insert_inpad (0: binary f, 1: binary p, 2: binary index),
	i32 ff_insert_outpad (0: binary f, 1: binary p, 2: binary index),
	i32 ff_norm_qscale (0: i32 qscale, 1: i32 type),
	i32 ff_load_image (0: binary pix_fmt, 1: binary filename, 2: binary h, 3: binary w, 4: binary linesize, 5: binary data, 6: binary log_ctx),
	i32 ff_scale_image (0: binary dst_pix_fmt, 1: binary src_pix_fmt, 2: binary dst_linesize, 3: binary src_linesize, 4: i32 dst_h, 5: i32 dst_w, 6: i32 src_h, 7: i32 src_w, 8: binary dst_data, 9: binary src_data, 10: binary log_ctx),
	i64 ff_me_cmp_sad (0: binary me_ctx, 1: i32 x_mb, 2: i32 x_mv, 3: i32 y_mb, 4: i32 y_mv),
	i64 ff_me_search_ds (0: binary me_ctx, 1: binary mv, 2: i32 x_mb, 3: i32 y_mb),
	i64 ff_me_search_epzs (0: binary me_ctx, 1: binary mv, 2: i32 x_mb, 3: i32 y_mb),
	i64 ff_me_search_esa (0: binary me_ctx, 1: binary mv, 2: i32 x_mb, 3: i32 y_mb),
	i64 ff_me_search_fss (0: binary me_ctx, 1: binary mv, 2: i32 x_mb, 3: i32 y_mb),
	i64 ff_me_search_hexbs (0: binary me_ctx, 1: binary mv, 2: i32 x_mb, 3: i32 y_mb),
	i64 ff_me_search_ntss (0: binary me_ctx, 1: binary mv, 2: i32 x_mb, 3: i32 y_mb),
	i64 ff_me_search_tdls (0: binary me_ctx, 1: binary mv, 2: i32 x_mb, 3: i32 y_mb),
	i64 ff_me_search_tss (0: binary me_ctx, 1: binary mv, 2: i32 x_mb, 3: i32 y_mb),
	i64 ff_me_search_umh (0: binary me_ctx, 1: binary mv, 2: i32 x_mb, 3: i32 y_mb),
	void ff_me_init_context (0: binary me_ctx, 1: i32 height, 2: i32 mb_size, 3: i32 search_param, 4: i32 width, 5: i32 x_max, 6: i32 x_min, 7: i32 y_max, 8: i32 y_min),
	i32 ff_opencl_filter_config_input (0: binary inlink),
	i32 ff_opencl_filter_config_output (0: binary outlink),
	i32 ff_opencl_filter_init (0: binary avctx),
	i32 ff_opencl_filter_load_program_from_file (0: binary avctx, 1: binary filename),
	i32 ff_opencl_filter_load_program (0: binary avctx, 1: binary program_source_array, 2: i32 nb_strings),
	i32 ff_opencl_filter_query_formats (0: binary avctx),
	i32 ff_opencl_filter_work_size_from_image (0: binary avctx, 1: binary frame, 2: i32 block_alignment, 3: i32 plane, 4: binary work_size),
	void ff_opencl_filter_uninit (0: binary avctx),
	i32 ff_graph_thread_init (0: binary graph),
	void ff_graph_thread_free (0: binary graph),
	i32 ff_qsvvpp_create (0: binary avctx, 1: binary vpp, 2: binary param),
	i32 ff_qsvvpp_filter_frame (0: binary inlink, 1: binary picref, 2: binary s),
	i32 ff_qsvvpp_free (0: binary vpp),
	i32 ff_scale_eval_dimensions (0: binary inlink, 1: binary outlink, 2: binary h_expr, 3: binary w_expr, 4: binary ret_h, 5: binary ret_w, 6: binary log_ctx),
	ff_scene_sad_fn ff_scene_sad_get_fn (0: i32 depth),
	void ff_scene_sad16_c (),
	void ff_scene_sad_c (),
	string double2int64str (0: string buf, 1: double v),
	i32 main (),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (),
	i32 main (),
	binary INTERPOLATE_METHOD (),
	binary INTERPOLATE_METHOD (),
	binary INTERPOLATE_METHOD (),
	i32 avfilter_transform (0: binary fill, 1: binary interpolate, 2: binary matrix, 3: binary src, 4: i32 dst_stride, 5: i32 height, 6: i32 src_stride, 7: i32 width, 8: binary dst),
	void avfilter_add_matrix (0: binary m1, 1: binary m2, 2: binary result),
	void avfilter_get_matrix (0: binary matrix, 1: double angle, 2: double x_shift, 3: double y_shift, 4: double zoom),
	void avfilter_mul_matrix (0: binary m1, 1: binary result, 2: double scalar),
	void avfilter_sub_matrix (0: binary m1, 1: binary m2, 2: binary result),
	i32 ff_vaapi_vpp_colour_standard (0: binary av_cs),
	i32 ff_vaapi_vpp_config_input (0: binary inlink),
	i32 ff_vaapi_vpp_config_output (0: binary outlink),
	i32 ff_vaapi_vpp_make_param_buffers (0: binary avctx, 1: binary data, 2: i32 count, 3: i32 type, 4: i64 size),
	i32 ff_vaapi_vpp_query_formats (0: binary avctx),
	i32 ff_vaapi_vpp_render_picture (0: binary avctx, 1: binary params, 2: binary output_surface),
	void ff_vaapi_vpp_ctx_init (0: binary avctx),
	void ff_vaapi_vpp_ctx_uninit (0: binary avctx),
	void ff_vaapi_vpp_pipeline_uninit (0: binary avctx),
	void compute_dar (0: binary dar, 1: AVRational sar, 2: i32 h, 3: i32 w),
	void ff_blend_init (0: binary param, 1: i32 depth),
	void blur_power (0: binary src, 1: i32 dst_step, 2: i32 len, 3: i32 pixsize, 4: i32 power, 5: i32 radius, 6: i32 src_step, 7: binary temp, 8: binary dst),
	binary AVFILTER_DEFINE_CLASS (),
	binary AVFILTER_DEFINE_CLASS (),
	binary apply_filter (),
	binary config_input (),
	binary config_output (),
	binary create_filter (),
	binary filter_frame (),
	binary init_src (),
	binary init (),
	binary list_filters (),
	binary query_formats_src (),
	binary query_formats (),
	binary request_frame (),
	binary set_option (),
	binary uninit (),
	i32 normalize_double (0: double d, 1: binary n),
	i32 interpolate (0: binary points, 1: i32 nbits, 2: binary y, 3: binary log_ctx),
	i32 get_avg (0: i32 ref0, 1: i32 ref1, 2: i32 ref2, 3: i32 ref3),
	i32 is_newline (0: i32 c),
	i32 set_param (0: binary pexpr, 1: binary ctx, 2: binary args, 3: binary cmd, 4: binary set_fn),
	double lum (0: double x, 1: double y, 2: i32 plane, 3: binary priv),
	void ff_framerate_init (0: binary s),
	double getpix (0: double x, 1: double y, 2: i32 plane, 3: binary priv),
	void ff_gradfun_blur_line_c (0: binary buf1, 1: binary src, 2: i32 src_linesize, 3: i32 width, 4: binary buf, 5: binary dc),
	void ff_gradfun_filter_line_c (0: binary dc, 1: binary dithers, 2: binary src, 3: i32 thresh, 4: i32 width, 5: binary dst),
	i32 ff_hflip_init (0: binary s, 1: binary step, 2: i32 nb_planes),
	void compute_sin_and_cos (0: binary hue),
	void create_chrominance_lut (0: binary h, 1: binary c, 2: binary s),
	void create_luma_lut (0: binary h),
	i32 ff_idet_filter_line_c_16bit (0: binary a, 1: binary b, 2: binary c, 3: i32 w),
	i32 ff_idet_filter_line_c (0: binary a, 1: binary b, 2: binary c, 3: i32 w),
	binary interp_nearest (0: binary lut3d, 1: binary s),
	binary interp_tetrahedral (0: binary lut3d, 1: binary s),
	binary interp_trilinear (0: binary lut3d, 1: binary s),
	binary lerp (0: binary v0, 1: binary v1, 2: double f),
	double interp_1d_cosine (0: binary lut1d, 1: binary s, 2: i32 idx),
	double interp_1d_cubic (0: binary lut1d, 1: binary s, 2: i32 idx),
	double interp_1d_linear (0: binary lut1d, 1: binary s, 2: i32 idx),
	double interp_1d_nearest (0: binary lut1d, 1: binary s, 2: i32 idx),
	double interp_1d_spline (0: binary lut1d, 1: binary s, 2: i32 idx),
	double lerpf (0: double f, 1: double v0, 2: double v1),
	void compute_unsafe_ssd_integral_image (0: binary src, 1: i32 h, 2: i32 offx, 3: i32 offy, 4: i32 r, 5: i32 sh, 6: i32 startx, 7: i32 starty, 8: i32 sw, 9: i32 w, 10: binary dst_linesize_32, 11: binary linesize, 12: binary dst),
	void ff_nlmeans_init (0: binary dsp),
	void ff_line_noise_avg_c (0: binary shift, 1: binary src, 2: i32 len, 3: binary dst),
	void ff_line_noise_c (0: binary noise, 1: binary src, 2: i32 len, 3: i32 shift, 4: binary dst),
	i32 normalize_xy (0: double d, 1: i32 chroma_sub),
	void alpha_composite (0: binary dst, 1: binary src, 2: i32 dst_h, 3: i32 dst_w, 4: i32 jobnr, 5: i32 nb_jobs, 6: i32 src_h, 7: i32 src_w, 8: i32 x, 9: i32 y),
	void compose2D (0: binary src_h, 1: binary src_l, 2: binary dst, 3: i32 h, 4: i32 step, 5: i32 w, 6: i32 xlinesize, 7: i32 ylinesize),
	void compose (0: binary src_h, 1: binary src_l, 2: binary dst, 3: i32 linesize, 4: i32 w),
	void decompose2D (0: binary src, 1: binary dst_h, 2: binary dst_l, 3: i32 h, 4: i32 step, 5: i32 w, 6: i32 xlinesize, 7: i32 ylinesize),
	void decompose (0: binary src, 1: binary dst_h, 2: binary dst_l, 3: i32 linesize, 4: i32 w),
	binary color_hash (0: i32 color),
	double get_coeff (0: double d),
	void dctA_c (0: binary dst, 1: i32 stride, 2: binary src),
	double get_psnr (0: double mse, 1: i32 max, 2: i64 nb_frames),
	binary pow_2 (0: binary base),
	void compute_images_mse (0: binary s, 1: binary main_linesizes, 2: binary ref_linesizes, 3: binary main_data, 4: binary ref_data, 5: binary mse, 6: i32 h, 7: i32 w),
	byte get_pit_avg3 (0: i32 i, 1: binary line),
	binary Subsample_Bilinear_uchar2 (),
	binary Subsample_Bilinear_uchar4 (),
	binary Subsample_Bilinear_uchar (),
	binary Subsample_Bilinear_ushort2 (),
	binary Subsample_Bilinear_ushort4 (),
	binary Subsample_Bilinear_ushort (),
	i32 comp_adjust (0: double adjust, 1: double k, 2: double value, 3: i32 correction_method, 4: i32 scale),
	void add_block (0: binary block, 1: i32 linesize, 2: binary dst),
	byte ana_convert (0: binary coeff, 1: binary left, 2: binary right),
	void ff_threshold_init (0: binary s),
	binary Thumbnail_uchar2 (),
	binary Thumbnail_uchar (),
	binary Thumbnail_ushort2 (),
	binary Thumbnail_ushort (),
	void copy_picture_field (0: binary format, 1: binary tinterlace, 2: binary src, 3: binary dst_linesize, 4: binary src_linesize, 5: i32 dst_field, 6: i32 flags, 7: i32 interleave, 8: i32 src_field, 9: i32 src_h, 10: i32 w, 11: binary dst),
	void transpose_block_16_c (0: i32 h, 1: i32 w, 2: binary dst_linesize, 3: binary src_linesize, 4: binary dst, 5: binary src),
	void transpose_block_24_c (0: i32 h, 1: i32 w, 2: binary dst_linesize, 3: binary src_linesize, 4: binary dst, 5: binary src),
	void transpose_block_32_c (0: i32 h, 1: i32 w, 2: binary dst_linesize, 3: binary src_linesize, 4: binary dst, 5: binary src),
	void transpose_block_48_c (0: i32 h, 1: i32 w, 2: binary dst_linesize, 3: binary src_linesize, 4: binary dst, 5: binary src),
	void transpose_block_64_c (0: i32 h, 1: i32 w, 2: binary dst_linesize, 3: binary src_linesize, 4: binary dst, 5: binary src),
	void transpose_block_8_c (0: i32 h, 1: i32 w, 2: binary dst_linesize, 3: binary src_linesize, 4: binary dst, 5: binary src),
	void copyh (0: binary p1, 1: binary length, 2: binary stride2, 3: binary p2),
	void copyv (0: binary p1, 1: binary length, 2: binary stride1, 3: binary p2),
	void copy (0: binary p1, 1: binary length, 2: binary p2),
	double lerpf (0: double f, 1: double v0, 2: double v1),
	double get_dither_value (0: binary s),
	double ff_vmafmotion_process (0: binary ref, 1: binary s),
	double ff_vmafmotion_uninit (0: binary s),
	i32 ff_vmafmotion_init (0: binary fmt, 1: binary s, 2: i32 h, 3: i32 w),
	binary max3 (),
	binary min3 (),
	binary spatial_predictor (),
	binary temporal_predictor (),
	binary yadif_double (),
	binary yadif_single (),
	binary yadif_uchar2 (),
	binary yadif_uchar (),
	binary yadif_ushort2 (),
	binary yadif_ushort (),
	binary ff_default_get_video_buffer (0: binary link, 1: i32 h, 2: i32 w),
	binary ff_get_video_buffer (0: binary link, 1: i32 h, 2: i32 w),
	binary ff_null_get_video_buffer (0: binary link, 1: i32 h, 2: i32 w),
	binary ff_av2vs_pixfmt (0: binary pf, 1: binary ctx),
	void ff_vs_init (),
	void generate_window_func (0: binary lut, 1: binary overlap, 2: i32 N, 3: i32 win_func),
	binary ff_afir_init_x86 (0: binary s),
	binary ff_anlmdn_init_x86 (0: binary s),
	binary ff_volume_init_x86 (0: binary vol),
	binary ff_showcqt_init_x86 (0: binary s),
	void ff_colorspacedsp_x86_init (0: binary dsp),
	ff_scene_sad_fn ff_scene_sad_get_fn_x86 (0: i32 depth),
	binary BLEND_FUNC (),
	binary ff_bwdif_init_x86 (0: binary bwdif),
	binary ff_eq_init_x86 (0: binary eq),
	void ff_framerate_init_x86 (0: binary s),
	binary ff_fspp_init_x86 (0: binary s),
	binary ff_gradfun_init_x86 (0: binary gf),
	binary ff_hflip_init_x86 (0: binary s, 1: binary step, 2: i32 nb_planes),
	binary ff_hqdn3d_init_x86 (0: binary hqdn3d),
	void ff_limiter_init_x86 (0: binary dsp, 1: i32 bpp),
	binary ff_maskedmerge_init_x86 (0: binary s),
	binary ff_noise_init_x86 (0: binary n),
	binary ff_overlay_init_x86 (0: binary s, 1: i32 alpha_format, 2: i32 format, 3: i32 main_has_alpha, 4: i32 pix_format),
	binary ff_pp7_init_x86 (0: binary p),
	void ff_psnr_init_x86 (0: binary dsp, 1: i32 bpp),
	binary ff_pullup_init_x86 (0: binary s),
	binary ff_removegrain_init_x86 (0: binary rg),
	binary ff_spp_init_x86 (0: binary s),
	void ff_ssim_init_x86 (0: binary dsp),
	void ff_stereo3d_init_x86 (0: binary dsp),
	binary ff_tinterlace_init_x86 (0: binary s),
	binary ff_w3fdif_init_x86 (0: binary dsp, 1: i32 depth),
	binary ff_yadif_init_x86 (0: binary yadif),
	i32 ff_yadif_filter_frame (0: binary link, 1: binary frame),
	i32 ff_yadif_request_frame (0: binary link),
	binary av_iformat_next (0: binary f),
	binary av_oformat_next (0: binary f),
	binary avpriv_register_devices (0: binary i, 1: binary o),
	binary av_demuxer_iterate (0: binary opaque),
	binary av_muxer_iterate (0: binary opaque),
	void av_register_all (),
	void av_register_input_format (0: binary format),
	void av_register_output_format (0: binary format),
	i64 ff_ape_parse_tag (0: binary s),
	i32 ff_ape_write_tag (0: binary s),
	void ff_asfcrypt_dec (0: binary key, 1: i32 len, 2: binary data),
	i32 ff_audio_interleave_init (0: binary s, 1: AVRational time_base, 2: binary samples_per_frame),
	i32 ff_audio_rechunk_interleave (0: binary s, 1: binary out, 2: binary pkt, 3: binary compare_ts, 4: binary get_packet, 5: i32 flush),
	void ff_audio_interleave_close (0: binary s),
	i32 ff_av1_filter_obus_buf (0: binary buf, 1: binary size, 2: binary out),
	i32 ff_av1_filter_obus (0: binary pb, 1: binary buf, 2: i32 size),
	i32 ff_isom_write_av1c (0: binary pb, 1: binary buf, 2: i32 size),
	void uvlc (0: binary gb),
	binary ff_avc_find_startcode (0: binary end, 1: binary p),
	binary ff_avc_mp4_find_startcode (0: binary end, 1: binary start, 2: i32 nal_length_size),
	i32 ff_avc_parse_nal_units_buf (0: binary buf_in, 1: binary size, 2: binary buf),
	i32 ff_avc_parse_nal_units (0: binary pb, 1: binary buf_in, 2: i32 size),
	i32 ff_avc_write_annexb_extradata (0: binary in, 1: binary size, 2: binary buf),
	i32 ff_isom_write_avcc (0: binary pb, 1: binary data, 2: i32 len),
	i32 get_duration (0: binary ast, 1: i32 len),
	binary avi_get_ientry (0: binary idx, 1: i32 ent_id),
	binary avio_find_protocol_name (0: binary url),
	i64 ffurl_seek (0: binary h, 1: i64 pos, 2: i32 whence),
	i64 ffurl_size (0: binary h),
	i32 avio_check (0: binary url, 1: i32 flags),
	i32 avio_close_dir (0: binary s),
	i32 avio_open_dir (0: binary options, 1: binary s, 2: binary url),
	i32 avio_read_dir (0: binary s, 1: binary next),
	i32 avpriv_io_delete (0: binary url),
	i32 avpriv_io_move (0: binary url_dst, 1: binary url_src),
	i32 ff_check_interrupt (0: binary cb),
	i32 ffurl_accept (0: binary c, 1: binary s),
	i32 ffurl_alloc (0: binary puc, 1: binary int_cb, 2: binary filename, 3: i32 flags),
	i32 ffurl_closep (0: binary hh),
	i32 ffurl_close (0: binary h),
	i32 ffurl_connect (0: binary options, 1: binary uc),
	i32 ffurl_get_file_handle (0: binary h),
	i32 ffurl_get_multi_file_handle (0: binary h, 1: binary handles, 2: binary numhandles),
	i32 ffurl_get_short_seek (0: binary h),
	i32 ffurl_handshake (0: binary c),
	i32 ffurl_open_whitelist (0: binary options, 1: binary puc, 2: binary parent, 3: binary int_cb, 4: binary blacklist, 5: binary filename, 6: binary whitelist, 7: i32 flags),
	i32 ffurl_open (0: binary options, 1: binary puc, 2: binary int_cb, 3: binary filename, 4: i32 flags),
	i32 ffurl_read_complete (0: binary h, 1: i32 size, 2: binary buf),
	i32 ffurl_read (0: binary h, 1: i32 size, 2: binary buf),
	i32 ffurl_shutdown (0: binary h, 1: i32 flags),
	i32 ffurl_write (0: binary h, 1: binary buf, 2: i32 size),
	i32 retry_transfer_wrapper (0: binary h, 1: binary transfer_func, 2: i32 size_min, 3: i32 size, 4: binary buf),
	void avio_free_directory_entry (0: binary entry),
	binary avio_tell (0: binary s),
	binary ffio_wfourcc (0: binary pb, 1: binary s),
	binary GET_STR16 (),
	binary avio_alloc_context (0: binary read_packet, 1: binary write_packet, 2: binary seek, 3: i32 buffer_size, 4: i32 write_flag, 5: binary buffer, 6: binary opaque),
	binary ffio_geturlcontext (0: binary s),
	i64 avio_seek_time (0: binary s, 1: i64 timestamp, 2: i32 flags, 3: i32 stream_index),
	i64 avio_seek (0: binary s, 1: i64 offset, 2: i32 whence),
	i64 avio_size (0: binary s),
	i64 avio_skip (0: binary s, 1: i64 offset),
	i64 ff_read_line_to_bprint_overwrite (0: binary bp, 1: binary s),
	i64 ff_read_line_to_bprint (0: binary bp, 1: binary s),
	i32 avio_accept (0: binary c, 1: binary s),
	i32 avio_close_dyn_buf (0: binary s, 1: binary pbuffer),
	i32 avio_closep (0: binary s),
	i32 avio_close (0: binary s),
	i32 avio_feof (0: binary s),
	i32 avio_get_dyn_buf (0: binary s, 1: binary pbuffer),
	i32 avio_get_str (0: binary s, 1: string buf, 2: i32 buflen, 3: i32 maxlen),
	i32 avio_handshake (0: binary c),
	i32 avio_open2 (0: binary options, 1: binary s, 2: binary int_cb, 3: binary filename, 4: i32 flags),
	i32 avio_open_dyn_buf (0: binary s),
	i32 avio_open (0: binary s, 1: binary filename, 2: i32 flags),
	i32 avio_pause (0: binary s, 1: i32 pause),
	i32 avio_printf (0: binary s, 1: binary fmt),
	i32 avio_put_str (0: binary s, 1: binary str),
	i32 avio_r8 (0: binary s),
	i32 avio_read_partial (0: binary s, 1: i32 size, 2: binary buf),
	i32 avio_read_to_bprint (0: binary pb, 1: binary h, 2: i64 max_size),
	i32 avio_read (0: binary s, 1: i32 size, 2: binary buf),
	i32 ff_get_chomp_line (0: binary s, 1: string buf, 2: i32 maxlen),
	i32 ff_get_line (0: binary s, 1: string buf, 2: i32 maxlen),
	i32 ffio_close_null_buf (0: binary s),
	i32 ffio_ensure_seekback (0: binary s, 1: i64 buf_size),
	i32 ffio_fdopen (0: binary s, 1: binary h),
	i32 ffio_init_context (0: binary s, 1: binary read_packet, 2: binary write_packet, 3: binary seek, 4: i32 buffer_size, 5: i32 write_flag, 6: binary buffer, 7: binary opaque),
	i32 ffio_open2_wrapper (0: binary s, 1: binary options, 2: binary pb, 3: binary int_cb, 4: binary url, 5: i32 flags),
	i32 ffio_open_dyn_packet_buf (0: binary s, 1: i32 max_packet_size),
	i32 ffio_open_null_buf (0: binary s),
	i32 ffio_open_whitelist (0: binary options, 1: binary s, 2: binary int_cb, 3: binary blacklist, 4: binary filename, 5: binary whitelist, 6: i32 flags),
	i32 ffio_read_indirect (0: binary s, 1: binary data, 2: i32 size, 3: binary buf),
	i32 ffio_read_size (0: binary s, 1: i32 size, 2: binary buf),
	i32 ffio_rewind_with_probe_data (0: binary s, 1: i32 buf_size, 2: binary bufp),
	i32 ffio_set_buf_size (0: binary s, 1: i32 buf_size),
	i32 put_str16 (0: binary s, 1: binary str, 2: binary be),
	i64 avio_rl64 (0: binary s),
	i64 ffio_read_varlen (0: binary bc),
	binary avio_rb16 (0: binary s),
	binary avio_rb24 (0: binary s),
	binary avio_rb32 (0: binary s),
	binary avio_rl16 (0: binary s),
	binary avio_rl24 (0: binary s),
	binary avio_rl32 (0: binary s),
	i32 ff_crc04C11DB7_update (0: binary buf, 1: binary len, 2: i32 checksum),
	i32 ff_crcA001_update (0: binary buf, 1: binary len, 2: i32 checksum),
	i32 ff_crcEDB88320_update (0: binary buf, 1: binary len, 2: i32 checksum),
	i32 ffio_get_checksum (0: binary s),
	void avio_context_free (0: binary ps),
	void avio_flush (0: binary s),
	void avio_w8 (0: binary s, 1: i32 b),
	void avio_wb16 (0: binary s, 1: binary val),
	void avio_wb24 (0: binary s, 1: binary val),
	void avio_wb32 (0: binary s, 1: binary val),
	void avio_wb64 (0: binary s, 1: i64 val),
	void avio_wl16 (0: binary s, 1: binary val),
	void avio_wl24 (0: binary s, 1: binary val),
	void avio_wl32 (0: binary s, 1: binary val),
	void avio_wl64 (0: binary s, 1: i64 val),
	void avio_write_marker (0: binary type, 1: binary s, 2: i64 time),
	void avio_write (0: binary s, 1: binary buf, 2: i32 size),
	void ff_put_v (0: binary bc, 1: i64 val),
	void ffio_fill (0: binary s, 1: i32 b, 2: i32 count),
	void ffio_free_dyn_buf (0: binary s),
	void ffio_init_checksum (0: binary s, 1: binary update_checksum, 2: i32 checksum),
	binary av_convert_lang_to (0: binary target_codespace, 1: binary lang),
	binary ff_convert_lang_to (0: binary target_codespace, 1: binary lang),
	binary ff_brktimegm (0: binary tm, 1: binary secs),
	void ff_dash_fill_tmpl_params (0: string dst, 1: binary template, 2: i64 time, 3: i32 bit_rate, 4: i32 number, 5: i32 rep_id, 6: i64 buffer_size),
	SegmentType select_segment_type (0: binary codec_id, 1: SegmentType segment_type),
	void dashenc_delete_media_segments (0: binary s, 1: binary os, 2: i32 remove_count),
	void av_dump_format (0: binary ic, 1: binary url, 2: i32 index, 3: i32 is_output),
	void av_hex_dump_log (0: binary buf, 1: i32 level, 2: i32 size, 3: binary avcl),
	void av_hex_dump (0: binary f, 1: binary buf, 2: i32 size),
	void av_pkt_dump2 (0: binary f, 1: binary pkt, 2: binary st, 3: i32 dump_payload),
	void av_pkt_dump_log2 (0: binary pkt, 1: binary st, 2: i32 dump_payload, 3: i32 level, 4: binary avcl),
	binary avpriv_dv_init_demux (0: binary s),
	i32 avpriv_dv_get_packet (0: binary pkt, 1: binary c),
	i32 avpriv_dv_produce_packet (0: binary pkt, 1: binary c, 2: i64 pos, 3: i32 buf_size, 4: binary buf),
	i16 dv_audio_12to16 (0: i16 sample),
	void ff_dv_offset_reset (0: binary c, 1: i64 frame_offset),
	i32 ff_flac_parse_picture (0: binary s, 1: i32 buf_size, 2: binary buf),
	i32 ff_flac_is_native_layout (0: i64 channel_layout),
	i32 ff_flac_write_header (0: binary pb, 1: i32 extradata_size, 2: i32 last_block, 3: binary extradata),
	binary av_guess_codec (0: binary type, 1: binary fmt, 2: binary filename, 3: binary mime_type, 4: binary short_name),
	binary av_find_input_format (0: binary short_name),
	binary av_probe_input_format2 (0: binary pd, 1: binary score_max, 2: i32 is_opened),
	binary av_probe_input_format3 (0: binary pd, 1: binary score_ret, 2: i32 is_opened),
	binary av_probe_input_format (0: binary pd, 1: i32 is_opened),
	binary av_guess_format (0: binary filename, 1: binary mime_type, 2: binary short_name),
	i32 av_match_ext (0: binary extensions, 1: binary filename),
	i32 av_probe_input_buffer2 (0: binary pb, 1: binary fmt, 2: binary filename, 3: binary max_probe_size, 4: binary offset, 5: binary logctx),
	i32 av_probe_input_buffer (0: binary pb, 1: binary fmt, 2: binary filename, 3: binary max_probe_size, 4: binary offset, 5: binary logctx),
	i32 ff_framehash_write_header (0: binary s),
	i32 ff_hevc_annexb2mp4_buf (0: binary buf_in, 1: binary ps_count, 2: binary size, 3: i32 filter_ps, 4: binary buf_out),
	i32 ff_hevc_annexb2mp4 (0: binary pb, 1: binary buf_in, 2: binary ps_count, 3: i32 filter_ps, 4: i32 size),
	i32 ff_isom_write_hvcc (0: binary pb, 1: binary data, 2: i32 ps_array_completeness, 3: i32 size),
	i32 ff_hls_write_file_entry (0: binary out, 1: string baseurl, 2: string filename, 3: binary prog_date_time, 4: double duration, 5: i64 pos, 6: i64 size, 7: i32 byterange_mode, 8: i32 insert_discont, 9: i32 round_duration),
	void ff_hls_write_audio_rendition (0: binary out, 1: string agroup, 2: string filename, 3: string language, 4: i32 is_default, 5: i32 name_id),
	void ff_hls_write_end_list (0: binary out),
	void ff_hls_write_init_file (0: binary out, 1: string filename, 2: i64 pos, 3: i64 size, 4: i32 byterange_mode),
	void ff_hls_write_playlist_header (0: binary out, 1: i64 sequence, 2: i32 allowcache, 3: i32 target_duration, 4: i32 version, 5: i32 playlist_type),
	void ff_hls_write_playlist_version (0: binary out, 1: i32 version),
	void ff_hls_write_stream_info (0: binary out, 1: binary st, 2: string agroup, 3: string ccgroup, 4: string codecs, 5: string filename, 6: i32 bandwidth),
	i32 ff_http_averror (0: i32 default_averror, 1: i32 status_code),
	i32 ff_http_do_new_request (0: binary h, 1: binary uri),
	i32 has_header (0: binary header, 1: binary str),
	void ff_http_init_auth_state (0: binary dest, 1: binary src),
	string ff_http_auth_create_response (0: binary state, 1: binary auth, 2: binary method, 3: binary path),
	void ff_http_auth_handle_header (0: binary state, 1: binary key, 2: binary value),
	void ff_id3v1_read (0: binary s),
	i32 ff_id3v2_match (0: binary magic, 1: binary buf),
	i32 ff_id3v2_parse_apic (0: binary s, 1: binary extra_meta),
	i32 ff_id3v2_parse_chapters (0: binary s, 1: binary extra_meta),
	i32 ff_id3v2_parse_priv_dict (0: binary metadata, 1: binary extra_meta),
	i32 ff_id3v2_parse_priv (0: binary s, 1: binary extra_meta),
	i32 ff_id3v2_tag_len (0: binary buf),
	void ff_id3v2_free_extra_meta (0: binary extra_meta),
	void ff_id3v2_read_dict (0: binary metadata, 1: binary pb, 2: binary extra_meta, 3: binary magic),
	void ff_id3v2_read (0: binary s, 1: binary extra_meta, 2: binary magic, 3: binary max_search_size),
	i32 ff_id3v2_write_apic (0: binary s, 1: binary pkt, 2: binary id3),
	i32 ff_id3v2_write_metadata (0: binary s, 1: binary id3),
	i32 ff_id3v2_write_simple (0: binary s, 1: binary magic, 2: i32 id3v2_version),
	void ff_id3v2_finish (0: binary pb, 1: binary id3, 2: i32 padding_bytes),
	void ff_id3v2_start (0: binary pb, 1: binary id3, 2: binary magic, 3: i32 id3v2_version),
	binary ff_guess_image2_codec (0: binary filename),
	i32 ff_img_read_header (0: binary s1),
	i32 ff_img_read_packet (0: binary s1, 1: binary pkt),
	i32 pgmx_probe (0: binary p),
	i32 pnm_probe (0: binary p),
	i32 ff_rename (0: binary newpath, 1: binary oldpath, 2: binary logctx),
	binary ff_ip_resolve_host (0: binary hostname, 1: i32 family, 2: i32 flags, 3: i32 port, 4: i32 type, 5: binary log_ctx),
	i32 ff_ip_check_source_lists (0: binary source_addr_ptr, 1: binary s),
	i32 ff_ip_parse_blocks (0: binary filters, 1: binary buf, 2: binary log_ctx),
	i32 ff_ip_parse_sources (0: binary filters, 1: binary buf, 2: binary log_ctx),
	void ff_ip_reset_filters (0: binary filters),
	binary avformat_get_mov_audio_tags (),
	binary avformat_get_mov_video_tags (),
	i32 ff_mov_iso639_to_lang (0: binary lang, 1: i32 mp4),
	i32 ff_mov_lang_to_iso639 (0: binary to, 1: binary code),
	i32 ff_mp4_read_dec_config_descr (0: binary fc, 1: binary pb, 2: binary st),
	i32 ff_mp4_read_descr_len (0: binary pb),
	i32 ff_mp4_read_descr (0: binary fc, 1: binary pb, 2: binary tag),
	void ff_mov_write_chan (0: binary pb, 1: i64 channel_layout),
	void ff_mp4_parse_es_descr (0: binary pb, 1: binary es_id),
	binary ff_mov_get_lpcm_codec_id (0: i32 bps, 1: i32 flags),
	i32 ff_mkv_stereo3d_conv (0: binary st, 1: MatroskaVideoStereoModeType stereo_mode),
	void ff_metadata_conv_ctx (0: binary ctx, 1: binary d_conv, 2: binary s_conv),
	void ff_metadata_conv (0: binary pm, 1: binary d_conv, 2: binary s_conv),
	i32 ff_mms_asf_header_parser (0: binary mms),
	i32 ff_mms_read_data (0: binary mms, 1: binary size, 2: binary buf),
	i32 ff_mms_read_header (0: binary mms, 1: binary size, 2: binary buf),
	i64 mov_get_stsc_samples (0: binary sc, 1: binary index),
	i32 ff_mov_read_stsd_entries (0: binary pb, 1: binary c, 2: i32 entries),
	i32 mov_stsc_index_valid (0: binary count, 1: binary index),
	i32 ff_mov_read_chan (0: binary s, 1: binary pb, 2: binary st, 3: i64 size),
	i32 ff_mov_get_channel_layout_tag (0: binary codec_id, 1: binary bitmap, 2: i64 channel_layout),
	i64 ff_mov_get_channel_layout (0: i32 bitmap, 1: i32 tag),
	i32 ff_mov_read_esds (0: binary fc, 1: binary pb),
	i32 ff_mov_write_packet (0: binary s, 1: binary pkt),
	i32 ff_mov_cenc_avc_parse_nal_units (0: binary pb, 1: binary ctx, 2: binary buf_in, 3: i32 size),
	i32 ff_mov_cenc_avc_write_nal_units (0: binary s, 1: binary pb, 2: binary ctx, 3: binary buf_in, 4: i32 nal_length_size, 5: i32 size),
	i32 ff_mov_cenc_init (0: binary ctx, 1: i32 bitexact, 2: i32 use_subsamples, 3: binary encryption_key),
	i32 ff_mov_cenc_write_packet (0: binary pb, 1: binary ctx, 2: binary buf_in, 3: i32 size),
	i32 ff_mov_cenc_write_sinf_tag (0: binary pb, 1: binary track, 2: binary kid),
	void ff_mov_cenc_free (0: binary ctx),
	void ff_mov_cenc_write_stbl_atoms (0: binary pb, 1: binary ctx),
	i32 ff_mov_add_hinted_packet (0: binary s, 1: binary pkt, 2: i32 sample_size, 3: i32 sample, 4: i32 track_index, 5: binary sample_data),
	i32 ff_mov_init_hinting (0: binary s, 1: i32 index, 2: i32 src_index),
	void ff_mov_close_hinting (0: binary track),
	i64 bs_get_v (0: binary bs),
	i64 gb_get_v (0: binary gb),
	i64 ff_parse_pes_pts (0: binary buf),
	void put_timestamp (0: binary pb, 1: i64 timestamp, 2: i32 id),
	binary avpriv_mpegts_parse_open (0: binary s),
	i32 avpriv_mpegts_parse_packet (0: binary pkt, 1: binary ts, 2: binary buf, 3: i32 len),
	i32 ff_parse_mpeg2_descriptor (0: binary fc, 1: binary st, 2: binary mp4_descr, 3: binary ts, 4: binary pp, 5: binary desc_list_end, 6: i32 mp4_descr_count, 7: i32 pid, 8: i32 stream_type),
	i32 get16 (0: binary pp, 1: binary p_end),
	i32 get8 (0: binary pp, 1: binary p_end),
	void avpriv_mpegts_parse_close (0: binary ts),
	i32 ff_check_h264_startcode (0: binary s, 1: binary pkt, 2: binary st),
	void put16 (0: i32 val, 1: binary q_ptr),
	binary ff_choose_chroma_location (0: binary s, 1: binary st),
	AVRational ff_choose_timebase (0: binary s, 1: binary st, 2: i32 min_precision),
	i32 av_get_output_timestamp (0: binary s, 1: binary dts, 2: binary wall, 3: i32 stream),
	i32 av_interleaved_write_frame (0: binary s, 1: binary pkt),
	i32 av_interleaved_write_uncoded_frame (0: binary s, 1: binary frame, 2: i32 stream_index),
	i32 av_write_frame (0: binary s, 1: binary pkt),
	i32 av_write_trailer (0: binary s),
	i32 av_write_uncoded_frame_query (0: binary s, 1: i32 stream_index),
	i32 av_write_uncoded_frame (0: binary s, 1: binary frame, 2: i32 stream_index),
	i32 avformat_alloc_output_context2 (0: binary avctx, 1: binary oformat, 2: binary filename, 3: binary format),
	i32 avformat_init_output (0: binary options, 1: binary s),
	i32 avformat_write_header (0: binary options, 1: binary s),
	i32 ff_interleave_add_packet (0: binary s, 1: binary pkt, 2: binary compare),
	i32 ff_interleave_packet_per_dts (0: binary s, 1: binary out, 2: binary pkt, 3: i32 flush),
	i32 ff_interleaved_peek (0: binary s, 1: binary pkt, 2: i32 add_offset, 3: i32 stream),
	i32 ff_write_chained (0: binary dst, 1: binary src, 2: binary pkt, 3: i32 dst_stream, 4: i32 interleave),
	binary ff_mxf_get_samples_per_frame (0: binary s, 1: AVRational time_base),
	i32 ff_mxf_decode_pixel_layout (0: binary pix_fmt, 1: binary pixel_layout),
	i32 ff_mxf_get_content_package_rate (0: AVRational time_base),
	i32 mxf_read_utf16_string (0: binary pb, 1: binary str, 2: i32 be, 3: i32 size),
	i32 ff_accept (0: binary h, 1: i32 fd, 2: i32 timeout),
	i32 ff_connect_parallel (0: binary addrs, 1: binary h, 2: binary fd, 3: i32 parallel, 4: i32 timeout_ms_per_address, 5: binary customize_fd, 6: binary customize_ctx),
	i32 ff_http_match_no_proxy (0: binary hostname, 1: binary no_proxy),
	i32 ff_is_multicast_address (0: binary addr),
	i32 ff_listen_bind (0: binary h, 1: binary addr, 2: i32 fd, 3: i32 timeout, 4: socklen_t addrlen),
	i32 ff_listen_connect (0: binary h, 1: binary addr, 2: i32 fd, 3: i32 timeout, 4: i32 will_try_next, 5: socklen_t addrlen),
	i32 ff_listen (0: binary addr, 1: i32 fd, 2: socklen_t addrlen),
	i32 ff_neterrno (),
	i32 ff_network_init (),
	i32 ff_network_sleep_interruptible (0: binary int_cb, 1: i64 timeout),
	i32 ff_network_wait_fd_timeout (0: binary int_cb, 1: i64 timeout, 2: i32 fd, 3: i32 write),
	i32 ff_network_wait_fd (0: i32 fd, 1: i32 write),
	i32 ff_socket (0: i32 af, 1: i32 proto, 2: i32 type),
	i32 ff_tls_init (),
	void ff_log_net_error (0: binary prefix, 1: i32 level, 2: binary ctx),
	void ff_network_close (),
	void ff_tls_deinit (),
	i64 ff_lsb2full (0: binary stream, 1: i64 lsb),
	i32 ff_nut_add_sp (0: binary nut, 1: i64 back_ptr, 2: i64 pos, 3: i64 ts),
	i32 ff_nut_sp_pos_cmp (0: binary a, 1: binary b),
	i32 ff_nut_sp_pts_cmp (0: binary a, 1: binary b),
	void ff_nut_free_sp (0: binary nut),
	void ff_nut_reset_ts (0: AVRational time_base, 1: binary nut, 2: i64 val),
	i32 ogg_find_stream (0: binary ogg, 1: i32 serial),
	i64 ogg_gptopts (0: binary s, 1: binary dts, 2: i32 i, 3: i64 gp),
	i32 daala_match_pix_fmt (0: binary fmt),
	i32 ff_vorbis_comment (0: binary m, 1: binary as, 2: binary buf, 3: i32 parse_picture, 4: i32 size),
	i32 ff_vorbis_stream_comment (0: binary as, 1: binary st, 2: binary buf, 3: i32 size),
	binary av_fmt_ctx_get_duration_estimation_method (0: binary ctx),
	binary avformat_alloc_context (),
	binary avformat_get_class (),
	binary ff_gai_strerror (0: i32 ecode),
	i32 ff_getaddrinfo (0: binary res, 1: binary node, 2: binary service, 3: binary hints),
	i32 ff_getnameinfo (0: string host, 1: string serv, 2: binary sa, 3: i32 flags, 4: i32 hostlen, 5: i32 salen, 6: i32 servlen),
	i32 ff_poll (0: binary fds, 1: i32 timeout, 2: nfds_t numfds),
	i32 ff_socket_nonblock (0: i32 enable, 1: i32 socket),
	void ff_freeaddrinfo (0: binary res),
	binary DEF_FS_FUNCTION (),
	i32 is_dos_path (0: binary path),
	i32 ff_pcm_read_packet (0: binary s, 1: binary pkt),
	i32 ff_pcm_read_seek (0: binary s, 1: i64 timestamp, 2: i32 flags, 3: i32 stream_index),
	binary ff_urlcontext_child_class_next (0: binary prev),
	binary ffurl_get_protocols (0: binary blacklist, 1: binary whitelist),
	binary avio_enum_protocols (0: i32 output, 1: binary opaque),
	i32 ff_get_qtpalette (0: binary pb, 1: i32 codec_id, 2: binary palette),
	i32 ff_raw_audio_read_header (0: binary s),
	i32 ff_raw_data_read_header (0: binary s),
	i32 ff_raw_read_partial_packet (0: binary s, 1: binary pkt),
	i32 ff_raw_subtitle_read_header (0: binary s),
	i32 ff_raw_video_read_header (0: binary s),
	i32 ff_raw_write_packet (0: binary s, 1: binary pkt),
	i32 ff_reshuffle_raw_rgb (0: binary par, 1: binary s, 2: binary ppkt, 3: i32 expected_stride),
	binary ff_rdt_parse_open (0: binary ic, 1: binary handler, 2: i32 first_stream_of_set_idx, 3: binary priv_data),
	i32 ff_rdt_parse_header (0: binary buf, 1: binary pis_keyframe, 2: binary pseq_no, 3: binary pset_id, 4: binary pstream_id, 5: i32 len, 6: binary ptimestamp),
	i32 ff_rdt_parse_packet (0: binary pkt, 1: binary s, 2: i32 len, 3: binary bufptr),
	void ff_rdt_calc_response_and_checksum (0: binary response, 1: binary chksum, 2: binary challenge),
	void ff_rdt_parse_close (0: binary s),
	void ff_rdt_subscribe_rule (0: string cmd, 1: i32 rule_nr, 2: i32 size, 3: i32 stream_nr),
	void ff_real_parse_sdp_a_line (0: binary s, 1: binary line, 2: i32 stream_index),
	i32 ff_replaygain_export_raw (0: binary st, 1: i32 ag, 2: i32 tg, 3: i32 ap, 4: i32 tp),
	i32 ff_replaygain_export (0: binary metadata, 1: binary st),
	binary avformat_get_riff_audio_tags (),
	binary avformat_get_riff_video_tags (),
	binary ff_guidcmp (0: binary g1, 1: binary g2),
	binary ff_codec_guid_get_id (0: binary guids, 1: ff_asf_guid guid),
	binary ff_wav_codec_get_id (0: i32 bps, 1: binary tag),
	i32 ff_get_bmp_header (0: binary pb, 1: binary st, 2: binary size),
	i32 ff_get_guid (0: binary s, 1: binary g),
	i32 ff_get_wav_header (0: binary par, 1: binary s, 2: binary pb, 3: i32 big_endian, 4: i32 size),
	i32 ff_read_riff_info (0: binary s, 1: i64 size),
	binary ff_get_codec_guid (0: binary id, 1: binary av_guid),
	i64 ff_start_tag (0: binary pb, 1: binary tag),
	i32 ff_put_wav_header (0: binary par, 1: binary s, 2: binary pb, 3: i32 flags),
	void ff_end_tag (0: binary pb, 1: i64 start),
	void ff_parse_specific_params (0: binary st, 1: binary au_rate, 2: binary au_scale, 3: binary au_ssize),
	void ff_put_bmp_header (0: binary par, 1: binary pb, 2: i32 for_asf, 3: i32 ignore_extradata),
	void ff_put_guid (0: binary s, 1: binary g),
	void ff_riff_write_info_tag (0: binary pb, 1: binary str, 2: binary tag),
	void ff_riff_write_info (0: binary s),
	binary ff_rm_alloc_rmstream (),
	i32 ff_rm_parse_packet (0: binary s, 1: binary pb, 2: binary pkt, 3: binary st, 4: binary ast, 5: binary seq, 6: i64 timestamp, 7: i32 flags, 8: i32 len),
	i32 ff_rm_read_mdpr_codecdata (0: binary s, 1: binary pb, 2: binary st, 3: binary rst, 4: binary mime, 5: binary codec_data_size),
	i32 ff_rm_retrieve_cache (0: binary s, 1: binary pb, 2: binary pkt, 3: binary st, 4: binary ast),
	void ff_rm_free_rmstream (0: binary rms),
	void get_strl (0: binary pb, 1: string buf, 2: i32 buf_size, 3: i32 len),
	void rm_ac3_swap_bytes (0: binary pkt, 1: binary st),
	void ff_rm_reorder_sipr_data (0: i32 framesize, 1: i32 sub_packet_h, 2: binary buf),
	i32 ff_rtmpe_compute_secret_key (0: binary h, 1: binary clientdata, 2: binary serverdata, 3: i32 type),
	i32 ff_rtmpe_gen_pub_key (0: binary h, 1: binary buf),
	i32 ff_rtmpe_update_keystream (0: binary h),
	void ff_rtmpe_encrypt_sig (0: binary h, 1: binary digest, 2: i32 type, 3: binary sig),
	binary ff_dh_init (0: i32 key_len),
	i32 ff_dh_compute_shared_secret_key (0: binary dh, 1: binary pub_key, 2: i32 pub_key_len, 3: i32 secret_key_len, 4: binary secret_key),
	i32 ff_dh_generate_public_key (0: binary dh),
	i32 ff_dh_write_public_key (0: binary dh, 1: i32 pub_key_len, 2: binary pub_key),
	void ff_dh_free (0: binary dh),
	i32 ff_rtmp_calc_digest_pos (0: binary buf, 1: i32 add_val, 2: i32 mod_val, 3: i32 off),
	i32 ff_rtmp_calc_digest (0: binary key, 1: binary src, 2: i32 gap, 3: i32 keylen, 4: i32 len, 5: binary dst),
	i32 ff_amf_get_field_value (0: binary data_end, 1: binary data, 2: binary name, 3: i32 dst_size, 4: binary dst),
	i32 ff_amf_get_string (0: binary bc, 1: binary length, 2: i32 strsize, 3: binary str),
	i32 ff_amf_match_string (0: binary str, 1: binary data, 2: i32 size),
	i32 ff_amf_read_bool (0: binary bc, 1: binary val),
	i32 ff_amf_read_null (0: binary bc),
	i32 ff_amf_read_number (0: binary bc, 1: binary val),
	i32 ff_amf_read_string (0: binary bc, 1: binary length, 2: i32 strsize, 3: binary str),
	i32 ff_amf_tag_size (0: binary data_end, 1: binary data),
	i32 ff_rtmp_check_alloc_array (0: binary prev_pkt, 1: binary nb_prev_pkt, 2: i32 channel),
	i32 ff_rtmp_packet_create (0: binary pkt, 1: RTMPPacketType type, 2: i32 channel_id, 3: i32 size, 4: i32 timestamp),
	i32 ff_rtmp_packet_read_internal (0: binary prev_pkt, 1: binary p, 2: binary h, 3: binary nb_prev_pkt, 4: i32 chunk_size, 5: byte hdr),
	i32 ff_rtmp_packet_read (0: binary prev_pkt, 1: binary p, 2: binary h, 3: binary nb_prev_pkt, 4: i32 chunk_size),
	i32 ff_rtmp_packet_write (0: binary prev_pkt_ptr, 1: binary pkt, 2: binary h, 3: binary nb_prev_pkt, 4: i32 chunk_size),
	void ff_amf_write_bool (0: i32 val, 1: binary dst),
	void ff_amf_write_field_name (0: binary str, 1: binary dst),
	void ff_amf_write_null (0: binary dst),
	void ff_amf_write_number (0: double val, 1: binary dst),
	void ff_amf_write_object_end (0: binary dst),
	void ff_amf_write_object_start (0: binary dst),
	void ff_amf_write_string2 (0: binary str1, 1: binary str2, 2: binary dst),
	void ff_amf_write_string (0: binary str, 1: binary dst),
	void ff_rtmp_packet_destroy (0: binary pkt),
	void ff_rtmp_packet_dump (0: binary p, 1: binary ctx),
	binary ff_rtp_codec_id (0: binary codec_type, 1: binary buf),
	binary ff_rtp_enc_name (0: i32 payload_type),
	i32 ff_rtp_get_codec_info (0: binary par, 1: i32 payload_type),
	i32 ff_rtp_get_payload_type (0: binary par, 1: binary fmt, 2: i32 idx),
	binary ff_rtp_parse_open (0: binary s1, 1: binary st, 2: i32 payload_type, 3: i32 queue_size),
	binary ff_rtp_handler_find_by_id (0: binary codec_type, 1: i32 id),
	binary ff_rtp_handler_find_by_name (0: binary codec_type, 1: binary name),
	binary ff_rtp_handler_iterate (0: binary opaque),
	i64 ff_rtp_queued_packet_time (0: binary s),
	i32 ff_parse_fmtp (0: binary s, 1: binary stream, 2: binary data, 3: binary p, 4: binary parse_fmtp),
	i32 ff_rtp_check_and_send_back_rr (0: binary avio, 1: binary s, 2: binary fd, 3: i32 count),
	i32 ff_rtp_finalize_packet (0: binary dyn_buf, 1: binary pkt, 2: i32 stream_idx),
	i32 ff_rtp_parse_packet (0: binary pkt, 1: binary s, 2: i32 len, 3: binary bufptr),
	i32 ff_rtp_send_rtcp_feedback (0: binary avio, 1: binary s, 2: binary fd),
	void ff_rtp_parse_close (0: binary s),
	void ff_rtp_parse_set_crypto (0: binary s, 1: binary params, 2: binary suite),
	void ff_rtp_parse_set_dynamic_protocol (0: binary ctx, 1: binary s, 2: binary handler),
	void ff_rtp_reset_packet_queue (0: binary s),
	void ff_rtp_send_punch_packets (0: binary rtp_handle),
	i32 ff_wms_parse_sdp_a_line (0: binary s, 1: binary p),
	i32 ff_h263_handle_packet (0: binary ctx, 1: binary pkt, 2: binary st, 3: binary data, 4: binary buf, 5: i32 flags, 6: i32 len, 7: i16 seq, 8: binary timestamp),
	i32 ff_h264_handle_aggregated_packet (0: binary ctx, 1: binary pkt, 2: binary data, 3: binary buf, 4: binary nal_counters, 5: i32 len, 6: i32 nal_mask, 7: i32 skip_between),
	i32 ff_h264_handle_frag_packet (0: binary pkt, 1: binary buf, 2: binary nal_header, 3: i32 len, 4: i32 nal_header_len, 5: i32 start_bit),
	i32 ff_h264_parse_sprop_parameter_sets (0: binary s, 1: binary value, 2: binary size_ptr, 3: binary data_ptr),
	void ff_h264_parse_framesize (0: binary par, 1: binary p),
	void ff_rtp_send_data (0: binary s1, 1: binary buf1, 2: i32 len, 3: i32 m),
	void ff_rtp_send_aac (0: binary s1, 1: binary buff, 2: i32 size),
	void ff_rtp_send_amr (0: binary s1, 1: binary buff, 2: i32 size),
	i32 ff_rtp_chain_mux_open (0: binary out, 1: binary s, 2: binary st, 3: binary handle, 4: i32 idx, 5: i32 packet_size),
	void ff_rtp_send_h261 (0: binary ctx, 1: binary frame_buf, 2: i32 frame_size),
	binary ff_h263_find_resync_marker_reverse (0: binary end, 1: binary start),
	void ff_rtp_send_h263 (0: binary s1, 1: binary buf1, 2: i32 size),
	void ff_rtp_send_h263_rfc2190 (0: binary s1, 1: binary buf, 2: binary mb_info, 3: i32 mb_info_size, 4: i32 size),
	void ff_rtp_send_h264_hevc (0: binary s1, 1: binary buf1, 2: i32 size),
	void ff_rtp_send_jpeg (0: binary s1, 1: binary buf, 2: i32 size),
	void ff_rtp_send_latm (0: binary s1, 1: binary buff, 2: i32 size),
	void ff_rtp_send_mpegvideo (0: binary s1, 1: binary buf1, 2: i32 size),
	void ff_rtp_send_vc2hq (0: binary ctx, 1: binary frame_buf, 2: i32 frame_size, 3: i32 interlaced),
	void ff_rtp_send_vp8 (0: binary s1, 1: binary buf, 2: i32 size),
	void ff_rtp_send_vp9 (0: binary ctx, 1: binary buf, 2: i32 size),
	void ff_rtp_send_xiph (0: binary s1, 1: binary buff, 2: i32 size),
	i32 ff_rtp_get_local_rtp_port (0: binary h),
	i32 ff_rtp_set_remote_url (0: binary h, 1: binary uri),
	i32 ff_rtsp_connect (0: binary s),
	i32 ff_rtsp_fetch_packet (0: binary s, 1: binary pkt),
	i32 ff_rtsp_make_setup_request (0: binary s, 1: binary host, 2: binary real_challenge, 3: i32 lower_transport, 4: i32 port),
	i32 ff_rtsp_next_attr_and_value (0: string attr, 1: string value, 2: binary p, 3: i32 attr_size, 4: i32 value_size),
	i32 ff_rtsp_open_transport_ctx (0: binary s, 1: binary rtsp_st),
	i32 ff_rtsp_read_reply (0: binary s, 1: binary reply, 2: binary method, 3: i32 return_on_interleaved_data, 4: binary content_ptr),
	i32 ff_rtsp_send_cmd_async (0: binary s, 1: binary headers, 2: binary method, 3: binary url),
	i32 ff_rtsp_send_cmd_with_content (0: binary s, 1: binary reply, 2: binary header, 3: binary method, 4: binary url, 5: binary send_content, 6: i32 send_content_length, 7: binary content_ptr),
	i32 ff_rtsp_send_cmd (0: binary s, 1: binary reply, 2: binary headers, 3: binary method, 4: binary url, 5: binary content_ptr),
	i32 ff_sdp_parse (0: binary s, 1: binary content),
	void ff_rtsp_close_connections (0: binary s),
	void ff_rtsp_close_streams (0: binary s),
	void ff_rtsp_parse_line (0: binary s, 1: binary reply, 2: binary rt, 3: binary buf, 4: binary method),
	void ff_rtsp_skip_packet (0: binary s),
	void ff_rtsp_undo_setup (0: binary s, 1: i32 send_packets),
	i32 ff_rtsp_averror (0: binary status_code, 1: i32 default_averror),
	i32 check_sessionid (0: binary s, 1: binary request),
	i32 ff_rtsp_parse_streaming_commands (0: binary s),
	i32 ff_rtsp_setup_input_streams (0: binary s, 1: binary reply),
	i32 ff_rtsp_tcp_read_packet (0: binary s, 1: binary prtsp_st, 2: i32 buf_size, 3: binary buf),
	i32 parse_command_line (0: binary methodcode, 1: binary s, 2: string method, 3: string uri, 4: binary line, 5: i32 linelen, 6: i32 methodsize, 7: i32 urisize),
	i32 read_line (0: binary s, 1: string rbuf, 2: binary rbufsize, 3: binary rbuflen),
	i32 rtsp_read_request (0: binary s, 1: binary request, 2: binary method),
	i32 ff_rtsp_setup_output_streams (0: binary s, 1: binary addr),
	i32 ff_rtsp_tcp_write_packet (0: binary s, 1: binary rtsp_st),
	i32 ff_sauce_read (0: binary avctx, 1: binary got_width, 2: i32 get_height, 3: binary fsize),
	i32 is_space (0: byte c),
	i32 scale_double (0: double d, 1: double m, 2: binary r, 3: binary log),
	i32 av_sdp_create (0: binary ac, 1: string buf, 2: i32 n_files, 3: i32 size),
	void ff_sdp_write_media (0: binary fmt, 1: binary st, 2: string buff, 3: binary dest_addr, 4: binary dest_type, 5: i32 idx, 6: i32 port, 7: i32 size, 8: i32 ttl),
	void ff_spdif_bswap_buf16 (0: binary src, 1: i32 w, 2: binary dst),
	i32 ff_spdif_probe (0: binary codec, 1: binary p_buf, 2: i32 buf_size),
	i32 ff_spdif_read_packet (0: binary s, 1: binary pkt),
	i32 ff_srtp_decrypt (0: binary s, 1: binary lenptr, 2: binary buf),
	i32 ff_srtp_encrypt (0: binary s, 1: binary in, 2: i32 len, 3: i32 outlen, 4: binary out),
	i32 ff_srtp_set_crypto (0: binary s, 1: binary params, 2: binary suite),
	void ff_srtp_free (0: binary s),
	binary ff_subtitles_queue_insert (0: binary q, 1: binary event, 2: i32 merge, 3: i64 len),
	binary ff_smil_get_attr_ptr (0: binary attr, 1: binary s),
	i64 ff_text_pos (0: binary r),
	i32 ff_smil_extract_next_text_chunk (0: binary buf, 1: binary tr, 2: string c),
	i32 ff_subtitles_queue_read_packet (0: binary pkt, 1: binary q),
	i32 ff_subtitles_queue_seek (0: binary s, 1: binary q, 2: i64 max_ts, 3: i64 min_ts, 4: i64 ts, 5: i32 flags, 6: i32 stream_index),
	i32 ff_text_eof (0: binary r),
	i32 ff_text_peek_r8 (0: binary r),
	i32 ff_text_r8 (0: binary r),
	i32 is_eol (0: byte c),
	binary ff_subtitles_read_line (0: binary tr, 1: string buf, 2: i64 size),
	void ff_subtitles_queue_clean (0: binary q),
	void ff_subtitles_queue_finalize (0: binary q, 1: binary log_ctx),
	void ff_subtitles_read_chunk (0: binary buf, 1: binary pb),
	void ff_subtitles_read_text_chunk (0: binary buf, 1: binary tr),
	void ff_text_init_avio (0: binary pb, 1: binary r, 2: binary s),
	void ff_text_init_buf (0: binary r, 1: i64 size, 2: binary buf),
	void ff_text_read (0: binary r, 1: string buf, 2: i64 size),
	binary ff_subtitles_next_line (0: binary ptr),
	void max_nbits (0: binary nbits_ptr, 1: i32 val),
	i32 parse_slave_failure_policy_option (0: binary tee_slave, 1: binary opt),
	i32 ff_tee_parse_slave_options (0: binary options, 1: binary filename, 2: string slave, 3: binary log),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (),
	i32 main (),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (),
	i32 main (),
	i32 ff_tls_open_underlying (0: binary options, 1: binary c, 2: binary parent, 3: binary uri),
	void ff_gnutls_deinit (),
	void ff_gnutls_init (),
	i32 ff_openssl_init (),
	void ff_openssl_deinit (),
	i32 ff_udp_get_local_port (0: binary h),
	i32 ff_udp_set_remote_url (0: binary h, 1: binary uri),
	binary ff_alloc_dir_entry (),
	i32 ff_url_join (0: string str, 1: binary authorization, 2: binary fmt, 3: binary hostname, 4: binary proto, 5: i32 port, 6: i32 size),
	void ff_make_absolute_url (0: string buf, 1: binary base, 2: binary rel, 3: i32 size),
	string ff_urldecode (0: binary url),
	binary MAKE_ACCESSORS (),
	binary av_codec_get_id (0: binary tags, 1: binary tag),
	binary ff_codec_get_id (0: binary tags, 1: binary tag),
	binary ff_get_pcm_codec_id (0: i32 be, 1: i32 bps, 2: i32 flt, 3: i32 sflags),
	binary av_stream_get_parser (0: binary st),
	binary avpriv_new_chapter (0: binary s, 1: AVRational time_base, 2: binary title, 3: i64 end, 4: i64 start, 5: i32 id),
	binary av_find_program_from_stream (0: binary ic, 1: binary last, 2: i32 s),
	binary av_new_program (0: binary ac, 1: i32 id),
	AVRational av_guess_frame_rate (0: binary format, 1: binary frame, 2: binary st),
	AVRational av_guess_sample_aspect_ratio (0: binary format, 1: binary frame, 2: binary stream),
	AVRational av_stream_get_codec_timebase (0: binary st),
	binary avformat_new_stream (0: binary s, 1: binary c),
	binary av_apply_bitstream_filters (0: binary bsfc, 1: binary codec, 2: binary pkt),
	binary ff_format_output_open (0: binary options, 1: binary s, 2: binary url),
	string ff_data_to_hex (0: string buff, 1: binary src, 2: i32 lowercase, 3: i32 s),
	binary avformat_configuration (),
	binary avformat_license (),
	i64 ff_gen_search (0: binary s, 1: binary read_timestamp, 2: binary ts_ret, 3: i64 pos_limit, 4: i64 pos_max, 5: i64 pos_min, 6: i64 target_ts, 7: i64 ts_max, 8: i64 ts_min, 9: i32 flags, 10: i32 stream_index),
	i32 av_add_index_entry (0: binary st, 1: i64 pos, 2: i64 timestamp, 3: i32 distance, 4: i32 flags, 5: i32 size),
	i32 av_append_packet (0: binary s, 1: binary pkt, 2: i32 size),
	i32 av_codec_get_tag2 (0: binary id, 1: binary tags, 2: binary tag),
	i32 av_demuxer_open (0: binary ic),
	i32 av_filename_number_test (0: binary filename),
	i32 av_find_best_stream (0: binary type, 1: binary decoder_ret, 2: binary ic, 3: i32 flags, 4: i32 related_stream, 5: i32 wanted_stream_nb),
	i32 av_find_default_stream_index (0: binary s),
	i32 av_format_get_probe_score (0: binary s),
	i32 av_get_frame_filename2 (0: string buf, 1: binary path, 2: i32 buf_size, 3: i32 flags, 4: i32 number),
	i32 av_get_frame_filename (0: string buf, 1: binary path, 2: i32 buf_size, 3: i32 number),
	i32 av_get_packet (0: binary s, 1: binary pkt, 2: i32 size),
	i32 av_index_search_timestamp (0: binary st, 1: i64 wanted_timestamp, 2: i32 flags),
	i32 av_read_frame (0: binary s, 1: binary pkt),
	i32 av_read_pause (0: binary s),
	i32 av_read_play (0: binary s),
	i32 av_seek_frame (0: binary s, 1: i64 timestamp, 2: i32 flags, 3: i32 stream_index),
	i32 av_stream_add_side_data (0: binary type, 1: binary st, 2: i64 size, 3: binary data),
	i32 avformat_find_stream_info (0: binary options, 1: binary ic),
	i32 avformat_flush (0: binary s),
	i32 avformat_match_stream_specifier (0: binary s, 1: binary st, 2: binary spec),
	i32 avformat_network_deinit (),
	i32 avformat_network_init (),
	i32 avformat_open_input (0: binary options, 1: binary ps, 2: binary fmt, 3: binary filename),
	i32 avformat_query_codec (0: binary codec_id, 1: binary ofmt, 2: i32 std_compliance),
	i32 avformat_queue_attached_pictures (0: binary s),
	i32 avformat_seek_file (0: binary s, 1: i64 max_ts, 2: i64 min_ts, 3: i64 ts, 4: i32 flags, 5: i32 stream_index),
	i32 avformat_transfer_internal_stream_timing_info (0: binary copy_tb, 1: binary ost, 2: binary ofmt, 3: binary ist),
	i32 ff_add_index_entry (0: binary index_entries, 1: binary nb_index_entries, 2: i64 pos, 3: i64 timestamp, 4: i32 distance, 5: i32 flags, 6: i32 size, 7: binary index_entries_allocated_size),
	i32 ff_add_param_change (0: binary pkt, 1: i32 channels, 2: i32 height, 3: i32 sample_rate, 4: i32 width, 5: i64 channel_layout),
	i32 ff_alloc_extradata (0: binary par, 1: i32 size),
	i32 ff_bprint_to_codecpar_extradata (0: binary buf, 1: binary par),
	i32 ff_copy_whiteblacklists (0: binary dst, 1: binary src),
	i32 ff_find_last_ts (0: binary s, 1: binary read_timestamp, 2: binary pos, 3: binary ts, 4: i32 stream_index),
	i32 ff_find_stream_index (0: binary s, 1: i32 id),
	i32 ff_generate_avci_extradata (0: binary st),
	i32 ff_get_extradata (0: binary par, 1: binary s, 2: binary pb, 3: i32 size),
	i32 ff_get_packet_palette (0: binary s, 1: binary pkt, 2: i32 ret, 3: binary palette),
	i32 ff_hex_to_data (0: binary p, 1: binary data),
	i32 ff_index_search_timestamp (0: binary entries, 1: i64 wanted_timestamp, 2: i32 flags, 3: i32 nb_entries),
	i32 ff_is_http_proto (0: string filename),
	i32 ff_lock_avformat (),
	i32 ff_mkdir_p (0: binary path),
	i32 ff_packet_list_get (0: binary pkt, 1: binary pkt_buffer_end, 2: binary pkt_buffer),
	i32 ff_packet_list_put (0: binary pkt, 1: binary packet_buffer, 2: binary plast_pktl, 3: i32 flags),
	i32 ff_parse_creation_time_metadata (0: binary s, 1: binary timestamp, 2: i32 return_seconds),
	i32 ff_read_packet (0: binary s, 1: binary pkt),
	i32 ff_rfps_add_frame (0: binary ic, 1: binary st, 2: i64 ts),
	i32 ff_seek_frame_binary (0: binary s, 1: i64 target_ts, 2: i32 flags, 3: i32 stream_index),
	i32 ff_standardize_creation_time (0: binary s),
	i32 ff_stream_add_bitstream_filter (0: binary st, 1: binary args, 2: binary name),
	i32 ff_stream_encode_params_copy (0: binary dst, 1: binary src),
	i32 ff_unlock_avformat (),
	i32 ffio_limit (0: binary s, 1: i32 size),
	i64 ff_get_formatted_ntp_time (0: i64 ntp_time_us),
	i64 ff_ntp_time (),
	binary av_stream_get_side_data (0: binary type, 1: binary st, 2: binary size),
	binary av_stream_new_side_data (0: binary type, 1: binary st, 2: i32 size),
	binary av_codec_get_tag (0: binary id, 1: binary tags),
	binary ff_codec_get_tag (0: binary id, 1: binary tags),
	binary avformat_version (),
	void av_format_inject_global_side_data (0: binary s),
	void av_program_add_stream_index (0: binary ac, 1: i32 progid, 2: binary idx),
	void av_url_split (0: string authorization, 1: string hostname, 2: string path, 3: string proto, 4: binary url, 5: binary port_ptr, 6: i32 authorization_size, 7: i32 hostname_size, 8: i32 path_size, 9: i32 proto_size),
	void avformat_close_input (0: binary ps),
	void avformat_free_context (0: binary s),
	void avpriv_set_pts_info (0: binary s, 1: i32 pts_wrap_bits, 2: binary pts_den, 3: binary pts_num),
	void ff_compute_frame_duration (0: binary pc, 1: binary s, 2: binary pkt, 3: binary st, 4: binary pden, 5: binary pnum),
	void ff_configure_buffers_for_index (0: binary s, 1: i64 time_tolerance),
	void ff_format_io_close (0: binary s, 1: binary pb),
	void ff_format_set_url (0: binary s, 1: string url),
	void ff_free_stream (0: binary s, 1: binary st),
	void ff_packet_list_free (0: binary pkt_buf_end, 1: binary pkt_buf),
	void ff_parse_key_value (0: binary str, 1: ff_parse_key_val_cb callback_get_buf, 2: binary context),
	void ff_read_frame_flush (0: binary s),
	void ff_reduce_index (0: binary s, 1: i32 stream_index),
	void ff_rfps_calculate (0: binary ic),
	void ff_update_cur_dts (0: binary s, 1: binary ref_st, 2: i64 timestamp),
	i32 ff_voc_get_packet (0: binary s, 1: binary pkt, 2: binary st, 3: i32 max_size),
	i64 ff_vorbiscomment_length (0: binary chapters, 1: binary m, 2: binary vendor_string, 3: binary nb_chapters),
	i32 ff_vorbiscomment_write (0: binary chapters, 1: binary m, 2: binary vendor_string, 3: binary p, 4: binary nb_chapters),
	i32 ff_isom_get_vpcc_features (0: binary par, 1: binary s, 2: binary frame_rate, 3: binary vpcc),
	i32 ff_isom_write_vpcc (0: binary par, 1: binary s, 2: binary pb),
	i32 wav_parse_bext_string (0: binary s, 1: binary key, 2: i32 length),
	void bwf_write_bext_string (0: binary s, 1: binary key, 2: i32 maxlen),
	i32 ff_wv_parse_header (0: binary wv, 1: binary data),
	binary ff_audio_convert_init_aarch64 (0: binary ac),
	binary wrap (0: binary in_samples),
	binary ff_audio_resample_init_aarch64 (0: binary sample_fmt, 1: binary c),
	binary ff_audio_convert_init_arm (0: binary ac),
	binary wrap (0: binary in_samples),
	binary ff_audio_resample_init_arm (0: binary sample_fmt, 1: binary c),
	binary ff_audio_convert_alloc (0: binary in_fmt, 1: binary out_fmt, 2: binary avr, 3: i32 apply_map, 4: i32 channels, 5: i32 sample_rate),
	i32 ff_audio_convert (0: binary ac, 1: binary in, 2: binary out),
	void ff_audio_convert_free (0: binary ac),
	void ff_audio_convert_set_func (0: binary in_fmt, 1: binary out_fmt, 2: binary ac, 3: binary descr, 4: i32 channels, 5: i32 ptr_align, 6: i32 samples_align, 7: binary conv),
	binary ff_audio_data_alloc (0: binary sample_fmt, 1: binary name, 2: i32 channels, 3: i32 nb_samples),
	i32 ff_audio_data_add_to_fifo (0: binary af, 1: binary a, 2: i32 nb_samples, 3: i32 offset),
	i32 ff_audio_data_combine (0: binary dst, 1: binary src, 2: i32 dst_offset, 3: i32 nb_samples, 4: i32 src_offset),
	i32 ff_audio_data_copy (0: binary dst, 1: binary src, 2: binary map),
	i32 ff_audio_data_init (0: binary sample_fmt, 1: binary a, 2: binary name, 3: i32 channels, 4: i32 nb_samples, 5: i32 plane_size, 6: i32 read_only, 7: binary src),
	i32 ff_audio_data_read_from_fifo (0: binary af, 1: binary a, 2: i32 nb_samples),
	i32 ff_audio_data_realloc (0: binary a, 1: i32 nb_samples),
	i32 ff_audio_data_set_channels (0: binary a, 1: i32 channels),
	i32 ff_sample_fmt_is_planar (0: binary sample_fmt, 1: i32 channels),
	void ff_audio_data_drain (0: binary a, 1: i32 nb_samples),
	void ff_audio_data_free (0: binary a),
	binary ff_audio_mix_alloc (0: binary avr),
	i32 ff_audio_mix_get_matrix (0: binary am, 1: binary matrix, 2: i32 stride),
	i32 ff_audio_mix_set_matrix (0: binary am, 1: binary matrix, 2: i32 stride),
	i32 ff_audio_mix (0: binary src, 1: binary am),
	void ff_audio_mix_free (0: binary am_p),
	void ff_audio_mix_set_func (0: binary coeff_type, 1: binary fmt, 2: binary am, 3: binary descr, 4: i32 in_channels, 5: i32 out_channels, 6: i32 ptr_align, 7: i32 samples_align, 8: binary mix_func),
	i32 avresample_build_matrix (0: binary matrix_encoding, 1: binary matrix_out, 2: double center_mix_level, 3: double lfe_mix_level, 4: double surround_mix_level, 5: i32 normalize, 6: i32 stride, 7: i64 in_layout, 8: i64 out_layout),
	binary ff_dither_alloc (0: binary in_fmt, 1: binary out_fmt, 2: binary avr, 3: i32 apply_map, 4: i32 channels, 5: i32 sample_rate),
	i32 ff_convert_dither (0: binary dst, 1: binary src, 2: binary c),
	void ff_dither_free (0: binary cp),
	binary avresample_alloc_context (),
	binary avresample_get_class (),
	binary ff_audio_resample_init (0: binary avr),
	i32 avresample_get_delay (0: binary avr),
	i32 avresample_set_compensation (0: binary avr, 1: i32 compensation_distance, 2: i32 sample_delta),
	i32 ff_audio_resample (0: binary dst, 1: binary src, 2: binary c),
	void ff_audio_resample_free (0: binary c),
	i32 main (0: binary argv, 1: i32 argc),
	binary avresample_configuration (),
	binary avresample_license (),
	binary avresample_convert (0: binary avr, 1: i32 in_plane_size, 2: i32 in_samples, 3: i32 out_plane_size, 4: i32 out_samples, 5: binary input, 6: binary output),
	i32 available_samples (0: binary out),
	i32 avresample_available (0: binary avr),
	i32 avresample_config (0: binary avr, 1: binary in, 2: binary out),
	i32 avresample_convert_frame (0: binary avr, 1: binary in, 2: binary out),
	i32 avresample_get_matrix (0: binary avr, 1: binary matrix, 2: i32 stride),
	i32 avresample_get_out_samples (0: binary avr, 1: i32 in_nb_samples),
	i32 avresample_is_open (0: binary avr),
	i32 avresample_open (0: binary avr),
	i32 avresample_read (0: binary avr, 1: i32 nb_samples, 2: binary output),
	i32 avresample_set_channel_mapping (0: binary avr, 1: binary channel_map),
	i32 avresample_set_matrix (0: binary avr, 1: binary matrix, 2: i32 stride),
	i32 convert_frame (0: binary avr, 1: binary in, 2: binary out),
	binary avresample_version (),
	void avresample_close (0: binary avr),
	void avresample_free (0: binary avr),
	binary ff_audio_convert_init_x86 (0: binary ac),
	binary ff_audio_mix_init_x86 (0: binary am),
	binary ff_dither_init_x86 (0: binary method, 1: binary ddsp),
	binary wrap (0: binary in_samples),
	binary av_bswap32 (0: i32 x),
	binary av_bswap64 (0: i64 x),
	binary av_bswap16 (0: binary x),
	i32 ff_get_cpu_flags_aarch64 (),
	i64 ff_get_cpu_max_align_aarch64 (),
	binary ff_float_dsp_init_aarch64 (0: binary fdsp),
	i64 read_time (),
	i32 av_adler32_update (0: binary buf, 1: binary len, 2: i32 adler),
	binary av_aes_alloc (),
	i32 av_aes_init (0: binary a, 1: binary key, 2: i32 decrypt, 3: i32 key_bits),
	i32 mix_core (0: i32 a, 1: i32 b, 2: i32 c, 3: i32 d),
	void addkey_d (0: binary round_key, 1: binary src, 2: binary dst),
	void addkey_s (0: binary dst, 1: binary round_key, 2: binary src),
	void addkey (0: binary dst, 1: binary round_key, 2: binary src),
	void aes_crypt (0: binary a, 1: binary sbox, 2: i32 s),
	void av_aes_crypt (0: binary a, 1: binary src, 2: i32 count, 3: i32 decrypt, 4: binary dst, 5: binary iv),
	void mix (0: binary state, 1: i32 s1, 2: i32 s3),
	binary av_aes_ctr_alloc (),
	binary av_aes_ctr_get_iv (0: binary a),
	i32 av_aes_ctr_init (0: binary a, 1: binary key),
	void av_aes_ctr_crypt (0: binary a, 1: binary src, 2: i32 count, 3: binary dst),
	void av_aes_ctr_free (0: binary a),
	void av_aes_ctr_increment_iv (0: binary a),
	void av_aes_ctr_set_full_iv (0: binary a, 1: binary iv),
	void av_aes_ctr_set_iv (0: binary a, 1: binary iv),
	void av_aes_ctr_set_random_iv (0: binary a),
	binary av_bswap32 (0: i32 x),
	binary av_bswap16 (0: binary x),
	i32 ff_get_cpu_flags_arm (),
	i64 ff_get_cpu_max_align_arm (),
	binary ff_float_dsp_init_arm (0: binary fdsp),
	binary ff_float_dsp_init_neon (0: binary fdsp),
	binary ff_float_dsp_init_vfp (0: binary fdsp, 1: i32 cpu_flags),
	binary av_clipl_int32_arm (0: i64 a),
	binary av_clip_int16_arm (0: i32 a),
	binary av_clip_int8_arm (0: i32 a),
	binary av_clip_intp2_arm (0: i32 a, 1: i32 p),
	binary av_clip_uint16_arm (0: i32 a),
	binary av_clip_uint8_arm (0: i32 a),
	binary av_clip_uintp2_arm (0: i32 a, 1: i32 p),
	binary av_sat_add32_arm (0: i32 a, 1: i32 b),
	binary av_sat_dadd32_arm (0: i32 a, 1: i32 b),
	binary av_sat_dsub32_arm (0: i32 a, 1: i32 b),
	binary av_sat_sub32_arm (0: i32 a, 1: i32 b),
	binary AV_RN32 (0: binary p),
	binary AV_RN64 (0: binary p),
	binary AV_RN16 (0: binary p),
	binary AV_WN16 (0: i16 v, 1: binary p),
	binary AV_WN32 (0: i32 v, 1: binary p),
	binary AV_WN64 (0: i64 v, 1: binary p),
	i64 read_time (),
	binary av_audio_fifo_alloc (0: binary sample_fmt, 1: i32 channels, 2: i32 nb_samples),
	i32 av_audio_fifo_drain (0: binary af, 1: i32 nb_samples),
	i32 av_audio_fifo_peek_at (0: binary af, 1: i32 nb_samples, 2: i32 offset, 3: binary data),
	i32 av_audio_fifo_peek (0: binary af, 1: i32 nb_samples, 2: binary data),
	i32 av_audio_fifo_read (0: binary af, 1: i32 nb_samples, 2: binary data),
	i32 av_audio_fifo_realloc (0: binary af, 1: i32 nb_samples),
	i32 av_audio_fifo_size (0: binary af),
	i32 av_audio_fifo_space (0: binary af),
	i32 av_audio_fifo_write (0: binary af, 1: i32 nb_samples, 2: binary data),
	void av_audio_fifo_free (0: binary af),
	void av_audio_fifo_reset (0: binary af),
	binary av_bswap16 (0: i16 x),
	binary av_bswap32 (0: i32 x),
	binary AV_RB16 (0: binary p),
	binary AV_RL16 (0: binary p),
	binary AV_RB24 (0: binary p),
	binary AV_RB32 (0: binary p),
	binary AV_RL24 (0: binary p),
	binary AV_RL32 (0: binary p),
	binary AV_RB64 (0: binary p),
	binary AV_RL64 (0: binary p),
	binary AV_WB32 (0: i32 v, 1: binary p),
	binary AV_WB64 (0: i64 v, 1: binary p),
	binary AV_WL64 (0: i64 v, 1: binary p),
	i32 av_sscanf (0: binary format, 1: binary string),
	string av_append_path_component (0: binary component, 1: binary path),
	string av_asprintf (0: binary fmt),
	string av_d2str (0: double d),
	string av_get_token (0: binary buf, 1: binary term),
	string av_strireplace (0: binary from, 1: binary str, 2: binary to),
	string av_stristr (0: binary s1, 1: binary s2),
	string av_strnstr (0: binary haystack, 1: binary needle, 2: i64 hay_length),
	string av_strtok (0: binary saveptr, 1: string s, 2: binary delim),
	binary av_basename (0: binary path),
	binary av_dirname (0: string path),
	i32 av_escape (0: binary mode, 1: binary dst, 2: binary special_chars, 3: binary src, 4: i32 flags),
	i32 av_match_list (0: byte separator, 1: binary list, 2: binary name),
	i32 av_match_name (0: binary names, 1: binary name),
	i32 av_strcasecmp (0: binary a, 1: binary b),
	i32 av_stristart (0: binary ptr, 1: binary pfx, 2: binary str),
	i32 av_strncasecmp (0: binary a, 1: binary b, 2: i64 n),
	i32 av_strstart (0: binary ptr, 1: binary pfx, 2: binary str),
	i32 av_utf8_decode (0: binary bufp, 1: binary buf_end, 2: binary codep, 3: binary flags),
	i64 av_strlcatf (0: string dst, 1: binary fmt, 2: i64 size),
	i64 av_strlcat (0: string dst, 1: binary src, 2: i64 size),
	i64 av_strlcpy (0: string dst, 1: binary src, 2: i64 size),
	binary av_isdigit (0: i32 c),
	binary av_isgraph (0: i32 c),
	binary av_isspace (0: i32 c),
	binary av_isxdigit (0: i32 c),
	binary av_tolower (0: i32 c),
	binary av_toupper (0: i32 c),
	binary av_strnlen (0: binary s, 1: binary len),
	binary av_x_if_null (0: binary p, 1: binary x),
	string av_base64_encode (0: string out, 1: binary in, 2: i32 in_size, 3: i32 out_size),
	i32 av_base64_decode (0: binary in_str, 1: i32 out_size, 2: binary out),
	binary av_bswap32 (0: i32 x),
	i64 read_time (),
	binary av_blowfish_alloc (),
	binary av_blowfish_init (0: binary ctx, 1: binary key, 2: i32 key_len),
	void av_blowfish_crypt_ecb (0: binary ctx, 1: i32 decrypt, 2: binary xl, 3: binary xr),
	void av_blowfish_crypt (0: binary ctx, 1: binary src, 2: i32 count, 3: i32 decrypt, 4: binary dst, 5: binary iv),
	i32 av_bprint_finalize (0: binary buf, 1: binary ret_str),
	void av_bprint_append_data (0: binary buf, 1: binary data, 2: binary size),
	void av_bprint_chars (0: binary buf, 1: byte c, 2: binary n),
	void av_bprint_clear (0: binary buf),
	void av_bprint_escape (0: binary mode, 1: binary dstbuf, 2: binary special_chars, 3: binary src, 4: i32 flags),
	void av_bprint_get_buffer (0: binary buf, 1: binary actual_size, 2: binary mem, 3: binary size),
	void av_bprint_init_for_buffer (0: binary buf, 1: string buffer, 2: binary size),
	void av_bprint_init (0: binary buf, 1: binary size_init, 2: binary size_max),
	void av_bprint_strftime (0: binary buf, 1: binary fmt, 2: binary tm),
	void av_bprintf (0: binary buf, 1: binary fmt),
	void av_vbprintf (0: binary buf, 1: binary fmt, 2: binary vl_arg),
	i32 av_bprint_is_complete (0: binary buf),
	binary av_bswap16 (0: i16 x),
	binary av_bswap32 (0: i32 x),
	binary av_bswap64 (0: i64 x),
	binary av_buffer_pool_init2 (0: binary alloc, 1: i32 size, 2: binary pool_free, 3: binary opaque),
	binary av_buffer_pool_init (0: binary alloc, 1: i32 size),
	binary av_buffer_allocz (0: i32 size),
	binary av_buffer_alloc (0: i32 size),
	binary av_buffer_create (0: i32 flags, 1: i32 size, 2: binary data, 3: binary free, 4: binary opaque),
	binary av_buffer_pool_get (0: binary pool),
	binary av_buffer_ref (0: binary buf),
	i32 av_buffer_get_ref_count (0: binary buf),
	i32 av_buffer_is_writable (0: binary buf),
	i32 av_buffer_make_writable (0: binary pbuf),
	i32 av_buffer_realloc (0: binary pbuf, 1: i32 size),
	binary av_buffer_get_opaque (0: binary buf),
	void av_buffer_default_free (0: binary data, 1: binary opaque),
	void av_buffer_pool_uninit (0: binary ppool),
	void av_buffer_unref (0: binary buf),
	binary av_camellia_alloc (),
	binary av_camellia_init (0: binary cs, 1: binary key, 2: i32 key_bits),
	void av_camellia_crypt (0: binary cs, 1: binary src, 2: i32 count, 3: i32 decrypt, 4: binary dst, 5: binary iv),
	binary av_cast5_alloc (),
	binary av_cast5_init (0: binary cs, 1: binary key, 2: i32 key_bits),
	void av_cast5_crypt2 (0: binary cs, 1: binary src, 2: i32 count, 3: i32 decrypt, 4: binary dst, 5: binary iv),
	void av_cast5_crypt (0: binary cs, 1: binary src, 2: i32 count, 3: i32 decrypt, 4: binary dst),
	binary av_get_channel_description (0: i64 channel),
	binary av_get_channel_name (0: i64 channel),
	i64 av_get_default_channel_layout (0: i32 nb_channels),
	i32 av_get_channel_layout_channel_index (0: i64 channel_layout, 1: i64 channel),
	i32 av_get_channel_layout_nb_channels (0: i64 channel_layout),
	i32 av_get_extended_channel_layout (0: binary name, 1: binary nb_channels, 2: binary channel_layout),
	i32 av_get_standard_channel_layout (0: binary name, 1: binary layout, 2: binary index),
	i64 av_channel_layout_extract_channel (0: i32 index, 1: i64 channel_layout),
	i64 av_get_channel_layout (0: binary name),
	void av_bprint_channel_layout (0: binary bp, 1: i32 nb_channels, 2: i64 channel_layout),
	void av_get_channel_layout_string (0: string buf, 1: i32 buf_size, 2: i32 nb_channels, 3: i64 channel_layout),
	avpriv_trc_function avpriv_get_trc_function_from_trc (0: binary trc),
	double avpriv_get_gamma_from_trc (0: binary trc),
	i32 C_JPEG_TO_CCIR (0: i32 y),
	binary av_clipd_c (0: double amax, 1: double amin, 2: double a),
	binary av_clipf_c (0: double amax, 1: double amin, 2: double a),
	binary av_clip_int16_c (0: i32 a),
	binary av_clipl_int32_c (0: i64 a),
	binary av_clip64_c (0: i64 amax, 1: i64 amin, 2: i64 a),
	binary av_clip_int8_c (0: i32 a),
	binary av_ceil_log2_c (0: i32 x),
	binary av_clip_c (0: i32 amax, 1: i32 amin, 2: i32 a),
	binary av_clip_intp2_c (0: i32 a, 1: i32 p),
	binary av_parity_c (0: i32 v),
	binary av_popcount64_c (0: i64 x),
	binary av_popcount_c (0: i32 x),
	binary av_clip_uint16_c (0: i32 a),
	binary av_clip_uint8_c (0: i32 a),
	binary av_clip_uintp2_c (0: i32 a, 1: i32 p),
	binary av_mod_uintp2_c (0: binary a, 1: binary p),
	binary av_sat_add32_c (0: i32 a, 1: i32 b),
	binary av_sat_dadd32_c (0: i32 a, 1: i32 b),
	binary av_sat_dsub32_c (0: i32 a, 1: i32 b),
	binary av_sat_sub32_c (0: i32 a, 1: i32 b),
	i32 av_cpu_count (),
	i32 av_get_cpu_flags (),
	i32 av_parse_cpu_caps (0: binary s, 1: binary flags),
	i32 av_parse_cpu_flags (0: binary s),
	i64 av_cpu_max_align (),
	void av_force_cpu_flags (0: i32 arg),
	void av_set_cpu_flags_mask (0: i32 mask),
	binary av_crc_get_table (0: AVCRCId crc_id),
	i32 av_crc (0: binary ctx, 1: binary buffer, 2: i64 length, 3: i32 crc),
	i32 ff_cuda_check (0: binary err, 1: binary func, 2: binary avctx, 3: binary cuGetErrorName_fn, 4: binary cuGetErrorString_fn),
	binary av_des_alloc (),
	i32 av_des_init (0: binary d, 1: binary decrypt, 2: binary key, 3: i32 key_bits),
	void av_des_crypt (0: binary d, 1: binary src, 2: i32 count, 3: i32 decrypt, 4: binary dst, 5: binary iv),
	void av_des_mac (0: binary d, 1: binary src, 2: i32 count, 3: binary dst),
	binary av_dict_get (0: binary m, 1: binary prev, 2: binary key, 3: i32 flags),
	i32 av_dict_copy (0: binary dst, 1: binary src, 2: i32 flags),
	i32 av_dict_count (0: binary m),
	i32 av_dict_get_string (0: binary buffer, 1: binary m, 2: binary key_val_sep, 3: binary pairs_sep),
	i32 av_dict_parse_string (0: binary pm, 1: binary key_val_sep, 2: binary pairs_sep, 3: binary str, 4: i32 flags),
	i32 av_dict_set_int (0: binary pm, 1: binary key, 2: i64 value, 3: i32 flags),
	i32 av_dict_set (0: binary pm, 1: binary key, 2: binary value, 3: i32 flags),
	i32 avpriv_dict_set_timestamp (0: binary dict, 1: binary key, 2: i64 timestamp),
	void av_dict_free (0: binary pm),
	double av_display_rotation_get (0: binary matrix),
	void av_display_matrix_flip (0: binary matrix, 1: i32 hflip, 2: i32 vflip),
	void av_display_rotation_set (0: double angle, 1: binary matrix),
	binary av_downmix_info_update_side_data (0: binary frame),
	binary av_encryption_info_alloc (0: i32 iv_size, 1: i32 key_id_size, 2: i32 subsample_count),
	binary av_encryption_info_clone (0: binary info),
	binary av_encryption_info_get_side_data (0: binary buffer, 1: i64 size),
	binary av_encryption_init_info_alloc (0: i32 data_size, 1: i32 key_id_size, 2: i32 num_key_ids, 3: i32 system_id_size),
	binary av_encryption_init_info_get_side_data (0: binary side_data, 1: i64 side_data_size),
	binary av_encryption_info_add_side_data (0: binary info, 1: binary size),
	binary av_encryption_init_info_add_side_data (0: binary info, 1: binary side_data_size),
	void av_encryption_info_free (0: binary info),
	void av_encryption_init_info_free (0: binary info),
	i32 av_strerror (0: string errbuf, 1: i32 errnum, 2: i64 errbuf_size),
	string av_make_error_string (0: string errbuf, 1: i32 errnum, 2: binary errbuf_size),
	double av_expr_eval (0: binary e, 1: binary const_values, 2: binary opaque),
	double av_strtod (0: binary tail, 1: binary numstr),
	i32 av_expr_parse_and_eval (0: binary const_names, 1: binary func1_names, 2: binary func2_names, 3: binary s, 4: binary const_values, 5: binary funcs1, 6: binary funcs2, 7: binary d, 8: i32 log_offset, 9: binary log_ctx, 10: binary opaque),
	i32 av_expr_parse (0: binary expr, 1: binary const_names, 2: binary func1_names, 3: binary func2_names, 4: binary s, 5: binary funcs1, 6: binary funcs2, 7: i32 log_offset, 8: binary log_ctx),
	void av_expr_free (0: binary e),
	binary ff_exp10 (0: double x),
	binary ff_exp10f (0: double x),
	binary ff_fast_powf (0: double x, 1: double y),
	binary av_fifo_alloc_array (0: i64 nmemb, 1: i64 size),
	binary av_fifo_alloc (0: binary size),
	i32 av_fifo_generic_peek_at (0: binary f, 1: i32 buf_size, 2: i32 offset, 3: binary func, 4: binary dest),
	i32 av_fifo_generic_peek (0: binary f, 1: i32 buf_size, 2: binary func, 3: binary dest),
	i32 av_fifo_generic_read (0: binary f, 1: i32 buf_size, 2: binary func, 3: binary dest),
	i32 av_fifo_generic_write (0: binary f, 1: binary func, 2: i32 size, 3: binary src),
	i32 av_fifo_grow (0: binary f, 1: binary size),
	i32 av_fifo_realloc2 (0: binary f, 1: binary new_size),
	i32 av_fifo_size (0: binary f),
	i32 av_fifo_space (0: binary f),
	void av_fifo_drain (0: binary f, 1: i32 size),
	void av_fifo_freep (0: binary f),
	void av_fifo_free (0: binary f),
	void av_fifo_reset (0: binary f),
	binary av_fifo_peek2 (0: binary f, 1: i32 offs),
	i32 av_file_map (0: binary filename, 1: i32 log_offset, 2: binary size, 3: binary bufptr, 4: binary log_ctx),
	i32 av_tempfile (0: binary filename, 1: binary prefix, 2: i32 log_offset, 3: binary log_ctx),
	void av_file_unmap (0: i64 size, 1: binary bufptr),
	binary av_fopen_utf8 (0: binary mode, 1: binary path),
	i32 avpriv_open (0: binary filename, 1: i32 flags),
	i32 avpriv_tempfile (0: binary filename, 1: binary prefix, 2: i32 log_offset, 3: binary log_ctx),
	binary avpriv_alloc_fixed_dsp (0: i32 bit_exact),
	binary fixed_sqrt (0: i32 bits, 1: i32 x),
	binary avpriv_float_dsp_alloc (0: i32 bit_exact),
	double avpriv_scalarproduct_float_c (0: binary v1, 1: binary v2, 2: i32 len),
	binary av_frame_get_plane_buffer (0: binary frame, 1: i32 plane),
	binary av_frame_alloc (),
	binary av_frame_clone (0: binary src),
	binary av_frame_get_side_data (0: binary type, 1: binary frame),
	binary av_frame_new_side_data_from_buf (0: binary type, 1: binary buf, 2: binary frame),
	binary av_frame_new_side_data (0: binary type, 1: binary frame, 2: i32 size),
	binary av_frame_side_data_name (0: binary type),
	binary av_get_colorspace_name (0: binary val),
	binary av_frame_get_qp_table (0: binary f, 1: binary stride, 2: binary type),
	i32 av_frame_apply_cropping (0: binary frame, 1: i32 flags),
	i32 av_frame_copy_props (0: binary dst, 1: binary src),
	i32 av_frame_copy (0: binary dst, 1: binary src),
	i32 av_frame_get_buffer (0: binary frame, 1: i32 align),
	i32 av_frame_is_writable (0: binary frame),
	i32 av_frame_make_writable (0: binary frame),
	i32 av_frame_ref (0: binary dst, 1: binary src),
	i32 av_frame_set_qp_table (0: binary buf, 1: binary f, 2: i32 qp_type, 3: i32 stride),
	void av_frame_free (0: binary frame),
	void av_frame_move_ref (0: binary dst, 1: binary src),
	void av_frame_remove_side_data (0: binary type, 1: binary frame),
	void av_frame_unref (0: binary frame),
	binary av_hash_get_name (0: binary ctx),
	binary av_hash_names (0: i32 i),
	i32 av_hash_alloc (0: binary ctx, 1: binary name),
	i32 av_hash_get_size (0: binary ctx),
	void av_hash_final_b64 (0: binary ctx, 1: i32 size, 2: binary dst),
	void av_hash_final_bin (0: binary ctx, 1: i32 size, 2: binary dst),
	void av_hash_final_hex (0: binary ctx, 1: i32 size, 2: binary dst),
	void av_hash_final (0: binary ctx, 1: binary dst),
	void av_hash_freep (0: binary ctx),
	void av_hash_init (0: binary ctx),
	void av_hash_update (0: binary ctx, 1: binary src, 2: i32 len),
	binary av_dynamic_hdr_plus_alloc (0: binary size),
	binary av_dynamic_hdr_plus_create_side_data (0: binary frame),
	binary av_hmac_alloc (0: binary type),
	i32 av_hmac_calc (0: binary c, 1: binary data, 2: binary key, 3: binary out, 4: binary keylen, 5: binary len, 6: binary outlen),
	i32 av_hmac_final (0: binary c, 1: binary out, 2: binary outlen),
	void av_hmac_free (0: binary c),
	void av_hmac_init (0: binary c, 1: binary key, 2: binary keylen),
	void av_hmac_update (0: binary c, 1: binary data, 2: binary len),
	binary av_hwdevice_find_type_by_name (0: binary name),
	binary av_hwdevice_iterate_types (0: binary prev),
	binary av_hwdevice_ctx_alloc (0: binary type),
	binary av_hwframe_ctx_alloc (0: binary device_ref_in),
	binary av_hwdevice_get_hwframe_constraints (0: binary ref, 1: binary hwconfig),
	binary av_hwdevice_get_type_name (0: binary type),
	i32 av_hwdevice_ctx_create_derived (0: binary type, 1: binary dst_ref_ptr, 2: binary src_ref, 3: i32 flags),
	i32 av_hwdevice_ctx_create (0: binary type, 1: binary pdevice_ref, 2: binary opts, 3: binary device, 4: i32 flags),
	i32 av_hwdevice_ctx_init (0: binary ref),
	i32 av_hwframe_ctx_create_derived (0: binary format, 1: binary derived_frame_ctx, 2: binary derived_device_ctx, 3: binary source_frame_ctx, 4: i32 flags),
	i32 av_hwframe_ctx_init (0: binary ref),
	i32 av_hwframe_get_buffer (0: binary hwframe_ref, 1: binary frame, 2: i32 flags),
	i32 av_hwframe_map (0: binary dst, 1: binary src, 2: i32 flags),
	i32 av_hwframe_transfer_data (0: binary dst, 1: binary src, 2: i32 flags),
	i32 av_hwframe_transfer_get_formats (0: binary dir, 1: binary formats, 2: binary hwframe_ref, 3: i32 flags),
	i32 ff_hwframe_map_create (0: binary hwframe_ref, 1: binary dst, 2: binary src, 3: binary unmap, 4: binary priv),
	i32 ff_hwframe_map_replace (0: binary dst, 1: binary src),
	binary av_hwdevice_hwconfig_alloc (0: binary ref),
	void av_hwframe_constraints_free (0: binary constraints),
	binary opencl_mem_flags_for_mapping (0: i32 map_flags),
	binary av_map_videotoolbox_format_to_pixfmt (0: i32 cv_fmt),
	i32 av_map_videotoolbox_format_from_pixfmt (0: binary pix_fmt),
	i32 av_image_alloc (0: binary pix_fmt, 1: binary linesizes, 2: i32 align, 3: i32 h, 4: i32 w, 5: binary pointers),
	i32 av_image_check_sar (0: AVRational sar, 1: binary h, 2: binary w),
	i32 av_image_check_size2 (0: binary pix_fmt, 1: i64 max_pixels, 2: i32 log_offset, 3: binary h, 4: binary w, 5: binary log_ctx),
	i32 av_image_check_size (0: i32 log_offset, 1: binary h, 2: binary w, 3: binary log_ctx),
	i32 av_image_copy_to_buffer (0: binary pix_fmt, 1: binary src_linesize, 2: binary src_data, 3: i32 align, 4: i32 dst_size, 5: i32 height, 6: i32 width, 7: binary dst),
	i32 av_image_fill_arrays (0: binary pix_fmt, 1: binary src, 2: binary dst_linesize, 3: i32 align, 4: i32 height, 5: i32 width, 6: binary dst_data),
	i32 av_image_fill_black (0: binary range, 1: binary pix_fmt, 2: binary dst_linesize, 3: i32 height, 4: i32 width, 5: binary dst_data),
	i32 av_image_fill_linesizes (0: binary pix_fmt, 1: binary linesizes, 2: i32 width),
	i32 av_image_fill_pointers (0: binary pix_fmt, 1: binary linesizes, 2: i32 height, 3: binary data, 4: binary ptr),
	i32 av_image_get_buffer_size (0: binary pix_fmt, 1: i32 align, 2: i32 height, 3: i32 width),
	i32 av_image_get_linesize (0: binary pix_fmt, 1: i32 plane, 2: i32 width),
	i32 avpriv_set_systematic_pal2 (0: binary pix_fmt, 1: binary pal),
	i32 image_get_linesize (0: binary desc, 1: i32 max_step_comp, 2: i32 max_step, 3: i32 plane, 4: i32 width),
	void av_image_copy_plane (0: binary src, 1: i32 bytewidth, 2: i32 dst_linesize, 3: i32 height, 4: i32 src_linesize, 5: binary dst),
	void av_image_copy_uc_from (0: binary pix_fmt, 1: binary dst_linesizes, 2: binary src_linesizes, 3: binary src_data, 4: i32 height, 5: i32 width, 6: binary dst_data),
	void av_image_copy (0: binary pix_fmt, 1: binary src_linesizes, 2: binary src_data, 3: binary dst_linesizes, 4: i32 height, 5: i32 width, 6: binary dst_data),
	void av_image_fill_max_pixsteps (0: binary pixdesc, 1: binary max_pixstep_comps, 2: binary max_pixsteps),
	AVInteger av_add_i (0: AVInteger a, 1: AVInteger b),
	AVInteger av_div_i (0: AVInteger a, 1: AVInteger b),
	AVInteger av_int2i (0: i64 a),
	AVInteger av_mod_i (0: binary quot, 1: AVInteger a, 2: AVInteger b),
	AVInteger av_mul_i (0: AVInteger a, 1: AVInteger b),
	AVInteger av_shr_i (0: AVInteger a, 1: i32 s),
	AVInteger av_sub_i (0: AVInteger a, 1: AVInteger b),
	i64 av_i2int (0: AVInteger a),
	i32 av_cmp_i (0: AVInteger a, 1: AVInteger b),
	i32 av_log2_i (0: AVInteger a),
	binary ff_rint64_clip (0: double a, 1: i64 amax, 2: i64 amin),
	binary avpriv_mirror (0: i32 w, 1: i32 x),
	binary av_int2double (0: i64 i),
	binary av_int2float (0: i32 i),
	binary av_float2int (0: double f),
	binary av_double2int (0: double f),
	i32 av_log2_16bit (0: binary v),
	i32 av_log2 (0: binary v),
	binary ff_ctz_c (0: i32 v),
	binary ff_ctzll_c (0: binary v),
	binary ff_log2_16bit_c (0: binary v),
	binary ff_log2_c (0: binary v),
	binary ff_clz_c (0: binary x),
	binary av_lfg_init (0: binary c, 1: binary seed),
	i32 av_lfg_init_from_data (0: binary c, 1: binary data, 2: binary length),
	void av_bmg_get (0: binary lfg, 1: binary out),
	binary av_lfg_get (0: binary c),
	binary av_mlfg_get (0: binary c),
	binary round (0: double x),
	binary trunc (0: double x),
	binary roundf (0: double x),
	binary truncf (0: double x),
	binary avpriv_isfinitef (0: double x),
	binary avpriv_isfinite (0: double x),
	binary avpriv_isinff (0: double x),
	binary avpriv_isinf (0: double x),
	binary avpriv_isnanf (0: double x),
	binary avpriv_isnan (0: double x),
	binary lrintf (0: double x),
	binary lrint (0: double x),
	binary cbrt (0: double x),
	binary copysign (0: double x, 1: double y),
	binary cbrtf (0: double x),
	binary hypot (0: double x, 1: double y),
	double erf (0: double z),
	double ff_eval_poly (0: binary coeff, 1: double x, 2: i32 size),
	double rint (0: double x),
	binary avpriv_init_lls (0: binary m, 1: i32 indep_count),
	void avpriv_solve_lls (0: binary m, 1: double threshold, 2: binary min_order),
	AVClassCategory av_default_get_category (0: binary ptr),
	binary av_default_item_name (0: binary ptr),
	i32 av_log_format_line2 (0: string line, 1: binary fmt, 2: binary print_prefix, 3: i32 level, 4: i32 line_size, 5: binary vl, 6: binary ptr),
	i32 av_log_get_flags (),
	i32 av_log_get_level (),
	void av_log_default_callback (0: binary fmt, 1: i32 level, 2: binary vl, 3: binary ptr),
	void av_log_format_line (0: string line, 1: binary fmt, 2: binary print_prefix, 3: i32 level, 4: i32 line_size, 5: binary vl, 6: binary ptr),
	void av_log_set_callback (0: binary callback),
	void av_log_set_flags (0: i32 arg),
	void av_log_set_level (0: i32 level),
	void av_log (0: binary fmt, 1: i32 level, 2: binary avcl),
	void av_vlog (0: binary fmt, 1: i32 level, 2: binary vl, 3: binary avcl),
	void avpriv_report_missing_feature (0: binary msg, 1: binary avc),
	void avpriv_request_sample (0: binary msg, 1: binary avc),
	i32 av_lzo1x_decode (0: binary in, 1: binary inlen, 2: binary outlen, 3: binary out),
	i32 get_byte (0: binary c),
	i32 get_len (0: binary c, 1: i32 mask, 2: i32 x),
	void copy_backptr (0: binary c, 1: i32 back, 2: i32 cnt),
	void copy (0: binary c, 1: i32 cnt),
	binary av_content_light_metadata_alloc (0: binary size),
	binary av_content_light_metadata_create_side_data (0: binary frame),
	binary av_mastering_display_metadata_alloc (),
	binary av_mastering_display_metadata_create_side_data (0: binary frame),
	i64 av_add_stable (0: AVRational inc_tb, 1: AVRational ts_tb, 2: i64 inc, 3: i64 ts),
	i64 av_compare_mod (0: i64 a, 1: i64 b, 2: i64 mod),
	i64 av_gcd (0: i64 a, 1: i64 b),
	i64 av_rescale_delta (0: AVRational fs_tb, 1: AVRational in_tb, 2: AVRational out_tb, 3: binary last, 4: i64 in_ts, 5: i32 duration),
	i64 av_rescale_q_rnd (0: binary rnd, 1: AVRational bq, 2: AVRational cq, 3: i64 a),
	i64 av_rescale_q (0: AVRational bq, 1: AVRational cq, 2: i64 a),
	i64 av_rescale_rnd (0: binary rnd, 1: i64 a, 2: i64 b, 3: i64 c),
	i64 av_rescale (0: i64 a, 1: i64 b, 2: i64 c),
	i32 av_compare_ts (0: AVRational tb_a, 1: AVRational tb_b, 2: i64 ts_a, 3: i64 ts_b),
	binary av_md5_alloc (),
	void av_md5_final (0: binary ctx, 1: binary dst),
	void av_md5_init (0: binary ctx),
	void av_md5_sum (0: binary len, 1: binary src, 2: binary dst),
	void av_md5_update (0: binary ctx, 1: binary src, 2: i32 len),
	string av_strdup (0: binary s),
	string av_strndup (0: binary s, 1: i64 len),
	i32 av_dynarray_add_nofree (0: binary nb_ptr, 1: binary elem, 2: binary tab_ptr),
	i32 av_reallocp_array (0: i64 nmemb, 1: i64 size, 2: binary ptr),
	i32 av_reallocp (0: i64 size, 1: binary ptr),
	binary av_calloc (0: i64 nmemb, 1: i64 size),
	binary av_dynarray2_add (0: binary elem_data, 1: binary nb_ptr, 2: i64 elem_size, 3: binary tab_ptr),
	binary av_fast_realloc (0: i64 min_size, 1: binary size, 2: binary ptr),
	binary av_malloc_array (0: i64 nmemb, 1: i64 size),
	binary av_mallocz_array (0: i64 nmemb, 1: i64 size),
	binary av_mallocz (0: i64 size),
	binary av_malloc (0: i64 size),
	binary av_memdup (0: binary p, 1: i64 size),
	binary av_realloc_array (0: i64 nmemb, 1: i64 size, 2: binary ptr),
	binary av_realloc_f (0: i64 elsize, 1: i64 nelem, 2: binary ptr),
	binary av_realloc (0: i64 size, 1: binary ptr),
	void av_dynarray_add (0: binary nb_ptr, 1: binary elem, 2: binary tab_ptr),
	void av_fast_mallocz (0: i64 min_size, 1: binary size, 2: binary ptr),
	void av_fast_malloc (0: i64 min_size, 1: binary size, 2: binary ptr),
	void av_freep (0: binary arg),
	void av_free (0: binary ptr),
	void av_max_alloc (0: i64 max),
	void av_memcpy_backptr (0: i32 back, 1: i32 cnt, 2: binary dst),
	i32 av_size_mult (0: binary r, 1: binary a, 2: binary b),
	i32 ff_fast_malloc (0: i32 zero_realloc, 1: binary min_size, 2: binary size, 3: binary ptr),
	void ff_float_dsp_init_mips (0: binary fdsp),
	binary AV_RN32 (0: binary p),
	binary lrintf_mips (0: double x),
	binary av_murmur3_alloc (),
	i64 fmix (0: i64 k),
	i64 get_k1 (0: binary src),
	i64 get_k2 (0: binary src),
	i64 update_h1 (0: i64 h1, 1: i64 h2, 2: i64 k),
	i64 update_h2 (0: i64 h1, 1: i64 h2, 2: i64 k),
	void av_murmur3_final (0: binary c, 1: binary dst),
	void av_murmur3_init_seeded (0: binary c, 1: i64 seed),
	void av_murmur3_init (0: binary c),
	void av_murmur3_update (0: binary c, 1: binary src, 2: i32 len),
	binary av_opt_child_class_next (0: binary parent, 1: binary prev),
	binary av_opt_find2 (0: binary name, 1: binary unit, 2: i32 opt_flags, 3: i32 search_flags, 4: binary target_obj, 5: binary obj),
	binary av_opt_find (0: binary name, 1: binary unit, 2: i32 opt_flags, 3: i32 search_flags, 4: binary obj),
	binary av_opt_next (0: binary last, 1: binary obj),
	i32 av_opt_copy (0: binary src, 1: binary dst),
	i32 av_opt_flag_is_set (0: binary field_name, 1: binary flag_name, 2: binary obj),
	i32 av_opt_get_channel_layout (0: binary name, 1: binary cl, 2: i32 search_flags, 3: binary obj),
	i32 av_opt_get_dict_val (0: binary out_val, 1: binary name, 2: i32 search_flags, 3: binary obj),
	i32 av_opt_get_double (0: binary name, 1: binary out_val, 2: i32 search_flags, 3: binary obj),
	i32 av_opt_get_image_size (0: binary name, 1: binary h_out, 2: binary w_out, 3: i32 search_flags, 4: binary obj),
	i32 av_opt_get_int (0: binary name, 1: binary out_val, 2: i32 search_flags, 3: binary obj),
	i32 av_opt_get_key_value (0: binary rkey, 1: binary rval, 2: binary ropts, 3: binary key_val_sep, 4: binary pairs_sep, 5: binary flags),
	i32 av_opt_get_pixel_fmt (0: binary out_fmt, 1: binary name, 2: i32 search_flags, 3: binary obj),
	i32 av_opt_get_q (0: binary out_val, 1: binary name, 2: i32 search_flags, 3: binary obj),
	i32 av_opt_get_sample_fmt (0: binary out_fmt, 1: binary name, 2: i32 search_flags, 3: binary obj),
	i32 av_opt_get_video_rate (0: binary out_val, 1: binary name, 2: i32 search_flags, 3: binary obj),
	i32 av_opt_get (0: binary name, 1: i32 search_flags, 2: binary out_val, 3: binary obj),
	i32 av_opt_is_set_to_default_by_name (0: binary name, 1: i32 search_flags, 2: binary obj),
	i32 av_opt_is_set_to_default (0: binary o, 1: binary obj),
	i32 av_opt_query_ranges_default (0: binary ranges_arg, 1: binary key, 2: i32 flags, 3: binary obj),
	i32 av_opt_query_ranges (0: binary ranges_arg, 1: binary key, 2: i32 flags, 3: binary obj),
	i32 av_opt_serialize (0: binary buffer, 1: binary key_val_sep, 2: binary pairs_sep, 3: i32 flags, 4: i32 opt_flags, 5: binary obj),
	i32 av_opt_set_bin (0: binary name, 1: binary val, 2: i32 len, 3: i32 search_flags, 4: binary obj),
	i32 av_opt_set_channel_layout (0: binary name, 1: i64 cl, 2: i32 search_flags, 3: binary obj),
	i32 av_opt_set_dict2 (0: binary options, 1: i32 search_flags, 2: binary obj),
	i32 av_opt_set_dict_val (0: binary val, 1: binary name, 2: i32 search_flags, 3: binary obj),
	i32 av_opt_set_dict (0: binary options, 1: binary obj),
	i32 av_opt_set_double (0: binary name, 1: double val, 2: i32 search_flags, 3: binary obj),
	i32 av_opt_set_from_string (0: binary shorthand, 1: binary key_val_sep, 2: binary opts, 3: binary pairs_sep, 4: binary ctx),
	i32 av_opt_set_image_size (0: binary name, 1: i32 h, 2: i32 search_flags, 3: i32 w, 4: binary obj),
	i32 av_opt_set_int (0: binary name, 1: i64 val, 2: i32 search_flags, 3: binary obj),
	i32 av_opt_set_pixel_fmt (0: binary fmt, 1: binary name, 2: i32 search_flags, 3: binary obj),
	i32 av_opt_set_q (0: AVRational val, 1: binary name, 2: i32 search_flags, 3: binary obj),
	i32 av_opt_set_sample_fmt (0: binary fmt, 1: binary name, 2: i32 search_flags, 3: binary obj),
	i32 av_opt_set_video_rate (0: AVRational val, 1: binary name, 2: i32 search_flags, 3: binary obj),
	i32 av_opt_set (0: binary name, 1: binary val, 2: i32 search_flags, 3: binary obj),
	i32 av_opt_show2 (0: i32 rej_flags, 1: i32 req_flags, 2: binary av_log_obj, 3: binary obj),
	i32 av_set_options_string (0: binary key_val_sep, 1: binary opts, 2: binary pairs_sep, 3: binary ctx),
	binary av_opt_child_next (0: binary obj, 1: binary prev),
	binary av_opt_ptr (0: binary class, 1: binary name, 2: binary obj),
	void av_opt_freep_ranges (0: binary rangesp),
	void av_opt_free (0: binary obj),
	void av_opt_set_defaults2 (0: i32 flags, 1: i32 mask, 2: binary s),
	void av_opt_set_defaults (0: binary s),
	string av_small_strptime (0: binary dt, 1: binary fmt, 2: binary p),
	binary av_get_known_color_name (0: binary rgbp, 1: i32 color_idx),
	i32 av_find_info_tag (0: string arg, 1: binary info, 2: binary tag1, 3: i32 arg_size),
	i32 av_parse_color (0: binary color_string, 1: i32 slen, 2: binary rgba_color, 3: binary log_ctx),
	i32 av_parse_ratio (0: binary q, 1: binary str, 2: i32 log_offset, 3: i32 max, 4: binary log_ctx),
	i32 av_parse_time (0: binary timestr, 1: binary timeval, 2: i32 duration),
	i32 av_parse_video_rate (0: binary rate, 1: binary arg),
	i32 av_parse_video_size (0: binary str, 1: binary height_ptr, 2: binary width_ptr),
	binary av_timegm (0: binary tm),
	binary ff_pca_init (0: i32 n),
	i32 ff_pca (0: binary pca, 1: binary eigenvalue, 2: binary eigenvector),
	void ff_pca_add (0: binary pca, 1: binary v),
	void ff_pca_free (0: binary pca),
	binary av_find_best_pix_fmt_of_2 (0: binary dst_pix_fmt1, 1: binary dst_pix_fmt2, 2: binary src_pix_fmt, 3: binary loss_ptr, 4: i32 has_alpha),
	binary av_get_pix_fmt (0: binary name),
	binary av_pix_fmt_desc_get_id (0: binary desc),
	binary av_pix_fmt_swap_endianness (0: binary pix_fmt),
	string av_get_pix_fmt_string (0: binary pix_fmt, 1: string buf, 2: i32 buf_size),
	binary av_pix_fmt_desc_get (0: binary pix_fmt),
	binary av_pix_fmt_desc_next (0: binary prev),
	binary av_chroma_location_name (0: binary location),
	binary av_color_primaries_name (0: binary primaries),
	binary av_color_range_name (0: binary range),
	binary av_color_space_name (0: binary space),
	binary av_color_transfer_name (0: binary transfer),
	binary av_get_pix_fmt_name (0: binary pix_fmt),
	i32 av_chroma_location_from_name (0: binary name),
	i32 av_color_primaries_from_name (0: binary name),
	i32 av_color_range_from_name (0: binary name),
	i32 av_color_space_from_name (0: binary name),
	i32 av_color_transfer_from_name (0: binary name),
	i32 av_get_bits_per_pixel (0: binary pixdesc),
	i32 av_get_padded_bits_per_pixel (0: binary pixdesc),
	i32 av_get_pix_fmt_loss (0: binary dst_pix_fmt, 1: binary src_pix_fmt, 2: i32 has_alpha),
	i32 av_pix_fmt_count_planes (0: binary pix_fmt),
	i32 av_pix_fmt_get_chroma_sub_sample (0: binary pix_fmt, 1: binary h_shift, 2: binary v_shift),
	void av_read_image_line2 (0: binary desc, 1: binary linesize, 2: binary data, 3: i32 c, 4: i32 dst_element_size, 5: i32 read_pal_component, 6: i32 w, 7: i32 x, 8: i32 y, 9: binary dst),
	void av_read_image_line (0: binary desc, 1: binary linesize, 2: binary data, 3: i32 c, 4: i32 read_pal_component, 5: i32 w, 6: i32 x, 7: i32 y, 8: binary dst),
	void av_write_image_line2 (0: binary desc, 1: binary linesize, 2: binary src, 3: i32 c, 4: i32 src_element_size, 5: i32 w, 6: i32 x, 7: i32 y, 8: binary data),
	void av_write_image_line (0: binary desc, 1: binary linesize, 2: binary src, 3: i32 c, 4: i32 w, 5: i32 x, 6: i32 y, 7: binary data),
	void ff_check_pixfmt_descriptors (),
	av_pixelutils_sad_fn av_pixelutils_get_sad_fn (0: i32 aligned, 1: i32 h_bits, 2: i32 w_bits, 3: binary log_ctx),
	i32 ff_get_cpu_flags_ppc (),
	i64 ff_get_cpu_max_align_ppc (),
	void ff_vector_fmul_add_altivec (0: binary src0, 1: binary src1, 2: binary src2, 3: binary dst, 4: i32 len),
	void ff_vector_fmul_altivec (0: binary src0, 1: binary src1, 2: binary dst, 3: i32 len),
	void ff_vector_fmul_reverse_altivec (0: binary src0, 1: binary src1, 2: binary dst, 3: i32 len),
	void ff_vector_fmul_window_altivec (0: binary src0, 1: binary src1, 2: binary win, 3: binary dst, 4: i32 len),
	binary ff_float_dsp_init_ppc (0: binary fdsp, 1: i32 bit_exact),
	void ff_vector_fmul_add_vsx (0: binary src0, 1: binary src1, 2: binary src2, 3: binary dst, 4: i32 len),
	void ff_vector_fmul_reverse_vsx (0: binary src0, 1: binary src1, 2: binary dst, 3: i32 len),
	void ff_vector_fmul_vsx (0: binary src0, 1: binary src1, 2: binary dst, 3: i32 len),
	void ff_vector_fmul_window_vsx (0: binary src0, 1: binary src1, 2: binary win, 3: binary dst, 4: i32 len),
	binary av_read_bswap16 (0: binary p),
	binary av_read_bswap32 (0: binary p),
	binary av_read_bswap64 (0: binary p),
	binary av_write_bswap16 (0: i16 v, 1: binary p),
	binary av_write_bswap32 (0: i32 v, 1: binary p),
	binary av_write_bswap64 (0: i64 v, 1: binary p),
	i64 read_time (),
	vec_u8 load_with_perm_vec (0: binary src, 1: i32 offset, 2: vec_u8 perm_vec),
	vec_u8 unaligned_load (0: binary src, 1: i32 offset),
	i32 av_get_random_seed (),
	AVRational av_add_q (0: AVRational b, 1: AVRational c),
	AVRational av_d2q (0: double d, 1: i32 max),
	AVRational av_div_q (0: AVRational b, 1: AVRational c),
	AVRational av_mul_q (0: AVRational b, 1: AVRational c),
	AVRational av_sub_q (0: AVRational b, 1: AVRational c),
	i32 av_find_nearest_q_idx (0: AVRational q, 1: binary q_list),
	i32 av_nearer_q (0: AVRational q1, 1: AVRational q2, 2: AVRational q),
	i32 av_reduce (0: binary dst_den, 1: binary dst_num, 2: i64 den, 3: i64 max, 4: i64 num),
	i32 av_q2intfloat (0: AVRational q),
	AVRational av_make_q (0: i32 den, 1: i32 num),
	binary av_inv_q (0: AVRational q),
	double av_q2d (0: AVRational a),
	i32 av_cmp_q (0: AVRational a, 1: AVRational b),
	binary av_rc4_alloc (),
	i32 av_rc4_init (0: binary r, 1: binary key, 2: i32 decrypt, 3: i32 key_bits),
	void av_rc4_crypt (0: binary r, 1: binary src, 2: i32 count, 3: i32 decrypt, 4: binary dst, 5: binary iv),
	binary av_ripemd_alloc (),
	binary av_ripemd_init (0: binary ctx, 1: i32 bits),
	void av_ripemd_final (0: binary ctx, 1: binary digest),
	void av_ripemd_update (0: binary ctx, 1: binary data, 2: binary len),
	binary av_get_alt_sample_fmt (0: binary sample_fmt, 1: i32 planar),
	binary av_get_packed_sample_fmt (0: binary sample_fmt),
	binary av_get_planar_sample_fmt (0: binary sample_fmt),
	binary av_get_sample_fmt (0: binary name),
	string av_get_sample_fmt_string (0: binary sample_fmt, 1: string buf, 2: i32 buf_size),
	binary av_get_sample_fmt_name (0: binary sample_fmt),
	i32 av_get_bytes_per_sample (0: binary sample_fmt),
	i32 av_sample_fmt_is_planar (0: binary sample_fmt),
	i32 av_samples_alloc_array_and_samples (0: binary sample_fmt, 1: binary linesize, 2: i32 align, 3: i32 nb_channels, 4: i32 nb_samples, 5: binary audio_data),
	i32 av_samples_alloc (0: binary sample_fmt, 1: binary linesize, 2: i32 align, 3: i32 nb_channels, 4: i32 nb_samples, 5: binary audio_data),
	i32 av_samples_copy (0: binary sample_fmt, 1: i32 dst_offset, 2: i32 nb_channels, 3: i32 nb_samples, 4: i32 src_offset, 5: binary src, 6: binary dst),
	i32 av_samples_fill_arrays (0: binary sample_fmt, 1: binary buf, 2: binary linesize, 3: i32 align, 4: i32 nb_channels, 5: i32 nb_samples, 6: binary audio_data),
	i32 av_samples_get_buffer_size (0: binary sample_fmt, 1: binary linesize, 2: i32 align, 3: i32 nb_channels, 4: i32 nb_samples),
	i32 av_samples_set_silence (0: binary sample_fmt, 1: i32 nb_channels, 2: i32 nb_samples, 3: i32 offset, 4: binary audio_data),
	binary av_bswap16 (0: i16 x),
	binary av_bswap32 (0: i32 x),
	binary av_sha_alloc (),
	binary av_sha_init (0: binary ctx, 1: i32 bits),
	void av_sha_final (0: binary ctx, 1: binary digest),
	void av_sha_update (0: binary ctx, 1: binary data, 2: binary len),
	binary av_sha512_alloc (),
	binary av_sha512_init (0: binary ctx, 1: i32 bits),
	void av_sha512_final (0: binary ctx, 1: binary digest),
	void av_sha512_update (0: binary ctx, 1: binary data, 2: binary len),
	i32 avpriv_slicethread_create (0: binary pctx, 1: i32 nb_threads, 2: binary main_func, 3: binary worker_func, 4: binary priv),
	void avpriv_slicethread_execute (0: binary ctx, 1: i32 execute_main, 2: i32 nb_jobs),
	void avpriv_slicethread_free (0: binary pctx),
	binary av_sqrt_sf (0: SoftFloat val),
	binary av_add_sf (0: SoftFloat a, 1: SoftFloat b),
	binary av_div_sf (0: SoftFloat a, 1: SoftFloat b),
	binary av_int2sf (0: i32 frac_bits, 1: i32 v),
	binary av_mul_sf (0: SoftFloat a, 1: SoftFloat b),
	binary av_normalize1_sf (0: SoftFloat a),
	binary av_normalize_sf (0: SoftFloat a),
	binary av_sub_sf (0: SoftFloat a, 1: SoftFloat b),
	binary av_sf2double (0: SoftFloat v),
	binary av_cmp_sf (0: SoftFloat a, 1: SoftFloat b),
	binary av_gt_sf (0: SoftFloat a, 1: SoftFloat b),
	binary av_sf2int (0: SoftFloat v, 1: i32 frac_bits),
	binary av_sincos_sf (0: binary c, 1: binary s, 2: i32 a),
	SoftFloat_IEEE754 av_bits2sf_ieee754 (0: i32 n),
	SoftFloat_IEEE754 av_div_sf_ieee754 (0: SoftFloat_IEEE754 a, 1: SoftFloat_IEEE754 b),
	SoftFloat_IEEE754 av_int2sf_ieee754 (0: i64 n, 1: i32 e),
	SoftFloat_IEEE754 av_mul_sf_ieee754 (0: SoftFloat_IEEE754 a, 1: SoftFloat_IEEE754 b),
	SoftFloat_IEEE754 av_normalize_sf_ieee754 (0: SoftFloat_IEEE754 sf),
	i32 av_cmp_sf_ieee754 (0: SoftFloat_IEEE754 a, 1: SoftFloat_IEEE754 b),
	i32 av_sf2int_ieee754 (0: SoftFloat_IEEE754 a),
	binary av_spherical_alloc (0: binary size),
	binary av_spherical_projection_name (0: binary projection),
	i32 av_spherical_from_name (0: binary name),
	void av_spherical_tile_bounds (0: binary map, 1: binary bottom, 2: binary left, 3: binary right, 4: binary top, 5: i64 height, 6: i64 width),
	binary av_stereo3d_alloc (),
	binary av_stereo3d_create_side_data (0: binary frame),
	binary av_stereo3d_type_name (0: binary type),
	i32 av_stereo3d_from_name (0: binary name),
	double ff_cbrt (0: double x),
	double ff_rint (0: double x),
	binary ff_llrint (0: double x),
	i32 ff_lrint (0: double x),
	binary av_tea_alloc (),
	void av_tea_crypt (0: binary ctx, 1: binary src, 2: i32 count, 3: i32 decrypt, 4: binary dst, 5: binary iv),
	void av_tea_init (0: binary ctx, 1: binary key, 2: i32 rounds),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (),
	i32 main (),
	i32 main (),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (),
	i32 main (),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (),
	i32 main (),
	i32 main (),
	i32 main (),
	i32 main (),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (),
	i32 main (),
	i32 main (),
	i32 main (),
	i32 main (),
	i32 main (),
	i32 main (),
	i32 main (),
	i32 main (),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (),
	i32 main (),
	i32 main (),
	i32 main (),
	i32 main (),
	i32 main (),
	i32 main (),
	i32 main (),
	i32 main (),
	i32 main (),
	i32 main (),
	i32 main (),
	i32 main (),
	i32 main (),
	i32 main (),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (),
	i32 ff_mutex_destroy (0: binary mutex),
	i32 ff_mutex_init (0: binary mutex, 1: binary attr),
	i32 ff_mutex_lock (0: binary mutex),
	i32 ff_mutex_unlock (0: binary mutex),
	i32 ff_thread_once (0: string control, 1: binary routine),
	i32 strict_pthread_cond_broadcast (0: binary cond),
	i32 strict_pthread_cond_destroy (0: binary cond),
	i32 strict_pthread_cond_init (0: binary attr, 1: binary cond),
	i32 strict_pthread_cond_signal (0: binary cond),
	i32 strict_pthread_cond_wait (0: binary cond, 1: binary mutex),
	i32 strict_pthread_join (0: pthread_t thread, 1: binary value_ptr),
	i32 strict_pthread_mutex_destroy (0: binary mutex),
	i32 strict_pthread_mutex_init (0: binary attr, 1: binary mutex),
	i32 strict_pthread_mutex_lock (0: binary mutex),
	i32 strict_pthread_mutex_unlock (0: binary mutex),
	i32 strict_pthread_once (0: binary once_control, 1: binary init_routine),
	i32 av_thread_message_queue_alloc (0: binary mq, 1: binary elsize, 2: binary nelem),
	i32 av_thread_message_queue_nb_elems (0: binary mq),
	i32 av_thread_message_queue_recv (0: binary mq, 1: binary flags, 2: binary msg),
	i32 av_thread_message_queue_send (0: binary mq, 1: binary flags, 2: binary msg),
	void av_thread_message_flush (0: binary mq),
	void av_thread_message_queue_free (0: binary mq),
	void av_thread_message_queue_set_err_recv (0: binary mq, 1: i32 err),
	void av_thread_message_queue_set_err_send (0: binary mq, 1: i32 err),
	void av_thread_message_queue_set_free_func (0: binary mq, 1: binary free_func),
	i64 av_gettime_relative (),
	i64 av_gettime (),
	i32 av_gettime_relative_is_monotonic (),
	i32 av_usleep (0: binary usec),
	binary gmtime_r (0: binary result, 1: binary clock),
	binary localtime_r (0: binary result, 1: binary clock),
	string av_timecode_make_mpeg_tc_string (0: string buf, 1: i32 tc25bit),
	string av_timecode_make_smpte_tc_string (0: string buf, 1: i32 prevent_df, 2: i32 tcsmpte),
	string av_timecode_make_string (0: string buf, 1: binary tc, 2: i32 framenum),
	i32 av_timecode_adjust_ntsc_framenum2 (0: i32 fps, 1: i32 framenum),
	i32 av_timecode_check_frame_rate (0: AVRational rate),
	i32 av_timecode_init_from_string (0: AVRational rate, 1: binary tc, 2: binary str, 3: binary log_ctx),
	i32 av_timecode_init (0: AVRational rate, 1: binary tc, 2: i32 flags, 3: i32 frame_start, 4: binary log_ctx),
	i32 av_timecode_get_smpte_from_framenum (0: binary tc, 1: i32 framenum),
	string av_ts_make_string (0: string buf, 1: i64 ts),
	string av_ts_make_time_string (0: binary tb, 1: string buf, 2: i64 ts),
	binary AV_RB16 (0: binary p),
	binary AV_RL16 (0: binary p),
	binary AV_RB32 (0: binary p),
	binary AV_RL32 (0: binary p),
	binary AV_WB16 (0: i16 v, 1: binary p),
	binary AV_WB32 (0: i32 v, 1: binary p),
	binary AV_WL16 (0: i16 v, 1: binary p),
	binary AV_WL32 (0: i32 v, 1: binary p),
	binary av_tree_node_alloc (),
	binary av_tree_find (0: binary t, 1: binary cmp, 2: binary next, 3: binary key),
	binary av_tree_insert (0: binary next, 1: binary tp, 2: binary cmp, 3: binary key),
	void av_tree_destroy (0: binary t),
	void av_tree_enumerate (0: binary t, 1: binary cmp, 2: binary enu, 3: binary opaque),
	binary av_twofish_alloc (),
	binary av_twofish_init (0: binary cs, 1: binary key, 2: i32 key_bits),
	void av_twofish_crypt (0: binary cs, 1: binary src, 2: i32 count, 3: i32 decrypt, 4: binary dst, 5: binary iv),
	AVRational av_get_time_base_q (),
	string av_fourcc_make_string (0: string buf, 1: i32 fourcc),
	byte av_get_picture_type_char (0: binary pict_type),
	binary av_get_media_type_string (0: binary media_type),
	binary av_version_info (),
	binary avutil_configuration (),
	binary avutil_license (),
	binary av_int_list_length_for_size (0: binary list, 1: i64 term, 2: binary elsize),
	binary avutil_version (),
	void av_assert0_fpu (),
	binary utf8towchar (0: binary filename_utf8, 1: binary filename_w),
	binary av_bswap16 (0: i16 x, 1: binary x),
	binary av_bswap32 (0: i32 x),
	binary av_bswap16 (0: i16 x, 1: binary x),
	binary av_bswap64 (0: i64 x),
	i32 ff_get_cpu_flags_x86 (),
	i64 ff_get_cpu_max_align_x86 (),
	binary emms_c (),
	binary ff_fixed_dsp_init_x86 (0: binary fdsp),
	binary ff_float_dsp_init_x86 (0: binary fdsp),
	i32 ff_image_copy_plane_uc_from_x86 (0: binary src, 1: i32 height, 2: binary bytewidth, 3: binary dst_linesize, 4: binary src_linesize, 5: binary dst),
	binary av_clipd_sse2 (0: double amax, 1: double amin, 2: double a),
	binary av_clipf_sse (0: double amax, 1: double amin, 2: double a),
	binary ff_ctzll_x86 (0: binary v),
	binary ff_log2_x86 (0: binary v),
	binary av_mod_uintp2_bmi2 (0: binary a, 1: binary p),
	binary AV_COPY128 (0: binary s, 1: binary d),
	binary AV_COPY64 (0: binary s, 1: binary d),
	binary AV_SWAP64 (0: binary a, 1: binary b),
	binary AV_ZERO128 (0: binary d),
	binary AV_ZERO64 (0: binary d),
	binary ff_init_lls_x86 (0: binary m),
	void ff_pixelutils_sad_init_x86 (0: binary sad, 1: i32 aligned),
	i64 read_time (),
	binary av_xtea_alloc (),
	void av_xtea_crypt (0: binary ctx, 1: binary src, 2: i32 count, 3: i32 decrypt, 4: binary dst, 5: binary iv),
	void av_xtea_init (0: binary ctx, 1: binary key),
	void av_xtea_le_crypt (0: binary ctx, 1: binary src, 2: i32 count, 3: i32 decrypt, 4: binary dst, 5: binary iv),
	void av_xtea_le_init (0: binary ctx, 1: binary key),
	binary pp_get_context (0: i32 cpuCaps, 1: i32 height, 2: i32 width),
	binary pp_free_context (0: binary vc),
	binary postproc_configuration (),
	binary postproc_license (),
	i32 horizClassify_C (0: binary c, 1: binary src, 2: i32 stride),
	i32 isHorizDC_C (0: binary c, 1: binary src, 2: i32 stride),
	i32 isHorizMinMaxOk_C (0: binary src, 1: i32 QP, 2: i32 stride),
	i32 isVertDC_C (0: binary c, 1: binary src, 2: i32 stride),
	i32 isVertMinMaxOk_C (0: binary src, 1: i32 QP, 2: i32 stride),
	i32 vertClassify_C (0: binary c, 1: binary src, 2: i32 stride),
	binary pp_get_mode_by_name_and_quality (0: binary name, 1: i32 quality),
	binary postproc_version (),
	void doHorizDefFilter_C (0: binary c, 1: i32 stride, 2: binary dst),
	void doHorizLowPass_C (0: binary c, 1: i32 stride, 2: binary dst),
	void horizX1Filter (0: i32 QP, 1: i32 stride, 2: binary src),
	void postProcess (0: binary QPs, 1: binary src, 2: i32 QPStride, 3: i32 dstStride, 4: i32 height, 5: i32 isColor, 6: i32 srcStride, 7: i32 width, 8: binary vc, 9: binary vm, 10: binary dst),
	void pp_free_mode (0: binary mode),
	void pp_postprocess (0: binary QP_store, 1: binary dstStride, 2: binary srcStride, 3: binary src, 4: i32 QPStride, 5: i32 height, 6: i32 pict_type, 7: i32 width, 8: binary vm, 9: binary dst, 10: binary vc),
	i32 vertClassify_altivec (0: binary c, 1: i32 stride, 2: binary src),
	void dering_altivec (0: binary c, 1: i32 stride, 2: binary src),
	void doVertDefFilter_altivec (0: binary c, 1: i32 stride, 2: binary src),
	void doVertLowPass_altivec (0: binary c, 1: i32 stride, 2: binary src),
	void tempNoiseReducer_altivec (0: binary maxNoise, 1: i32 stride, 2: binary tempBlurredPast, 3: binary src, 4: binary tempBlurred),
	void transpose_16x8_char_toPackedAlign_altivec (0: i32 stride, 1: binary dst, 2: binary src),
	void transpose_8x16_char_fromPackedAlign_altivec (0: i32 stride, 1: binary dst, 2: binary src),
	void linecpy (0: binary src, 1: i32 lines, 2: i32 stride, 3: binary dest),
	i32 RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	binary swri_audio_convert_init_aarch64 (0: binary in_fmt, 1: binary out_fmt, 2: binary ac, 3: i32 channels),
	binary wrap (0: binary in_count),
	binary DECLARE_RESAMPLE_COMMON_TEMPLATE (),
	binary swri_audio_convert_init_arm (0: binary in_fmt, 1: binary out_fmt, 2: binary ac, 3: i32 channels),
	binary wrap (0: binary in_count),
	binary DECLARE_RESAMPLE_COMMON_TEMPLATE (),
	binary swri_audio_convert_alloc (0: binary in_fmt, 1: binary out_fmt, 2: binary ch_map, 3: i32 channels, 4: i32 flags),
	i32 swri_audio_convert (0: binary ctx, 1: binary in, 2: binary out, 3: i32 len),
	void swri_audio_convert_free (0: binary ctx),
	binary swri_dither_init (0: binary in_fmt, 1: binary out_fmt, 2: binary s),
	i32 swri_get_dither (0: binary noise_fmt, 1: binary s, 2: i32 len, 3: binary seed, 4: binary dst),
	binary RENAME (),
	binary swr_alloc (),
	binary swr_get_class (),
	binary swr_build_matrix (0: binary matrix_encoding, 1: binary matrix_param, 2: double center_mix_level, 3: double lfe_mix_level, 4: double maxval, 5: double rematrix_volume, 6: double surround_mix_level, 7: i32 stride, 8: i64 in_ch_layout_param, 9: i64 out_ch_layout_param, 10: binary log_context),
	binary swri_rematrix_init (0: binary s),
	binary swri_rematrix_free (0: binary s),
	i32 swr_set_matrix (0: binary s, 1: binary matrix, 2: i32 stride),
	i32 swri_rematrix (0: binary in, 1: binary out, 2: binary s, 3: i32 len, 4: i32 mustcopy),
	double eval_poly (0: binary coeff, 1: double x, 2: i32 size),
	void swri_resample_dsp_init (0: binary c),
	binary swr_alloc_set_opts (0: binary in_sample_fmt, 1: binary out_sample_fmt, 2: binary s, 3: i64 in_ch_layout, 4: i64 out_ch_layout, 5: i32 in_sample_rate, 6: i32 log_offset, 7: i32 out_sample_rate, 8: binary log_ctx),
	binary swr_init (0: binary s),
	binary swr_close (0: binary s),
	binary swr_free (0: binary ss),
	binary swresample_configuration (),
	binary swresample_license (),
	binary swr_convert (0: binary s, 1: binary in_arg, 2: i32 in_count, 3: i32 out_count, 4: binary out_arg),
	i64 swr_get_delay (0: binary s, 1: i64 base),
	i64 swr_next_pts (0: binary s, 1: i64 pts),
	i32 swr_drop_output (0: binary s, 1: i32 count),
	i32 swr_get_out_samples (0: binary s, 1: i32 in_samples),
	i32 swr_inject_silence (0: binary s, 1: i32 count),
	i32 swr_is_initialized (0: binary s),
	i32 swr_set_channel_mapping (0: binary s, 1: binary channel_map),
	i32 swr_set_compensation (0: binary s, 1: i32 compensation_distance, 2: i32 sample_delta),
	i32 swri_realloc_audio (0: binary a, 1: i32 count),
	binary swresample_version (),
	i32 available_samples (0: binary out),
	i32 convert_frame (0: binary out, 1: binary s, 2: binary in),
	i32 swr_config_frame (0: binary s, 1: binary in, 2: binary out),
	i32 swr_convert_frame (0: binary out, 1: binary s, 2: binary in),
	i32 main (0: binary argv, 1: i32 argc),
	_ PROTO4 (),
	binary D (),
	binary swri_resample_dsp_x86_init (0: binary c),
	binary wrap (0: binary in_count),
	binary ff_sws_init_swscale_aarch64 (0: binary c),
	void ff_get_unscaled_swscale_aarch64 (0: binary c),
	i32 ff_sws_alphablendaway (0: binary c, 1: binary src, 2: binary dstStride, 3: binary srcStride, 4: i32 srcSliceH, 5: i32 srcSliceY, 6: binary dst),
	binary ff_sws_init_swscale_arm (0: binary c),
	void ff_get_unscaled_swscale_arm (0: binary c),
	i32 ff_init_gamma_convert (0: binary desc, 1: binary src, 2: binary table),
	i32 ff_init_desc_cfmt_convert (0: binary desc, 1: binary dst, 2: binary src, 3: binary pal),
	i32 ff_init_desc_chscale (0: binary desc, 1: binary dst, 2: binary src, 3: binary filter_pos, 4: i32 filter_size, 5: i32 xInc, 6: binary filter),
	i32 ff_init_desc_fmt_convert (0: binary desc, 1: binary dst, 2: binary src, 3: binary pal),
	i32 ff_init_desc_hscale (0: binary desc, 1: binary dst, 2: binary src, 3: binary filter_pos, 4: i32 filter_size, 5: i32 xInc, 6: binary filter),
	i32 ff_init_desc_no_chr (0: binary desc, 1: binary dst, 2: binary src),
	void ff_hcscale_fast_c (0: binary c, 1: binary src1, 2: binary src2, 3: binary dst1, 4: binary dst2, 5: i32 dstWidth, 6: i32 srcW, 7: i32 xInc),
	void ff_hyscale_fast_c (0: binary c, 1: binary src, 2: binary dst, 3: i32 dstWidth, 4: i32 srcW, 5: i32 xInc),
	binary ff_sws_init_input_funcs (0: binary c),
	binary sws_get_class (),
	binary ff_sws_init_output_funcs (0: binary c, 1: binary yuv2anyX, 2: binary yuv2nv12cX, 3: binary yuv2packed1, 4: binary yuv2packed2, 5: binary yuv2packedX, 6: binary yuv2plane1, 7: binary yuv2planeX),
	binary yuv2plane1_float (),
	void yuv2planeX_u (0: binary src, 1: binary filter, 2: binary dither, 3: i32 dstW, 4: i32 filterSize, 5: i32 offset, 6: i32 x, 7: binary dest),
	binary ff_yuv2rgb_init_ppc (0: binary c),
	binary ff_yuv2rgb_init_tables_ppc (0: binary c, 1: binary inv_table, 2: i32 brightness, 3: i32 contrast, 4: i32 saturation),
	void cvtyuvtoRGB (0: binary c, 1: binary B, 2: binary G, 3: binary R, 4: binary U, 5: binary V, 6: binary Y),
	binary ff_get_unscaled_swscale_ppc (0: binary c),
	binary ff_sws_rgb2rgb_init (),
	void rgb12to15 (0: binary src, 1: i32 src_size, 2: binary dst),
	void rgb12tobgr12 (0: binary src, 1: i32 src_size, 2: binary dst),
	void rgb15to24 (0: binary src, 1: i32 src_size, 2: binary dst),
	void rgb15tobgr15 (0: binary src, 1: i32 src_size, 2: binary dst),
	void rgb15tobgr16 (0: binary src, 1: i32 src_size, 2: binary dst),
	void rgb15tobgr32 (0: binary src, 1: i32 src_size, 2: binary dst),
	void rgb16to24 (0: binary src, 1: i32 src_size, 2: binary dst),
	void rgb16tobgr15 (0: binary src, 1: i32 src_size, 2: binary dst),
	void rgb16tobgr16 (0: binary src, 1: i32 src_size, 2: binary dst),
	void rgb16tobgr32 (0: binary src, 1: i32 src_size, 2: binary dst),
	void rgb24to32 (0: binary src, 1: i32 src_size, 2: binary dst),
	void rgb32to24 (0: binary src, 1: i32 src_size, 2: binary dst),
	void ff_rgb24toyv12_c (0: binary src, 1: binary rgb2yuv, 2: i32 chromStride, 3: i32 height, 4: i32 lumStride, 5: i32 srcStride, 6: i32 width, 7: binary udst, 8: binary vdst, 9: binary ydst),
	void planar2x_c (0: binary src, 1: i32 dstStride, 2: i32 srcHeight, 3: i32 srcStride, 4: i32 srcWidth, 5: binary dst),
	void rgb15to16_c (0: binary src, 1: i32 src_size, 2: binary dst),
	void rgb15to32_c (0: binary src, 1: i32 src_size, 2: binary dst),
	void rgb15tobgr24_c (0: binary src, 1: i32 src_size, 2: binary dst),
	void rgb16to15_c (0: binary src, 1: i32 src_size, 2: binary dst),
	void rgb16to32_c (0: binary src, 1: i32 src_size, 2: binary dst),
	void rgb16tobgr24_c (0: binary src, 1: i32 src_size, 2: binary dst),
	void rgb24to15_c (0: binary src, 1: i32 src_size, 2: binary dst),
	void rgb24to16_c (0: binary src, 1: i32 src_size, 2: binary dst),
	void rgb24tobgr15_c (0: binary src, 1: i32 src_size, 2: binary dst),
	void rgb24tobgr16_c (0: binary src, 1: i32 src_size, 2: binary dst),
	void rgb24tobgr32_c (0: binary src, 1: i32 src_size, 2: binary dst),
	void rgb32to15_c (0: binary src, 1: i32 src_size, 2: binary dst),
	void rgb32to16_c (0: binary src, 1: i32 src_size, 2: binary dst),
	void rgb32tobgr15_c (0: binary src, 1: i32 src_size, 2: binary dst),
	void rgb32tobgr16_c (0: binary src, 1: i32 src_size, 2: binary dst),
	void rgb32tobgr24_c (0: binary src, 1: i32 src_size, 2: binary dst),
	void shuffle_bytes_0321_c (0: binary src, 1: i32 src_size, 2: binary dst),
	void shuffle_bytes_2103_c (0: binary src, 1: i32 src_size, 2: binary dst),
	void uyvytoyv12_c (0: binary src, 1: i32 chromStride, 2: i32 height, 3: i32 lumStride, 4: i32 srcStride, 5: i32 width, 6: binary udst, 7: binary vdst, 8: binary ydst),
	void vu9_to_vu12_c (0: binary src1, 1: binary src2, 2: i32 dstStride1, 3: i32 dstStride2, 4: i32 height, 5: i32 srcStride1, 6: i32 srcStride2, 7: i32 width, 8: binary dst1, 9: binary dst2),
	void yuv422ptouyvy_c (0: binary usrc, 1: binary vsrc, 2: binary ysrc, 3: i32 chromStride, 4: i32 dstStride, 5: i32 height, 6: i32 lumStride, 7: i32 width, 8: binary dst),
	void yuv422ptoyuy2_c (0: binary usrc, 1: binary vsrc, 2: binary ysrc, 3: i32 chromStride, 4: i32 dstStride, 5: i32 height, 6: i32 lumStride, 7: i32 width, 8: binary dst),
	void yuvPlanartouyvy_c (0: binary usrc, 1: binary vsrc, 2: binary ysrc, 3: i32 chromStride, 4: i32 dstStride, 5: i32 height, 6: i32 lumStride, 7: i32 vertLumPerChroma, 8: i32 width, 9: binary dst),
	void yuvPlanartoyuy2_c (0: binary usrc, 1: binary vsrc, 2: binary ysrc, 3: i32 chromStride, 4: i32 dstStride, 5: i32 height, 6: i32 lumStride, 7: i32 vertLumPerChroma, 8: i32 width, 9: binary dst),
	void yuy2toyv12_c (0: binary src, 1: i32 chromStride, 2: i32 height, 3: i32 lumStride, 4: i32 srcStride, 5: i32 width, 6: binary udst, 7: binary vdst, 8: binary ydst),
	void yv12touyvy_c (0: binary usrc, 1: binary vsrc, 2: binary ysrc, 3: i32 chromStride, 4: i32 dstStride, 5: i32 height, 6: i32 lumStride, 7: i32 width, 8: binary dst),
	void yv12toyuy2_c (0: binary usrc, 1: binary vsrc, 2: binary ysrc, 3: i32 chromStride, 4: i32 dstStride, 5: i32 height, 6: i32 lumStride, 7: i32 width, 8: binary dst),
	void yvu9_to_yuy2_c (0: binary src1, 1: binary src2, 2: binary src3, 3: i32 dstStride, 4: i32 height, 5: i32 srcStride1, 6: i32 srcStride2, 7: i32 srcStride3, 8: i32 width, 9: binary dst),
	i32 ff_free_filters (0: binary c),
	i32 ff_init_filters (0: binary c),
	i32 ff_init_slice_from_src (0: binary s, 1: binary stride, 2: i32 chrH, 3: i32 chrY, 4: i32 lumH, 5: i32 lumY, 6: i32 relative, 7: i32 srcW, 8: binary src),
	i32 ff_rotate_slice (0: binary s, 1: i32 chr, 2: i32 lum),
	SwsFunc ff_getSwsFunc (0: binary c),
	binary ff_sws_init_range_convert (0: binary c),
	binary sws_scale (0: binary c, 1: binary dstStride, 2: binary srcStride, 3: binary srcSlice, 4: i32 srcSliceH, 5: i32 srcSliceY, 6: binary dst),
	binary is16BPS (0: binary pix_fmt),
	binary isALPHA (0: binary pix_fmt),
	binary isAnyRGB (0: binary pix_fmt),
	binary isBE (0: binary pix_fmt),
	binary isBGRinInt (0: binary pix_fmt),
	binary isBayer (0: binary pix_fmt),
	binary isFloat (0: binary pix_fmt),
	binary isGray (0: binary pix_fmt),
	binary isNBPS (0: binary pix_fmt),
	binary isPackedRGB (0: binary pix_fmt),
	binary isPacked (0: binary pix_fmt),
	binary isPlanarRGB (0: binary pix_fmt),
	binary isPlanarYUV (0: binary pix_fmt),
	binary isPlanar (0: binary pix_fmt),
	binary isRGBinInt (0: binary pix_fmt),
	binary isRGB (0: binary pix_fmt),
	binary isSemiPlanarYUV (0: binary pix_fmt),
	binary isYUV (0: binary pix_fmt),
	binary usePal (0: binary pix_fmt),
	void fillPlane16 (0: binary big_endian, 1: i32 alpha, 2: i32 bits, 3: i32 height, 4: i32 stride, 5: i32 width, 6: i32 y, 7: binary plane),
	void ff_get_unscaled_swscale (0: binary c),
	void sws_convertPalette8ToPacked24 (0: binary palette, 1: binary src, 2: i32 num_pixels, 3: binary dst),
	void sws_convertPalette8ToPacked32 (0: binary palette, 1: binary src, 2: i32 num_pixels, 3: binary dst),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (),
	i32 main (0: binary argv, 1: i32 argc),
	binary sws_getCachedContext (0: binary dstFormat, 1: binary srcFormat, 2: binary context, 3: binary dstFilter, 4: binary srcFilter, 5: binary param, 6: i32 dstH, 7: i32 dstW, 8: i32 flags, 9: i32 srcH, 10: i32 srcW),
	binary sws_alloc_context (),
	binary sws_alloc_set_opts (0: binary dstFormat, 1: binary srcFormat, 2: binary param, 3: i32 dstH, 4: i32 dstW, 5: i32 flags, 6: i32 srcH, 7: i32 srcW),
	binary sws_getContext (0: binary dstFormat, 1: binary srcFormat, 2: binary dstFilter, 3: binary srcFilter, 4: binary param, 5: i32 dstH, 6: i32 dstW, 7: i32 flags, 8: i32 srcH, 9: i32 srcW),
	binary sws_getDefaultFilter (0: double chromaGBlur, 1: double chromaHShift, 2: double chromaSharpen, 3: double chromaVShift, 4: double lumaGBlur, 5: double lumaSharpen, 6: i32 verbose),
	binary sws_allocVec (0: i32 length),
	binary sws_cloneVec (0: binary a),
	binary sws_getGaussianVec (0: double quality, 1: double variance),
	binary sws_init_context (0: binary c, 1: binary dstFilter, 2: binary srcFilter),
	binary swscale_configuration (),
	binary swscale_license (),
	i32 sws_getColorspaceDetails (0: binary c, 1: binary inv_table, 2: binary table, 3: binary brightness, 4: binary contrast, 5: binary dstRange, 6: binary saturation, 7: binary srcRange),
	i32 sws_isSupportedEndiannessConversion (0: binary pix_fmt),
	i32 sws_isSupportedInput (0: binary pix_fmt),
	i32 sws_isSupportedOutput (0: binary pix_fmt),
	i32 sws_setColorspaceDetails (0: binary c, 1: binary inv_table, 2: binary table, 3: i32 brightness, 4: i32 contrast, 5: i32 dstRange, 6: i32 saturation, 7: i32 srcRange),
	binary swscale_version (),
	void sws_convVec (0: binary a, 1: binary b),
	void sws_freeContext (0: binary c),
	void sws_freeFilter (0: binary filter),
	void sws_freeVec (0: binary a),
	void sws_normalizeVec (0: binary a, 1: double height),
	void sws_scaleVec (0: binary a, 1: double scalar),
	void sws_subVec (0: binary a, 1: binary b),
	i32 ff_init_vscale (0: binary c, 1: binary desc, 2: binary dst, 3: binary src),
	void ff_init_vscale_pfn (0: binary c, 1: i32 use_mmx, 2: yuv2anyX_fn yuv2anyX, 3: yuv2interleavedX_fn yuv2nv12cX, 4: yuv2packed1_fn yuv2packed1, 5: yuv2packed2_fn yuv2packed2, 6: yuv2packedX_fn yuv2packedX, 7: yuv2planar1_fn yuv2plane1, 8: yuv2planarX_fn yuv2planeX),
	binary ff_init_hscaler_mmxext (0: binary filter, 1: binary filterPos, 2: i32 dstW, 3: i32 numSplits, 4: i32 xInc, 5: binary filterCode),
	void ff_hcscale_fast_mmxext (0: binary c, 1: binary src1, 2: binary src2, 3: binary dst1, 4: binary dst2, 5: i32 dstWidth, 6: i32 srcW, 7: i32 xInc),
	void ff_hyscale_fast_mmxext (0: binary c, 1: binary src, 2: binary dst, 3: i32 dstWidth, 4: i32 srcW, 5: i32 xInc),
	binary rgb2rgb_init_x86 (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	void RENAME (),
	binary ff_sws_init_swscale_x86 (0: binary c),
	void ff_updateMMXDitherTables (0: binary c, 1: i32 chrBufIndex, 2: i32 dstY, 3: i32 lastInChrBuf, 4: i32 lastInLumBuf, 5: i32 lumBufIndex),
	binary wrap (0: binary dstStride),
	binary ff_yuv2rgb_init_x86 (0: binary c),
	i32 RENAME (),
	i32 RENAME (),
	i32 RENAME (),
	i32 RENAME (),
	i32 RENAME (),
	i32 RENAME (),
	i32 RENAME (),
	i32 RENAME (),
	binary ff_yuv2rgb_get_func_ptr (0: binary c),
	binary ff_yuv2rgb_c_init_tables (0: binary c, 1: binary inv_table, 2: i32 brightness, 3: i32 contrast, 4: i32 fullRange, 5: i32 saturation),
	binary sws_getCoefficients (0: i32 colorspace),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary av, 1: i32 ac),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (),
	void checkasm_check_aacpsdsp (),
	void checkasm_check_afir (),
	void checkasm_check_alacdsp (),
	void checkasm_check_audiodsp (),
	void checkasm_check_blockdsp (),
	void checkasm_check_bswapdsp (),
	binary checkasm_get_perf_context (),
	i32 checkasm_bench_func (),
	i32 double_near_abs_eps_array (0: binary a, 1: binary b, 2: double eps, 3: binary len),
	i32 double_near_abs_eps (0: double a, 1: double b, 2: double eps),
	i32 float_near_abs_eps_array_ulp (0: binary a, 1: binary b, 2: double eps, 3: binary len, 4: binary max_ulp),
	i32 float_near_abs_eps_array (0: binary a, 1: binary b, 2: double eps, 3: binary len),
	i32 float_near_abs_eps_ulp (0: double a, 1: double b, 2: double eps, 3: binary max_ulp),
	i32 float_near_abs_eps (0: double a, 1: double b, 2: double eps),
	i32 float_near_ulp_array (0: binary a, 1: binary b, 2: binary len, 3: binary max_ulp),
	i32 float_near_ulp (0: double a, 1: double b, 2: binary max_ulp),
	i32 main (0: binary argv, 1: i32 argc),
	binary checkasm_check_func (0: binary name, 1: binary func),
	void checkasm_fail_func (0: binary msg),
	void checkasm_report (0: binary name),
	void checkasm_check_exrdsp (),
	void checkasm_check_fixed_dsp (),
	void checkasm_check_flacdsp (),
	void checkasm_check_float_dsp (),
	void checkasm_check_fmtconvert (),
	void checkasm_check_g722dsp (),
	void checkasm_check_h264dsp (),
	void checkasm_check_h264pred (),
	void checkasm_check_h264qpel (),
	void checkasm_check_hevc_add_res (),
	void checkasm_check_hevc_idct (),
	void checkasm_check_hevc_sao (),
	void checkasm_check_huffyuvdsp (),
	void checkasm_check_jpeg2000dsp (),
	void checkasm_check_llviddsp (),
	void checkasm_check_llviddspenc (),
	void checkasm_check_pixblockdsp (),
	void checkasm_check_sbrdsp (),
	void checkasm_check_sw_rgb (),
	void checkasm_check_synth_filter (),
	void checkasm_check_utvideodsp (),
	void checkasm_check_v210enc (),
	void checkasm_check_blend (),
	void checkasm_check_colorspace (),
	void checkasm_check_vf_hflip (),
	void checkasm_check_nlmeans (),
	void checkasm_check_vf_threshold (),
	void checkasm_check_videodsp (),
	void checkasm_check_vp8dsp (),
	void checkasm_check_vp9dsp (),
	binary audio_match (),
	binary compare (),
	binary concat (),
	binary crc (),
	binary do_tiny_psnr (),
	binary enc_dec_pcm (),
	binary enc_dec (),
	binary ffmetadata (),
	binary ffmpeg (),
	binary fmtstdout (),
	binary framecrc (),
	binary framemd5 (),
	binary gaplessenc (),
	binary gapless (),
	binary lavffatetest (),
	binary lavftest (),
	binary md5pipe (),
	binary md5 (),
	binary null (),
	binary oneline (),
	binary oneoff (),
	binary pcm (),
	binary pixfmts (),
	binary probechapters (),
	binary probefmt (),
	binary probeframes (),
	binary probegaplessinfo (),
	binary probetags (),
	binary refcmp_metadata (),
	binary runecho (),
	binary runlocal (),
	binary run (),
	binary stddev (),
	binary stream_remux (),
	binary target_path (),
	binary transcode (),
	binary video_filter (),
	binary checkout (),
	binary clean (),
	binary compile (),
	binary configure (),
	binary die (),
	binary fail (),
	binary fate (),
	binary lock (),
	binary report (),
	binary update (),
	binary do_audio_only (),
	binary do_image_formats (),
	binary do_lavf_fate (),
	binary do_lavf_timecode_drop (),
	binary do_lavf_timecode_nodrop (),
	binary do_lavf_timecode (),
	binary do_lavf (),
	binary do_streamed_images (),
	binary do_md5sum (),
	binary do_md5sum (),
	binary do_md5sum (),
	binary do_md5sum (),
	binary do_md5sum (),
	binary abs (),
	binary is_numeric_str (),
	binary max (),
	binary do_avconv_crc (),
	binary do_avconv_nomd5 (),
	binary do_avconv (),
	binary echov (),
	binary run_avconv (),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	double ssim_plane (0: binary cnt, 1: binary stride1, 2: binary stride2, 3: i32 height, 4: i32 width, 5: binary pix1, 6: binary pix2, 7: binary buf),
	i32 main (0: binary argv, 1: i32 argc),
	i64 ssd_plane (0: binary pix1, 1: binary pix2, 2: i32 size),
	i32 main (0: binary argv, 1: i32 argc),
	void print_help (0: binary name),
	i32 main (0: binary argv, 1: i32 argc),
	binary av_free (0: binary ptr),
	binary av_mallocz (0: i64 size),
	binary av_malloc (0: i64 size),
	binary av_realloc (0: i64 size, 1: binary ptr),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	binary die (),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	binary hiegrep2 (),
	binary hiegrep (),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	binary show_help (),
	i32 LLVMFuzzerTestOneInput (0: binary data, 1: i64 size),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
	i32 main (0: binary argv, 1: i32 argc),
}
